<?php

require_once(dirname(__FILE__) . '/okl_dev.truncate.inc');

function okl_dev_page_build(&$page) {
   
    //dev
    if (_okl_dev_is_no_live_system()){
        if (!defined('NM_DEVELOP_LOGIN_MASTERPASSWORD_DEFAULT'))
        {
            drupal_set_message('const NM_DEVELOP_LOGIN_MASTERPASSWORD_DEFAULT is not defined. This is not acceptable!', 'error');
        }
         /*//add plugin-js for controlss
        drupal_add_css(drupal_get_path('module', 'dev_live_warner') . '/assets/css/dev.css');
        //add plugin-js for controlss
        drupal_add_js(drupal_get_path('module', 'dev_live_warner') . '/assets/js/dev.js');
          */
        
        //fuege link unten ans seitenende zum log
        $link = '<a href=/last_update_log>Log des letzten Updates</a>';
        $page['page_bottom']['dev_live_warner'] = array(
            '#weight' => 80,
            '#markup' => '<center>' . $link . '</center><br><br>',
        );
    }
    //live
    else {

        drupal_set_message(t('You appear to be on a live-system, but okl_dev is enabled. R u sure?'), 'warning');
    }
}


/**
 * checks if you are NOT on a livesystem
 * @return boolean true if not on live-system
 */
function _okl_dev_is_no_live_system()
{
    if(!module_exists('environment_indicator'))
    {
        return true;
    }
    $current_environment = environment_indicator_get_active();
    return $current_environment['machine'] != 'live_environment';
}

/**
 * Implements hook_menu().
 * pfad, für GUI, um DB zu leeren
 */
function okl_dev_menu() {
    $items = array();
    $items['truncate_content'] = array(
        'title' => 'Truncate',
        'description' => 'Delete all content from database',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('okl_dev_truncate_form'),
        'access arguments' => array('administer filters'),
        'file' => 'okl_dev.forms.inc',
        'type' => MENU_LOCAL_TASK,
        'weight' => 3,
    );
    
    $items['last_update_log'] = array(
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
        'page callback' => 'okl_dev_view_update_log', // Magic goes here
    );

    return $items;
}


/**
 *  VIEW LAST UPDATE LOG
 */
/**
 * liefert die seite mit dem letzten log aus 
 * @return type array page-definition
 */
function okl_dev_view_update_log() {
    if (_okl_dev_updatelog_exists())
        $log = file_get_contents(_okl_dev_get_updatelog_path());
    else
        $log = "n/a";
    return array('#markup' => '<h1>Letztes Update Log:</h1><pre>' . $log . '</pre>');
}

/**
 * schaut ob das logtype existiert
 * @return boolean true false
 */
function _okl_dev_updatelog_exists() {
    $file = _okl_dev_get_updatelog_path();
    return file_exists($file);
}
/**
 * liefert pfad zur logfile
 * @return type string absolute path to logfile
 */
function _okl_dev_get_updatelog_path() {
    $files_dir = _okl_dev_get_document_root() . DIRECTORY_SEPARATOR . variable_get('file_public_path', conf_path() . '/files/');
    return $files_dir . '/last_update_log';
}
/**
 * Get the document root for the current Drupal installation.
 * $_SERVER['DOCUMENT_ROOT'] is not reliable across all
 * systems, so we need a way to get the correct value.
 *
 * @return (string)
 */
function _okl_dev_get_document_root() {
    $absolute_dir = dirname(__FILE__);
    $relative_dir = drupal_get_path('module', 'okl_dev');
    return substr($absolute_dir, 0, -1 * (1 + strlen($relative_dir)));
}

/**
 *  ----END VIEW LAST UPDATE LOG
 */



/**
 * implements hook_form_FORM_ID_alter(&$form, &$form_state, $form_id) {
 * @param array $form
 * @param type $form_state
 * @param type $form_id
 */
function okl_dev_form_section_courses_onlinekurslabor_admin_settings_page_alter(&$form, &$form_state, $form_id) {

    // Onlinekurslabor-setting: link zum Löschen von Inhalt
    $form['okl_dev_truncate_link'] = array(
        '#markup' => l(t("Truncate the website's content.."), '/truncate_content'),
    );
}

//03.11.2017 - 18:26 - SN - prevent emails from being sent
//http://www.jaypan.com/tutorial/preventing-emails-being-sent-drupal-7-development-environment
function okl_dev_mail_alter(&$message) {
    // We don't want to send emails if the variable has not been set, or if it has been set and is TRUE.
    // We can use variable_get() to get the $conf variable set in our settings.php file
    // Note that by setting the default to TRUE, the default setting for the system is to be
    // a development environment. Set this to FALSE to have the default be a live environment.
    if (variable_get('truncate_environment', TRUE)) {
        // First: Prevent the mail from being sent
        $message['send'] = FALSE;

        // Next: Log the mail so it can be debugged if necessary
        watchdog('Truncate-Skript', 'The following email was not sent: !message', array('!message' => '<pre>' . print_r($message, TRUE) . '</pre>'));
    }
}

function _okl_dev_watchdoginfo($info, $mode = WATCHDOG_DEBUG) {
    watchdog("TRUNCATE DATA", $info, array(), $mode);
}

