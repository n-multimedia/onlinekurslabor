<?php

/**
 * implements function hook_views_pre_view(&$view, &$display_id, &$args) {
 * 
 * fuegt die ebene-hoch-+ upload-funktion in der ansicht des videosafe-ajax-browsers ein
 * 
 * @param type $view
 * @param type $display_id
 * @param type $args
 */
function videosafe_views_pre_view(&$view, &$display_id, &$args) {

    if ($view->name == 'videosafe_folderview' && $display_id == 'ajax_browser') {
        $exposed_input = $view->get_exposed_input();
        $current_node_nid = @$exposed_input['field_parent_folder_target_id'];
        if (!$current_node_nid)
            return;
        $curr_node = node_load($current_node_nid);
        //fuer video laedt er nicht den view sondern ein normales template.. 
        if ($curr_node->type == NM_VIDEOSAFE_VIDEO) {
            $curr_node->render_ajax = true;
            $nodeview_videosafe_description = node_view($curr_node, 'videosafe_description');
            $view->display_handler->options['empty']['area']['content'] = drupal_render($nodeview_videosafe_description);
        }

        $parent_dir_nid = !empty($curr_node->field_parent_folder)?$curr_node->field_parent_folder[LANGUAGE_NONE][0]['target_id']:false;
        $addfolder_glyph = '<span class="glyphicon glyphicon-plus" aria-hidden="true"></span> ' . t("Add Subfolder");
        $addfolder_html = '<a href="/node/add/videosafe-folder?field_parent_folder=' . $current_node_nid . '" id="add_new_folder">' . $addfolder_glyph . '</a>';
        $before_html = '';
        if ($parent_dir_nid) {
            $folder_up_glyph = '<br><span class="glyphicon glyphicon-level-up" aria-hidden="true"></span> ' . t("Level up");
            $upload_glyph = '<span class="glyphicon glyphicon-upload" aria-hidden="true"></span> ' . t("Upload");

            $before_html .= '<a rel="' . $parent_dir_nid . '" href="/node/' . $parent_dir_nid . '">' . $folder_up_glyph . '</a>';
            $before_html .= $curr_node->type != NM_VIDEOSAFE_VIDEO? ' | ' . $addfolder_html:'';
            if ($curr_node->type == NM_VIDEOSAFE_FOLDER) {
                $before_html .= ' | <a href="/node/add/videosafe-video?field_parent_folder=' . $current_node_nid . '&upload_triggered_from_tab=true" id="upload_new_video">' . $upload_glyph . '</a>';
            }
        } elseif($curr_node->type != NM_VIDEOSAFE_VIDEO) {
            $before_html = $addfolder_html;
        }

        $view->attachment_before = $before_html;
    }
}

/**
 * implements hook_node_view
 * fixes PHP-warning Undefined property: stdClass::$render_ajax
 * @param type $node
 * @param type $view_mode
 * @param type $langcode
 */
function videosafe_node_view($node, $view_mode, $langcode) {
  if ($node->type == NM_VIDEOSAFE_VIDEO) {
    if (!isset($node->render_ajax)) {
      $node->render_ajax = false;
    }
  }
}

/**
 * Wenn ein neues Video erstellt wurde und der Upload Ã¼ber die ajax-select-view getriggert wurde,
 * dann Nachricht anzeigen
 * @param type $node
 */
function videosafe_node_insert($node) 
{
    if($node->type == NM_VIDEOSAFE_VIDEO &&  @strstr( $_SERVER["HTTP_REFERER"] , 'upload_triggered_from_tab=true'))
    {
        drupal_set_message(t("Video successfully created. Please close this tab to return."), 'status');;
    }
    
}
 
/**
 * hook fuer das h5p-content-formular
 * ersetzt upload durch den ajax-view
 */
function videosafe_form_h5p_content_node_form_alter(&$form, &$form_state, $form_id) {
  
    //needed for ajax within form-scope and prepopulate
     $currently_set_og_group = !empty(drupal_get_query_parameters()['og_group_ref'])?drupal_get_query_parameters()['og_group_ref'] : null;
    //enable hook on failed validation!!
     $form_state['no_cache'] = TRUE;
    /* with big thx to http://stackoverflow.com/questions/4932523/embed-a-view-using-ajax for pointing in the right direction */
    /* baut zunaecht mit php settings, die dann durch drupal in js-settings konvertiert werden */
    $view = views_get_view('videosafe_folderview');
    $view->set_display('ajax_browser');
    $view->set_use_ajax(TRUE);
    //$view->set_arguments(array($tid));
    $drupal_view_setting = array(
        'views' => array(
            'ajax_path' => url('views/ajax'),
            'ajaxViews' => array(
                array(
                    'view_name' => $view->name,
                    'view_display_id' => $view->current_display,
                    'view_args' => check_plain(implode('/', $view->args)),
                    'view_path' => check_plain($_GET['q']),
                    'view_base_path' => $view->get_path(),
                    'view_dom_id' => 1,
                    'pager_element' => !empty($view->pager) ? $view->pager['element'] : 0,
                    #'field_parent_folder_target_id' => _videosafe_get_root_directory()->nid,
                    'page' => 0,
                    //eigtl nicht fuer den view, aber gibt sonst nen form_error durch prepopulate
                    'og_group_ref' => $currently_set_og_group
                ),
            ),
        ),
    );
    $videosafe_setting = array('videosafe' => array('root_nid' => _videosafe_get_root_directory()->nid,
        'loading' => 'loading...<br><img src="'.base_path(). drupal_get_path('module', 'videosafe').'/assets/img/loading.gif">'));
    drupal_add_js($videosafe_setting, 'setting');
    drupal_add_js($drupal_view_setting, 'setting');
    /* add the modal dialog to the form */
    views_add_js('ajax_view');
    /* edit: ersetzt die upload-box in h5p durch was selbstgestricktes */
    drupal_add_js(drupal_get_path('module', 'videosafe') . '/assets/js/videosafe_edit.js');
    drupal_add_js(drupal_get_path('module', 'videosafe') . '/assets/js/videosafe_ajax_browser.js');
    $form['#prefix'] = theme('videosafe_modal_template');
 
}

function videosafe_entity_info_alter(&$entity_info) {

//NB: media_ prefix required.
//You can repeat the following section for any view modes you'd like to create.

// First View Mode
// tag 1 references the entity type, ex. node or file
// tag 3 provides a machine name for your mode
  $entity_info['node']['view modes']['videosafe_description'] = array(
    'label' => t('Videosafe - description'),
    // This is what you'll see in your "Manage Display" tab.
    'custom settings' => FALSE,
    #   'view callback' => 'videosafe_node_formatter_viewmode_description'
  );

}


function videosafe_preprocess_node(&$vars) {
  if ($vars['view_mode'] == 'videosafe_description') {
    $vars['theme_hook_suggestions'][] = 'node__videosafe__description';
  }
}

/**
 * Implements hook_theme().
 */
function videosafe_theme($existing, $type, $theme, $path) {
    return array(
        'node__videosafe__description' => array(
            'template' => 'templates/node--videosafe--description',
        ),
        //used for rendering the modal windows
        'videosafe_modal_template' => array(
            'template' => 'templates/videosafe-modal-template',
        ),
    );
}


/**
 * Implementation of hook_menu().
 */
function videosafe_menu() {

    /* $items['videosafe_ajax'] = array(
      'page callback' => 'videosafe_ajax_get_ajax', // Render HTML
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
      'delivery callback' => 'videosafe_ajax_callback',  // Magic goes here
      ); */

    $items['videosafe'] = array(
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
        'page callback' => 'videosafe_goto_root',
    );
    /*
      $items['videosafe_getvideo'] = array(
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
      'delivery callback' => 'videosafe_getvideo',  // Magic goes here
      );
     */
    return $items;
}

/*menu_callback
auf url /videosafe/ leitet er aufs rootverzeichnis */
function videosafe_goto_root() {
  drupal_goto('/videosafe/' . _videosafe_get_root_directory()->nid);
}
/*
function videosafe_ajax_get_ajax() {
  //permissionsachen
  global $user;
  $og_group = $_GET['og_group_ref'];

  // The function will receive the array of arguments after the "get/ajax" prefix
  $path = implode('/', func_get_args());
  $args = func_get_args();
  $render_string = menu_execute_active_handler('videosafe/2438', FALSE);
  # return("HANS");

  $items = _videosafe_load_ajax_nodes($args[0]);
  if ($args[0]) {
    $requested_node = node_load($args[0]);
    if ($requested_node->type == "videosafe_video") {
      $showing_video = TRUE;
    }
  }
  if (!count($items)) {
    return "<i>" . t("empty") . "</i>";
  }
  #  var_dump($items);
  $linktpl = "<a href=/videosafe/ajax/%d>%s</a>";
  $html_tpl = "<div>%s<div class=videosafe-sibling>%s</div></div>";
  $loading = '<img src=' . url('/sites/all/modules/onlinekurslabor/custom_general/images/icons/throbber-active.gif') . ' alt=Loading>';
  if (!count($args)) {
    $string = "<style>.videosafe-sibling {padding: 5px; display:none; margin-left: 4%;}"
      . ".videosafe_container{text-align:left;} "
      . ".videosafe_container a {text-decoration: underline;}"
      . "</style>";
  }
  else {
    $string = "";
  }

  foreach ($items as $item) {
    if (!$showing_video) {
      if ($item->type == 'videosafe_folder') {
        $title = $item->title;
      }
      else {
        $file = file_load($item->field_video[LANGUAGE_NONE][0]['fid']);
        $title = $file->filename;
      }


      $link = sprintf($linktpl, $item->nid, $title);
      $string .= sprintf($html_tpl, $link, $loading);
    }
    else {
      #$string .= t('Name').': '.$item->
      #  $string .= t('Description') . ': ' .
      $string .= $item->body[LANGUAGE_NONE][0]['value'];
      #$string .= var_export($item);
      $string .= '<br>';
      //flatten the arrays
      $it1 = new RecursiveIteratorIterator(new RecursiveArrayIterator($item->field_available_in));
      $allowed_groups = iterator_to_array($it1, FALSE);

      $it2 = new RecursiveIteratorIterator(new RecursiveArrayIterator($item->field_exclusive_access));
      $exclusive_access = iterator_to_array($it2, FALSE);;


      #$string .= var_export($allowed_groups);
      if (count($exclusive_access)) {
        if (in_array('administrator', $user->roles) || in_array('moderator', $user->roles) || in_array($user->uid, $exclusive_access)) {
          $allow_override = TRUE;
        }
        else {
          $no_access = TRUE;
          $string .= '<i>' . t('This video has a blocking notice and can therefore not be used by you') . '</i>';
        }
      }
      else {
        if (array_intersect($user->roles, array(
          'tutor',
          'dozent',
          'moderator',
          'administrator'
        ))) {
          $allow_override = TRUE;
        }
      }
      if (!in_array($og_group, $allowed_groups)) {
        $no_access = TRUE;
        $string .= '<i>' . t('This video cannot be used since it isn\'t open for this topic.') . '</i>';;
      }
      if ($no_access && $allow_override) {
        $string .= ' ' . t('You can change this here') . 'TODO:LINK';
        $string .= "<br>";
        $string .= t('Still use the video: ');
      }
      elseif ($no_access && !$allow_override) {
        $string .= "<br>";
      }


      #   $string .="<br>";
      #  $string.=drupal_render($item->field_video);
      if (!$no_access || $allow_override) {

        $file = file_load($item->field_video[LANGUAGE_NONE][0]['fid']);
        $string .= "<button type=submit name=use_video value=" . file_create_url($file->uri) . ">" . t("Select") . "</button>";
      }
    }
  }

  return $string;
}*/
/*
//http://okldev2.naumenko-multimedia.de/videosafe/ajax
function _videosafe_load_ajax_nodes($node_id) {
  if (!$node_id) {
    $node_id = 2438;
  }
  $nids = array();
  $result = array();
  $node = node_load($node_id);

  $query = new EntityFieldQuery();
  if ($node->type == 'videosafe_folder') {
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', array(
        NM_VIDEOSAFE_FOLDER,
        NM_VIDEOSAFE_VIDEO
      ))
      ->propertyCondition('status', NODE_PUBLISHED)
      ->fieldCondition('field_parent_folder', 'target_id', $node_id);
    $result = $query->execute();
  }
  else {
    $nids = array($node_id);
  }


  $nids = array_merge($nids, (array) array_keys($result['node']));


  return entity_load('node', $nids);

}

function videosafe_ajax_callback($page_callback_result) {
  // Only render content and validates return
  echo($page_callback_result);
  drupal_exit();


}**/


/**
 * checkt, ob man gerade einen videosafe editiert hat. dann wird filepermission auch
 * gecheckt und wÃ¼rd einen auf 403 leiten.
 *  unsicher und unschÃ¶n  aber nicht zu aendern
 * @return bool is_streaming
 */
function _videosafe_was_node_edited($node) {
  global $user;
  //hat entsprechende berechtigungen und der Post-Parameter ist gesetzt
  if (array_intersect($user->roles, array(
    NM_ROLE_ADMIN,
    NM_ROLE_AUTOR,
    NM_ROLE_MODERATOR
  ))) {
    if (@$_POST['form_id'] == "videosafe_video_node_form") {
      return TRUE;
    }
  }
  #
  return FALSE;


}


/**
 *
 * @deprecated derzeit werden einfach die private-file-URLs genutzt

function videosafe_getvideo() {//  1. parameter: file-id
  //@todo
  #$videosafe_video_nid = (arg(1));
  $file_id = (arg(1));
  $file = file_load($file_id);

  $filename = (arg(2));
  //verhindert caching - evtl wieder raus#
  //nachdem im privaten dateisystem ist keine weitere accessprÃ¼fung notwendig, das passiert in der entspr. methode
  $uri = file_create_url($file->uri) . '?' . drupal_random_key(6);
  #var_dump($uri);
  $mime = file_get_mimetype($file->uri);


  # $realurl = 'http://okldev2.naumenko-multimedia.de/sites/default/files/h5p/content/5024/videos/files-56388bc0152f2.mp4';
  # $filepath =  getcwd(). '/sites/default/files/cat.mp4';
  $ranges = _videosafe_headers_getRanges();
  //mit dem Get-Parameter ranges kann man ermitteln, ob ein Video Ã¼ber den Player ausgeliefert wird. Einfaches Debug->neuer Tab geht dann nicht.
//todo if true entfernen
  if (TRUE || ($ranges)) {

    header("Content-type:" . $mime); // change mimetype

    if (isset($_SERVER['HTTP_RANGE'])) { // do it for any device that supports byte-ranges not only iPhone
      drupal_goto($uri);
      #rangeDownload($filepath);
    }
    else {
      drupal_goto($uri);
      #header("Content-length: " . filesize($filepath));
      #readfile($filepath);

    } // fim do if

    exit(0);
  }
  else {
    echo "access denied";
    exit;
    #show403('bad credentials');
  }

} */

/**
 * gets objects of type NM_VIDEOSAFE_VIDEO, not sorted in  a tree!
 * @return array<NM_VIDEOSAFE_FOLDER> stored folders
 */
function _videosafe_get_all_folders() {

  $nids = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->fields('n', array('type'))
    ->condition('n.type', NM_VIDEOSAFE_FOLDER)
    ->execute()
    ->fetchCol(); // returns an unindexed array
  $nodes = node_load_multiple($nids);
  return $nodes;
}

/**
 * gets objects of type NM_VIDEOSAFE_VIDEO
 * @return array<NM_VIDEOSAFE_VIDEO> stored videos
 */
function _videosafe_get_all_videos() {

  $nids = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->fields('n', array('type'))
    ->condition('n.type', NM_VIDEOSAFE_VIDEO)
    ->execute()
    ->fetchCol(); // returns an unindexed array
  $nodes = node_load_multiple($nids);
  return $nodes;
}
        
        
/**
 * gets objects of type NM_VIDEOSAFE_VIDEO
 * holt videos, bei denen die $uid im feld exclusive_access hinterlegt ist
 * @return array<NM_VIDEOSAFE_VIDEO> stored videos
 */
function _videosafe_get_videos_for_exclusive_user_id($uid) {
    //dummes EntityFieldQuery funzt hier nicht
    $query = db_select('node', 'n')
            ->fields('n', array('nid'))
            ->condition('type', NM_VIDEOSAFE_VIDEO);
    $query->leftJoin('field_data_field_exclusive_access', 'exclusive_access', 'n.nid = exclusive_access.entity_id');
    $query->condition('exclusive_access.field_exclusive_access_target_id', $uid, '=');
    $foundrecords = $query->execute()->fetchCol();
    return node_load_multiple($foundrecords);
}


/**
 * gets h5ps that use this video file
 * @param string $file_uri like private://my_video.avi
 * @return array<StdClass> nodes of type h5p
 */
function _videosafe_get_h5p_usage($file_uri) {
    $video_base_uri = _videosafe_get_relative_url($file_uri);
    $videosafe_base_uri = preg_replace('/h5p\/content\/[0-9]+\//', '', $video_base_uri);


    $video_escaped_uri = addcslashes($video_base_uri, '/');
    $videosafe_escaped_uri = addcslashes($videosafe_base_uri, '/');

    $query = db_select('h5p_nodes', 'n')->fields('n', array('nid'));

    $db_or = db_or();
    //alt-eintraege von h5p werden auch gesucht.
    $db_or->condition('json_content', '%' . db_like($video_escaped_uri) . '%', 'like');
    $db_or->condition('json_content', '%' . db_like($videosafe_escaped_uri) . '%', 'like');
    $query->condition($db_or);

    $hp_nids = $query->execute()->fetchAll(PDO::FETCH_COLUMN);
    return node_load_multiple($hp_nids);
}

/**
 * gets array with information where $videosafe_node is used
 * @param StdClass $videosafe_video_object - a node
 * @return array<> usage
 */
function _videosafe_get_usage($videosafe_video_object) {
  $h5ps = array();

  foreach ($videosafe_video_object->field_video[LANGUAGE_NONE] as $video_data) {
    if (count($video_data)) {
      $file = file_load($video_data['fid']);
      $h5ps = array_merge($h5ps, _videosafe_get_h5p_usage($file->uri));
    }

  }
  return ($h5ps);
}


/**
 * gets refs to h5p-object
 * @param StdClass $h5p_node - a node
 * @return array<StdClass> referenced topics
 */
function _videosafe_h5p_get_refs($h5p_node) {

  $it1 = new RecursiveIteratorIterator(new RecursiveArrayIterator($h5p_node->og_group_ref));
  $group_ref = iterator_to_array($it1, FALSE);
  $it2 = new RecursiveIteratorIterator(new RecursiveArrayIterator($h5p_node->og_domain_ref));
  $domain_ref = iterator_to_array($it2, FALSE);

  $refs = array_merge($group_ref, $domain_ref);
  if (count($refs)) {
    return node_load_multiple($refs);
  }
  return array();
}

/**
 * gets video-tracks-data to a videosafe-node-id
 * @param string $videsafe_video_id 1111
 * @return array<String> video_track_title =>... , videos => [fid=>..., url=>..., description =>..., description_short=>... ]}
 */
function _videosafe_get_video_tracks_data($videsafe_video_id) {
  global $base_url;
  
  $node = node_load($videsafe_video_id);
  
  $multivideo_type_str = 'Videospur';
  if (!empty($node->field_multivideo_type)) {
        $multivideo_type_str = field_view_value('node', $node, 'field_multivideo_type', $node->field_multivideo_type[LANGUAGE_NONE][0])['#markup'];
    }

    $data_array = array();
    $data_array['video_track_title'] = $multivideo_type_str;
  foreach (@$node->field_video[LANGUAGE_NONE] as $vidcounter => $video_data) {
    if (count($video_data)) {
      $file = file_load($video_data['fid']);
      $video_description_short = ($video_data['description']?:$vidcounter+1);
      $video_description = $multivideo_type_str.' '.$video_description_short;
      
      $data_array['videos'][$vidcounter]['fid'] = $video_data['fid'];
      $data_array['videos'][$vidcounter]['description'] = $video_description; 
      $data_array['videos'][$vidcounter]['description_short'] = $video_description_short; 
      $data_array['videos'][$vidcounter]['url'] = _videosafe_get_relative_url($file->uri);
      
    }
  }
  return ($data_array);
}

/**
 * we're using relative urls in h5p. this converts  a normal file-uri to a relative one
 * @param string $uri Uri of a file
 * @return string $relative_url like videosafe/name_of_video.mp4
 */
function _videosafe_get_relative_url($uri) {
  $uri_array = explode('://', $uri);
  return $uri_array[1];
}

/**
 * returns the root directory
 * @return StdClass<NM_VIDEOSAFE_FOLDER> root-directory
 */
function _videosafe_get_root_directory() {
  $all_folders = _videosafe_get_all_folders();
  foreach ($all_folders as $folder) {
    if (empty($folder->field_parent_folder)) {
      return $folder;
    }
  }
}



 

/**
 * sends content to the user's browser using the http-range-info
 * THANKS https://gist.github.com/benvium/3749316
 * bÃ¤m oida thanks a lot http://www.tuxxin.com/php-mp4-streaming/ now works on iphone
 * @param string $location  path of the file on server's filesystem
 * @return void
 */
function _videosafe_downloadRange($location) {
//ggf vorhandenen ob_start abschieÃen
//wichtig gegen out-of-memory!!
    ob_end_clean();
    //debugsachen
    $log_debug = false;
    $DEBUG_INFO = array();
    $SERVER_HTTP_RANGE = @ $_SERVER['HTTP_RANGE'];
    //IE, Edge: force using byterange by finding parameter HTTP_GETCONTENTFEATURES_DLNA_ORG
    if(!$SERVER_HTTP_RANGE && @$_SERVER['HTTP_GETCONTENTFEATURES_DLNA_ORG']=='1')
        $SERVER_HTTP_RANGE = "bytes=0-";
    $DEBUG_INFO[] = '___________REQUEST______________';
    $DEBUG_INFO[] = 'browser ' . @ $_SERVER['HTTP_USER_AGENT'] . ' with the http-range ' .$SERVER_HTTP_RANGE ?:'none.';
    $DEBUG_INFO[] = '___________ANSWER______________';
    if (!file_exists($location)) {
        header("HTTP/1.1 404 Not Found");
        return;
    }
    
    $fm = @fopen($location, 'rb');
    if (!$fm) {
        header("HTTP/1.1 505 Internal server error");
        return;
    }
    $size = filesize($location); // File size
    $length = $size; // Content length
    $start = 0; // Start byte
    $end = $size - 1; // End byte
    //content type already set in access-module
    //header('Content-type: video/mp4');
    if ($SERVER_HTTP_RANGE) {
        header('HTTP/1.1 206 Partial Content');
        $DEBUG_INFO[] = ' 206 Partial Content';
    } else {
        header('HTTP/1.1 200 OK');
        $DEBUG_INFO[] = ' HTTP/1.1 200 OK';
    }

    header("Accept-Ranges: bytes");
    if ($SERVER_HTTP_RANGE) {
        $c_start = $start;
        $c_end = $end;
        list(, $range) = explode('=', $SERVER_HTTP_RANGE, 2);
        if (strpos($range, ',') !== false) {
            header('HTTP/1.1 416 Requested Range Not Satisfiable');
            header("Content-Range: bytes $start-$end/$size");
            exit;
        }

        if ($range == '-') {
            $c_start = $size - substr($range, 1);
        } else {
            $range = explode('-', $range);
            $c_start = $range[0];
            $c_end = (isset($range[1]) && is_numeric($range[1])) ? $range[1] : $size;
        }
        $c_end = ($c_end > $end) ? $end : $c_end;

        if ($c_start > $c_end || $c_start > $size - 1 || $c_end >= $size) {
            header('HTTP/1.1 416 Requested Range Not Satisfiable');
            header("Content-Range: bytes $start-$end/$size");
            exit;
        }
        $start = $c_start;
        $end = $c_end;
        $length = $end - $start + 1;
        fseek($fm, $start);
        header('HTTP/1.1 206 Partial Content');
         $DEBUG_INFO[] = "Content-Range: bytes $start-$end/$length";
    }
     if ($videolength = _videosafe_get_videoduration_for_file($location)) {
        header('X-Content-Duration: ' . $videolength);
        header('Content-Duration: ' . $videolength);
        $DEBUG_INFO[] = 'Calculated Videolength ' . $videolength;
    }

    $DEBUG_INFO[] = 'Content-Length:' . (($end - $start) + 1);


    header("Content-Range: bytes $start-$end/$size");
    header("Content-Length: " . $length);
    //breakposition: download von video-files bricht ab (ca. 2,5mb). HTML5-Player fordern bei erreichen neue Daten an. 
    $breakposition = 2405290;
    //to disable breakposition set to zero
    //$breakposition = 0;
    $buffer = 1024 * 8;
      if ($log_debug)
        watchdog('videosafe-file-stream', "debug-info for file " . $filename . "\n" . implode(" |||\n ", $DEBUG_INFO), array(), WATCHDOG_DEBUG);
    
    while (!feof($fm) && ($p = ftell($fm)) <= $end) {
        if ($p + $buffer > $end) {
            $buffer = $end - $p + 1;
        }
        //falls kein html-5-player sondern normaler filedownload, transfer canceln. Nur minimal-Schutz, aber besser als nix
        if (@!$breakposition || $p <= $breakposition || $SERVER_HTTP_RANGE) {
            set_time_limit(0);
            echo fread($fm, $buffer);
            flush();  // Free up memory. Otherwise large files will trigger PHP's memory limit
        } else {
            if ($log_debug)
                watchdog('videosafe-file-stream', "exiting due to no-http-range and break hit", array(), WATCHDOG_DEBUG);
            fclose($fm);
            flush(); // Free up memory. Otherwise large files will trigger PHP's memory limit.
            /* bewirkt folgendes: An gewisser Stelle (o.g. breakposition) bricht der Transfer ab.
              HTML5-Player hat nun einen Schnipsel und fordert erneut Daten an.
              Download bricht aber einfach ab, ohne die Datei zu speichern. */
            exit;
        }
    }
    fclose($fm);
    // remove flush if problems
    flush(); // Free up memory. Otherwise large files will trigger PHP's memory limit.
    exit;
}

/**
 * liefert die lÃ¤nge eines videos in Sekunden, falls ffmpeg oder php5-ffmpeg vorhanden ist
 * @param string $location  path of the file on server's filesystem
 * @return int $duration in seconds
 */
function _videosafe_get_videoduration_for_file($location) {
    //php-package
    if (class_exists('ffmpeg_movie')) {
        $movie_object = new ffmpeg_movie($location, false);
        return number_format($movie_object->getDuration(), 2, '.', '');
    } else {//ffmpeg auf konsole
        ob_start();
        @passthru("/usr/bin/ffmpeg -i \"{$location}\" 2>&1");
        $duration_string = ob_get_contents();
        ob_end_clean();
        //program not found
        if (!strstr($duration_string, "ffmpeg: not found")) {
            $search = '/Duration: (.*?),/';
            $duration_string = preg_match($search, $duration_string, $matches, PREG_OFFSET_CAPTURE, 3);
            $time = $matches[1][0]; # '21:30:10';
            return strtotime("1970-01-01 $time UTC");
        }
    }
    trigger_error('neither PHP-Package php5-ffmpeg nor ffmpeg is installed. ', E_USER_WARNING);
    return 0;
}



/**
 * stores a screenshot for any videofile
 * @todo: refactor for PARAM $timestamp_at_location
 * @param string $file_uri  drupal file-uri ("private://...video.mp4")
 * @param float $at_relative_position position in the video for the screenshot, e.g. 0.5 = 50% of videolength
 * @return StdClass $ImageObject or null
 */
function _videosafe_store_screenshot_for_file($file_uri, $at_relative_position = 0.5) {
  /**
   * TEMPORÃR nur ein Dummy. 
   * Echte screenshots zu hÃ¤ndeln, ist ein grÃ¶Ãerer Aufand

    $FAKE_SCREENSHOT_URI = 'private://dummy-video-screenshot.png';
    $FAKE_FILE_candidates = file_load_multiple(array(), array('uri' => $FAKE_SCREENSHOT_URI));
    return reset($FAKE_FILE_candidates); // If empty, $file will be false, otherwise will contain the required file
    EXIT; */
  
  //passe zugriffsrechte an video an
  $real_videofile_path = drupal_realpath($file_uri);

  $videofile_candidates = file_load_multiple(array(), array('uri' => $file_uri));
  $videofile_object = reset($videofile_candidates);
  $drupal_target_file_folder = pathinfo($file_uri, PATHINFO_DIRNAME) . DIRECTORY_SEPARATOR;

  $videotime_full_seconds = round(_videosafe_get_videoduration_for_file($real_videofile_path) * $at_relative_position);
  //date respects timezone. substract current offset-hour * 60 min * 60 sec
  $videotime_full_seconds_formatted = date("G:i:s", ($videotime_full_seconds - date("G", 0) * 60 * 60));

  $videotime_formatted_filecompatible = str_replace(':', '_', $videotime_full_seconds_formatted);

  //Dateiname ohne .mp4 endung
  $jpg_base_filename = pathinfo($file_uri, PATHINFO_FILENAME);
  //VIDEO_screen@0_00_30.jpg
  $jpg_base_filename .= '_screen@' . $videotime_formatted_filecompatible . '.jpg';
  #$jpg_base_filename = md5($file_uri) . '_screen@' . $videotime_at_absolute_position_file_compatible . '.jpg';
  $drupal_jpg_target_filename = $drupal_target_file_folder . $jpg_base_filename;

  /**
   * check if drupal has screenshot stored - return it
   */
  $drupal_file_candidates = file_load_multiple(array(), array('uri' => $drupal_jpg_target_filename));
  $drupal_screenshot_candidate = reset($drupal_file_candidates); // If empty, $file will be false, otherwise will contain the required file
  if (is_object($drupal_screenshot_candidate)) {
    return $drupal_screenshot_candidate;
  }

  
  $temporary_screenshot_file = file_directory_temp() . DIRECTORY_SEPARATOR . 'screen_' .md5($drupal_jpg_target_filename).'.jpg';

  #"-quality: 2 (1= excellent, 32 = mau)"
  //todo: test: rÃ¤umt cron auf oder lÃ¤uft tmp voll?
  $ffmpg_cmd = "/usr/bin/ffmpeg -ss  $videotime_full_seconds_formatted -i $real_videofile_path -vframes 1 -q:v 2 $temporary_screenshot_file";
  @passthru($ffmpg_cmd);

  if (file_exists($temporary_screenshot_file)) {
    //unmanaged file geht nicht, da auf diese kein permission-check mÃ¶glich ist
    
    //create a dummy file, setting the parameters
    $file = new stdClass();

    //UID des OKL-Bots
    $oklbot = user_load_by_mail(NM_OKL_BOT_MAIL);
    if($oklbot)
    {
      $file->uid = user_load_by_mail(NM_OKL_BOT_MAIL)->uid;
    }
    else
    {
      $file->uid = 1;
    }
    $file->uri = $temporary_screenshot_file;
    $file->filemime = file_get_mimetype($temporary_screenshot_file);
    //temporary. get deleted after a while.
    $file->status = 0;
    //set the new field
    $file->field_file_belongs_to = array(LANGUAGE_NONE => array(array('target_id' => $videofile_object->fid)));
    
   $screenshot_object = file_copy($file, $drupal_jpg_target_filename, FILE_EXISTS_REPLACE);

    return $screenshot_object;
  }
  else {
    trigger_error('Could not store video-screenshot to ' . $temporary_screenshot_file . ", created with: " . $ffmpg_cmd, E_USER_WARNING);
    return null;
  }
}

/**
 * gets a screenshot with style media_6 for a video defined by $file_uri
 * @param string $file_uri  drupal file-uri ("private://...video.mp4")
 * @param float $at_relative_position position in the video for the screenshot, e.g. 0.5 = 50% of videolength
 * @return string $url
 */
function _videosafe_get_themed_screenshot_url_for_file($file_uri, $at_relative_position = 0.5) 
{
  $poster_file_obj = _videosafe_store_screenshot_for_file($file_uri, $at_relative_position);

  return _section_content_get_themed_video_screenshot_array($poster_file_obj->uri, null, false)['url'];
}