<?php

//Semester Logic
//year when the vhb ID started - needed for calculation
define("NM_VHB_SEMESTERID_START_YEAR", '84');
//vhb semester id when the first onlinekurslabor course was online
define("NM_VHB_SEMESTERID_OKL_START", '58');
//semester when okl started (WS 13/14)
define("NM_VHB_SEMESTERID_OKL_START_DATE", '10.2013');

//System
define("NM_FILTER_FORMAT_FILTERED_HTML", 'filtered_html');

//Blocks
define("NM_BLOCK_AUTOREN", 53);

//Global Forum
define("NM_GLOBAL_FORUM_TID", 180);
//Courses Parent Forum Term
define("NM_GLOBAL_PARENT_FORUM_TID", 10);

//Section Help: Variables
define("NM_HELP_BID", 197);
define("NM_HELP_HEADER_FID", 3769);
//okl-support
define("NM_SUPPORT_EMAIL", 'onlinekurslabor@medienlabor-uni-augsburg.de');

//Content
define("NM_DOMAIN_OVERVIEW_ID", 7); //deprecated
define("NM_DOMAIN_OVERVIEW_PATH", "domains");
define("NM_MEDIA_PATH", "domain/media");
define("NM_BIBLIO_PATH", "domain/biblio");
define("NM_TASKS_PATH", "domain/tasks");
define("NM_CONTENT_DOMAIN_PATH", "domain");
define("NM_CONTENT_TEXT_PATH", "domain/text");
define("NM_CONTENT_ADD_CONTENT_PATH", "domain/add");
define("NM_CONTENT_DELETE_CONTENT_PATH", "domain/delete");
define("NM_DOMAIN_ACCESS_REALM", "NM_DOMAIN_ACCESS_REALM");


//Contentcontent_multiple_choice
//Content Types
define("NM_CONTENT_DOMAIN", "content_domain");
define("NM_CONTENT_CHAPTER", "content_chapter");
define("NM_CONTENT_MULTIPLE_CHOICE", "content_multiple_choice");
define("NM_CONTENT_QUESTION_AND_ANSWER", "content_question_and_answer");
define("NM_BIBLIO", "biblio");
define("NM_INTERACTIVE_CONTENT", "h5p_content");
define("NM_FILE", "file");

//Course
//Content Types
define("NM_COURSE_NEWS", "courses_news");
define("NM_COURSE_DOCS", "courses_docs");
define("NM_COURSE_GROUP", "courses_group");
define("NM_COURSE", "courses_course");
define("NM_COURSE_FORUMTOPIC", "forum");
define("NM_COURSE_GENERIC_TASK", "courses_generic_task");
define("NM_COURSE_GENERIC_TASK_PATH", "course/tasks");
define("NM_COURSE_GENERIC_TASK_SOLUTION", "courses_generic_task_solution");
define("NM_COURSES_OVERVIEW_ID", 49);

define("NM_COURSE_DOC_PATH", "course/doc");
define("NM_COURSE_DOCS_PATH", "course/docs");
define("NM_COURSE_HOME_PATH", "course/home");
define("NM_COURSE_NEWS_PATH", "course/news");
define("NM_COURSE_INFO_PATH", "course/info");
define("NM_COURSE_GROUPS_PATH", "course/groups");
define("NM_COURSE_TEXT_PATH", "course/text");
define("NM_COURSE_BIBLIO_PATH", "course/biblio");
define("NM_COURSE_MEMBERS_PATH", "course/members");
define("NM_COURSE_FORUM_PATH", "course/forum");
define("NM_COURSE_FORUMCONTENT_PATH", "course/forumcontent");
define("NM_COURSE_ADMIN_PREFIX_PATH", "course/admin");

define("NM_COURSE_DEMO_LABEL", "[DEMO MODUS]");


//Tasks
define("NM_COURSES_TASK_DESCRIPTION", "0");
define("NM_COURSES_TASK_TASK", "1");
define("NM_COURSES_TASK_TIPS", "2");
define("NM_COURSES_TASK_CRITERIA", "3");
define("NM_COURSES_TASK_FORM", "4");

define("NM_COURSES_TASK_TYPE_SINGLE", "0");
define("NM_COURSES_TASK_TYPE_GROUP", "1");

define("NM_COURSES_TASK_WORKFLOW_DRAFT", "2");
define("NM_COURSES_TASK_WORKFLOW_SUBMITTED", "3");
define("NM_COURSES_TASK_WORKFLOW_ASSESSED", "4");

//Projects
//Content Types
define("NM_PROJECTS_RROJEKTORGANISATION", "projects_organization");
define("NM_PROJECTS_DOKUMENTATION", "projects_documentation");
define("NM_PROJECTS_KOOPERATIONSVEREINBARUNG", "projects_cooperation_agreement");
define("NM_PROJECTS_ZIELVEREINBARUNG", "projects_objective");
define("NM_PROJECTS_PROJEKTVORSCHLAG", "projects_proposal");
define("NM_PROJECTS_TAGEBUCH", "projects_blog");

define("NM_COURSE_PROJECTS_PATH", "projects/");

define("NM_COURSE_PROJECTS_PARTNERS_PATH", "projects/partners/");

//Videosafe Contenttype
define("NM_VIDEOSAFE_PATH", "videosafe");
define("NM_VIDEOSAFE_FOLDER", "videosafe_folder");
define("NM_VIDEOSAFE_VIDEO", "videosafe_video");

//Domains
//Contet Types
define("NM_SPACE", "spaces_space");


//Features..
//define('NM_COURSE_FEATURE_WIKI', $value)
define('NM_COURSE_FEATURE_FORUM', 'forum');
define('NM_COURSE_FEATURE_COURSE_GROUP_LOCK', 'course_group_lock');
define('NM_COURSE_FEATURE_TEXT', 'domain_text');

define("NM_COURSES_ROLE_ADMINISTRATOR", "kurs-dozent");
define("NM_COURSES_ROLE_TUTOR", "kurs-tutor");
define("NM_COURSES_ROLE_STUDENT", "kurs-student");

//Roles
define("NM_ROLE_AUTOR", "Autor");
define("NM_ROLE_ADMIN", "administrator");
define("NM_ROLE_DOZENT", "Dozent");
define("NM_ROLE_STUDENT", "Student");
define("NM_ROLE_TEST_STUDENT", "Test Student");
define("NM_ROLE_TUTOR", "Tutor");
define("NM_ROLE_MODERATOR", "Moderator");

define("NM_ROLE_KOOPERATIONSPARTNER", "Kooperationspartner");

//Content
//Views
define("NM_VIEW_DOMAIN_MEDIA", "domain_media");


//Content
define("NM_CHAPTER_SEPARATOR", ".");

define("NM_SUPPORT_MAIL", "support@medienlabor-uni-augsburg.de");


module_load_include('inc', 'custom_general', 'inc/functions');
module_load_include('inc', 'custom_general', 'inc/blocks');

/*
 * Context
 */

function custom_general_ctools_plugin_api($module, $api) {
  if ($module == 'context' && $api == 'plugins') {
    return array('version' => 3);
  }
}

/**
 * CTools plugin API hook for Context. Note that a proper entry in
 * hook_ctools_plugin_api() must exist for this hook to be called.
 */
function custom_general_context_plugins() {
  $plugins = array();
  $plugins['custom_general_condition_section_content'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'custom_general') . '/context_plugins',
      'file' => 'custom_general_condition_section_content.inc',
      'class' => 'custom_general_condition_section_content',
      'parent' => 'context_condition',
    ),
  );
  $plugins['custom_general_condition_section_courses'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'custom_general') . '/context_plugins',
      'file' => 'custom_general_condition_section_courses.inc',
      'class' => 'custom_general_condition_section_courses',
      'parent' => 'context_condition',
    )
  );
  $plugins['custom_general_condition_section_projects'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'custom_general') . '/context_plugins',
      'file' => 'custom_general_condition_section_projects.inc',
      'class' => 'custom_general_condition_section_projects',
      'parent' => 'context_condition',
    )
  );

  return $plugins;
}

/**
 * Registry hook for conditions & reactions.
 *
 * Each entry associates a condition or reaction with the CTools plugin to be
 * used as its plugin class.
 */
function custom_general_context_registry() {
  return array(
    'conditions' => array(
      'custom_general_condition_section_content' => array(
        'title' => t('Section Content is active'),
        'description' => t("Set this context when viewing parts of the <em>Content Section</em>"),
        'plugin' => 'custom_general_condition_section_content',
      ),
      'custom_general_condition_section_courses' => array(
        'title' => t('Section Courses is active'),
        'description' => t("Set this context when viewing parts of the <em>Courses Section</em>"),
        'plugin' => 'custom_general_condition_section_courses',
      ),
      'custom_general_condition_section_projects' => array(
        'title' => t('Section Projects is active'),
        'description' => t("Set this context when viewing parts of the <em>Projects Section</em>"),
        'plugin' => 'custom_general_condition_section_projects',
      ),
    ),
  );
}

/*
  function custom_general_context_page_reaction() {

  } */

function custom_general_init() {

  static $init;

  if ($init)
    return;

  $init = TRUE;

  // Execute the group type context condition all the time because we want
  // to use that condition to be able to check for "no group context."
  $plugin = context_get_plugin('condition', 'custom_general_condition_section_content');
  if ($plugin) {
    $plugin->execute2();
  }

  $plugin = context_get_plugin('condition', 'custom_general_condition_section_courses');
  if ($plugin) {
    $plugin->execute2();
  }


  $plugin = context_get_plugin('condition', 'custom_general_condition_section_projects');
  if ($plugin) {
    $plugin->execute2();
  }


  $group = og_context();
  if ($group) {

    $plugin = context_get_plugin('condition', 'custom_general_condition_section_content');
    if ($plugin) {
      $plugin->execute($group);
    }

    $plugin = context_get_plugin('condition', 'custom_general_condition_section_courses');
    if ($plugin) {
      $plugin->execute($group);
    }

    $plugin = context_get_plugin('condition', 'custom_general_condition_section_projects');
    if ($plugin) {
      $plugin->execute($group);
    }

    //30.04.2013 - 18:19 - SN
    //todo optimization needed ?
    //needs to be executed once again, because one context is set too late
    $plugin = context_get_plugin('condition', 'context_og_condition_member_status');
    if ($plugin) {
      $plugin->execute($group);
    }
  }
  
    global $user;
    $role       = array();
    // Check to see if $user has the administrator role.
    $gid        = _section_courses_get_active_course();
    if (in_array( NM_ROLE_ADMIN , array_values($user->roles)) or in_array( NM_ROLE_MODERATOR , array_values($user->roles)) ) {
       $role[] = 'admin';
       $role[] = 'dozent';
       $role[] = 'autor';

    }
    if (in_array( NM_ROLE_DOZENT , array_values($user->roles)) ) {
        $role[] = 'dozent';
    }
    if (in_array( NM_ROLE_AUTOR , array_values($user->roles)) ) {
        $role[] = 'autor';
    }
    
    if ($gid != null){
        $tutors     = custom_general_get_users_in_group_by_role_real($gid->nid, NM_ROLE_TUTOR);
        $teachers   = custom_general_get_users_in_group_by_role_real($gid->nid, NM_ROLE_DOZENT);
        
        if( ($tutors && (array_values($tutors) != false) && in_array($user, array_values($tutors))) || ($teachers && (array_values($teachers) != false) && in_array($user, array_values($teachers)))){
            $role[] = 'dozent';
        }
    }
    if (count($role) < 1){
        $role[] = 'student';
    }
    $role = array_unique($role);
    foreach ( $role as $position)
        {
            drupal_add_css(drupal_get_path('module', 'custom_general') .'/css/' . $position . '.css');
        }

}

function custom_general_context_page_reaction() {
  
}

/**
 * implements hook_form_alter
 * 
 * @global type $user
 * @param type $form
 * @param type $form_state
 * @param type $form_id
 * @return type
 */
function custom_general_form_alter(&$form, &$form_state, $form_id) {
    global $user;
    
    //og-group-ref not to be edited!
    if (!empty($form['og_group_ref'][LANGUAGE_NONE])) {
        $bugmenot_info = '<div class="messages warning alert alert-block alert-warning">' . t('This is only needed for debugging and not to be changed normally') . '</div>';
        $form['og_group_ref'][LANGUAGE_NONE][] = array('#markup' => $bugmenot_info, '#weight' => -10);
        //collapst group-ref-field
        $form['og_group_ref'][LANGUAGE_NONE]['#after_build'][] = '_custom_general_collapse_og_ref_field';
    }
    //collapst domain-ref-field
    if (!empty($form['og_domain_ref'][LANGUAGE_NONE])) {
        $form['og_domain_ref'][LANGUAGE_NONE]['#after_build'][] = '_custom_general_collapse_og_ref_field';
    }

    // inaccessbible for non-admins
  if (!in_array('administrator', array_values($user->roles))) {
    $form['#group_children']['biblio_fieldset']['#access'] = FALSE; 
  }
  
  
  if ($form_id != "book_admin_edit")
    return;
  
  $plugin = context_get_plugin('condition', 'custom_general_condition_section_content');
  if ($plugin) {

    $plugin->execute2();
  }
}


/**
 * BIBLIO alter form, fix step 2
 * after selecting a "Publication Type" in a panel
 * (/domain/add/%/biblio) the selection is not being saved
 * 
 * form functions are called twice in panels, so im trying to cache the form_state for 
 * the second execution
 * [todo] move to section_content
 */
function custom_general_form_biblio_node_form_alter(&$form, &$form_state, $form_id) {
  static $called = 0;

  //storing right values from first  call!
  if ($called == 0) {
    $called = 1;

    if (isset($_SESSION['onlinekurslabor']['biblio']['form_state_biblio_type'])) {
      $now = time();
      //unset session on new page call
      //dpm('call,now');
      //dpm($_SESSION['onlinekurslabor']['biblio']['timestamp']);
      //dpm($now);
      if ($now - $_SESSION['onlinekurslabor']['biblio']['timestamp'] > 2) {
        unset($_SESSION['onlinekurslabor']['biblio']);
      }
    }

    $node = isset($form['#noce']) ? $form['#node'] : null;
    $tid = !empty($form_state['biblio_type']) ? $form_state['biblio_type'] :
        ( isset($node->biblio_type) ? $node->biblio_type : 0);

    $step_two = !empty($tid);

    //dpm($step_two);
    if ($step_two) {
      $_SESSION['onlinekurslabor']['biblio']['form_state_biblio_type'] = $form_state;
      $_SESSION['onlinekurslabor']['biblio']['form'] = $form;
      $_SESSION['onlinekurslabor']['biblio']['timestamp'] = time('now');
      //dpm('time: ' . time('now'));
    }
  }

  //overriding strange values in every unnecessary additional call
  //coming from page/panels?! don't know.. quick fix
  if (isset($_SESSION['onlinekurslabor']['biblio']['form_state_biblio_type'])) {
    //dpm('setting form');
    $form_state = $_SESSION['onlinekurslabor']['biblio']['form_state_biblio_type'];
    $form = $_SESSION['onlinekurslabor']['biblio']['form'];
    //$form = drupal_get_form('form_biblio_node_form', $form_state);
    //unset($_SESSION['onlinekurslabor']['biblio']['form_state_biblio_type']);
  }
}


/**
 * Get the group id the node belongs to
 *
 * @param $referer_node
 * @param bool $enforce_parent do not return if content is a group itself. search for the parent group
 * @return mixed|null
 */

function _custom_general_get_group($referer_node, $enforce_parent = FALSE) {
  $domain_id = NULL;
  //passed value can be FALSE
  if (!isset($referer_node) || $referer_node === FALSE) {
    return $domain_id;
  }
  //annvid ist selbst eine group, deswegen muessen wir eine ebene hoeher gehen
  if($referer_node->type == ANNVID_CONTENTTYPE)
  {
      return  _custom_general_get_group(node_load($referer_node->og_group_ref[LANGUAGE_NONE][0]['target_id']), $enforce_parent);
  }
  //if referer is group -> nid == gid, else look up the gid
  if (og_is_group('node', $referer_node) && !$enforce_parent) {
    $domain_id = $referer_node->nid;
  }
  else {
    //forum special case
    if ($referer_node->type == NM_COURSE_FORUMTOPIC) {
      $tid = ($referer_node->taxonomy_forums[LANGUAGE_NONE][0]['tid']);
      $term = taxonomy_term_load($tid);
      $course_nid = $term->og_group_ref ? $term->og_group_ref[LANGUAGE_NONE][0]['target_id'] : NULL;

      $domain_id = $course_nid;
    }
    else {
      $entities = og_get_entity_groups('node', $referer_node->nid);
      if (!empty($entities)) {
        $domain_id = current(current($entities));
      }else {
        //root group
        $domain_id = $referer_node->nid;
      }
    }
  }


  return $domain_id;
}

//get breadcrumb items for domain by group id
/*
  function _section_content_get_domain_breadcrumb_items($group_get_id = NULL) {

  //get active group id, passed as get param
  $tmp_gid = isset($_GET['og_group_ref']) ? $_GET['og_group_ref'] : NULL;
  $group_get_id = isset($group_get_id) ? $group_get_id : $tmp_gid;


  if (!isset($group_get_id))
  return NULL;

  //build query items for breadcrumb items, to keep important get information in the url
  $item_options = array(
  'absolute' => TRUE,
  'query' => array(
  'og_group_ref' => $group_get_id,
  )
  );
  $node_overview = node_load(NM_DOMAIN_OVERVIEW_ID);
  $node_domain = node_load($group_get_id);

  $domain_overview_item = array(
  'title' => $node_overview->title,
  'href' => check_url(url('node/' . NM_DOMAIN_OVERVIEW_ID, $item_options)),
  'localized_options' => array(),
  );
  $active_domain_item = array(
  'title' => $node_domain->title,
  'href' => check_url(url('node/' . $group_get_id, $item_options)),
  'localized_options' => array(),
  );

  return array('domain_overview_item' => $domain_overview_item, 'active_domain_item' => $active_domain_item);
  }

 */

/**
 *  Implementation of hook_field_attach_form 
 */
/*
 * get og fields for file entities
 */

function _custom_general_get_file_og_fields($form, $form_state, $form_id) {
  $file = new stdClass();
  $file->type = 'video';

  $options = array(
    //specify the language, or use like this for the default language.
    'language' => field_valid_language(NULL),
    //IMPORTANT : the field you want to attach to the form
    'field_name' => 'og_group_ref'
  );

  $tmpform = array();
  $tmpform_state = array();

  field_attach_form('file', $file, $tmpform, $tmpform_state);
  $og_field = array('og_group_ref' => $tmpform['og_group_ref']);

  //add og_group_ref field to the upload form
  //$og_field = (array) _field_invoke_default('form', 'file', $file, $form, $form_state, $options);

  return $og_field;
}

/**
 * get referer nid in Mediabrowser
 * 
 */
function _media_browser_get_referer_nid() {
  $referer_args = array();

  $url_data = drupal_parse_url($_SERVER['HTTP_REFERER']);
  $referer_args['path'] = substr(parse_url($url_data['path'], PHP_URL_PATH), 1);
  //if no nid is set, a new node is being created, so we need the passed og_group_ref
  if (isset($url_data['query']['og_group_ref']) && is_numeric($url_data['query']['og_group_ref'])) {
    $referer_args['nid'] = $url_data['query']['og_group_ref'];
  }
  else {
    $referer_args['nid'] = arg(2, $referer_args['path']);
    $referer_args['nid'] = is_numeric($referer_args['nid']) ? $referer_args['nid'] : NULL;
  }

  return $referer_args['nid'];
}

function _custom_general_theme_tools_block($tool_links, $id = "", $class = "section_nav_tools", $col_group = 12) {

  //$output = '<div id="' . $id . '-container">';
  //$output = '<div id="' . $id . '-container" class="navbar">';
  //built up group arary
  $groups = array();
  foreach ($tool_links as $tl) {
    if (isset($tl['group']) && (isset($tl['group']['root']) && $tl['group']['root'])) {
      $groups[$tl['group']['gid']] = $tl['group'];
    }
  }

  $span_class = 'col-md-' . $col_group;

  //$output .= '<div class="navbar-inner">';
  $output = '<div id="' . $id . '-container" class="' . $class . ' row">';
  //$output .= '<div id="' . $id . '-icon"></div>';
  //$output .= '<ul id="' . $id . '" class="' . $class . ' nav">';


  $span_counter = 0;

  if (!empty($groups)) {
    foreach ($groups as &$group) {
      $group['items'][] = _section_courses_get_group_root($group, $tool_links);
      $sub_items = _section_courses_get_group_others($group, $tool_links);
      foreach ($sub_items as $su) {
        $group['items'][] = $su;
      }
    }
    unset($group);
  }

  //if group is set - assume that we want to have a vertical toolbar
  if (!empty($groups)) {
    foreach ($groups as $g) {
      $group_items = ($g['items']);
      $output .= '<div class="row">';
      $output .= '<div class="col-md-12">';
      $output .= '<ul>';
      $depth = 0;
      foreach ($group_items as $gi) {
        if ($depth > 0) {
          if (isset($gi['attributes']['class'])) {
            $gi['attributes']['class'][] = 'toolbar_hidden';
          }
          else {
            $gi['attributes']['class'] = array('toolbar_hidden');
          }
        }
        $attributes = "";
        if (isset($gi['attributes'])) {
          $attributes = drupal_attributes($gi['attributes']);
        }

        //$output .= '<li '.$attributes.'>' . $tl['link'] . '</li>';
        $output .= '<li ' . $attributes . '>' . $gi['link'] . '</button>';

        $depth++;
      }
      $output .= '</ul>';
      $output .= '</div>';
      $output .= '</div>';
    }
    //$output .= '</div>';
    //$output .= '</div>';
  }
  //no groups configured - render horizontal toolbar
  else {
    foreach ($tool_links as $tl) {

      $append = "";
      $prepend = "";

      if ($span_counter % ($col_group) == 0) {
        $prepend = '<ul class="' . $span_class . '">';
      }
      if ((($span_counter % $col_group) == $col_group - 1) || $span_counter == count($tool_links) - 1) {
        $append = '</ul>';
      }

      $output .= $prepend;
      $attributes = "";
      if (isset($tl['attributes'])) {
        $attributes = drupal_attributes($tl['attributes']);
      }

      if ($span_counter == 0) {
        $output .= '<div id="' . $id . '-icon"></div>';
      }
      //$output .= '<li '.$attributes.'>' . $tl['link'] . '</li>';
      $output .= '<li ' . $attributes . '>' . $tl['link'] . '</li>';

      $output .= $append;

      $span_counter++;
    }
  }

  //$output .= '</ul>';
  //$output .= '<div id="'.$id.'-toolbar"></div>';
  //
  //$output .= '</div>';
  //$output .= '</div>';
  $output .= '</div>';

  return $output;
}

function _section_courses_get_group_root($group, $tool_links) {
  foreach ($tool_links as $tl) {
    if (!empty($tl['group']) && (isset($tl['group']['root']) && $tl['group']['root']) && $tl['group']['gid'] == $group['gid']) {
      return $tl;
    }
  }
  return NULL;
}

function _section_courses_get_group_others($group, $tool_links) {
  $result = array();

  foreach ($tool_links as $tl) {
    if (!empty($tl['group']) && (!isset($tl['group']['root']) || !$tl['group']['root']) && $tl['group']['gid'] == $group['gid']) {
      $result[] = $tl;
    }
  }
  return $result;
}

/**
 * Implements hook_wysiwyg_plugin
 * @param type $editor
 * @param type $version
 * @return type
 */
function custom_general_wysiwyg_plugin($editor, $version) {

  #_linkit_add_settings($editor);


  switch ($editor) {
    case 'ckeditor':
      return array(
        'custom_general_plugin' => array(
          'path' => drupal_get_path('module', 'custom_general') . '/wysiwyg_plugin',
          'buttons' => array(
            'biblio_button' => t('Biblio'),
          ),
          'load' => TRUE,
        ),
      );
      break;
  }
}

/**
 * Implements hook_menu
 * 
 * @return array
 */
function custom_general_menu() {
$items['admin/onlinekurslabor/setting'] = array(
    'title' => 'Onlinekurslabor - Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_general_onlinekurslabor_admin_page'),
    'access callback' => 'custom_general_user_is_okl_admin',
    'access arguments' => array(array('administrator')),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function custom_general_onlinekurslabor_admin_page() {
    

    $setting_items = array();


    /*invoke hooks*/
    foreach (module_implements('onlinekurslabor_settingitems_alter') as $module) {
        $function = $module . '_onlinekurslabor_settingitems_alter';
        $function($setting_items);
    }

    $setting_items['okl_support_email'] = array(
        '#type' => 'textfield',
        '#title' => t('support team'),
        '#default_value' => variable_get('okl_support_email', NM_SUPPORT_EMAIL),
        '#description' => t("Email adress of the support team."),
        '#required' => TRUE,
    );
    return system_settings_form($setting_items);
}

function custom_general_menu_alter(&$items) {

  // Example - disable the page at node/add
  $items['node']['access callback'] = FALSE;
  $items['forum']['access callback'] = 'custom_general_user_is_okl_admin';
  $items['forum']['access arguments'] = array(array('administrator'));
  
  //also see custom_general_admin_menu_output_alter hook
  $items['admin_menu/toggle-modules']['access callback'] = FALSE;

}

/**
* Implements hook_admin_menu_output_alter().
*/
function custom_general_admin_menu_output_alter(&$content) {
	// remove the 'Disable developer modules' link
	unset($content['icon']['icon']['toggle-modules']);
}
    

function custom_general_preprocess_page(&$variables) {
  //include js needed for every page
  drupal_add_js(drupal_get_path('module', 'custom_general') . "/js/custom_general.js");
  drupal_add_js(drupal_get_path('module', 'custom_general') . "/js/jquery.knob.js");
  drupal_add_js(drupal_get_path('module', 'custom_general') . "/js/spin.js");

  drupal_add_library('system', 'ui.progressbar');

}

function custom_general_append_active_class($path, &$options) {
  // Append active class.
  if (($path == $_GET['q'] || ($path == '<front>' && drupal_is_front_page())) && (empty($options['language']) || $options['language']->language == $language_url->language)) {
    $options['attributes']['class'][] = 'active';
  }
}

/**
 * Implements hook_block_info().
 */
function custom_general_block_info() {
  $blocks = array();
  $blocks['custom_general_top_nav'] = array(
    'info' => t('Top navigation items'),
  );
  $blocks['custom_general_space'] = array(
    'info' => t('Custom General - Space'),
  );


  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function custom_general_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'custom_general_top_nav' :
      $block['content'] = _custom_general_theme_top_nav();
      break;
    case 'custom_general_space' :
      $block['content'] = _custom_general_theme_space();
      break;
  }

  return $block;
}

/**
 * Implements hook_field_default_fields_alter().
 *
 * Alter the default fields right before they are cached into the database.
 *
 * @param &$fields
 *   By reference. The fields that have been declared by another feature.
 */

/**
 * Implements hook_field_default_field_bases_alter().
 * note: Features hook
 *
 * Set default images here
 * Alter the default fields right before they are cached into the database.
 *
 * @param &$fields
 *   By reference. The fields that have been declared by another feature.
 */
/*
function custom_general_field_default_field_bases_alter(&$fields) {
  $source_dir = drupal_get_path('module', 'custom_general') . '/images/default_images';
  $field_default_images = array(
    // Field Base uses the field name
    'field_photo' => 'noprofile_default.jpg',
    'field_course_header' => 'course_header_default.jpg',
    'field_course_picture' => 'course_header_default.jpg',
  );
  foreach ($field_default_images as $field_name => $filename) {
    $source = $source_dir . '/' . $filename;
    $destination = 'default_images/' . $filename;
    if (isset($fields[$field_name])) {
      _custom_general_set_default_image($fields[$field_name], $filename, $source, $destination);
    }
  }
}*/

/**
 * Custom function to set the default image.
 * (It has an _ at the beginning to make sure it never accidentally gets fired as a hook)
 *
 * @param  array $field
 * @param  string $filename Filename of the source image.
 * @param  string $source Filepath of the source image.
 * @param  string $destination Filepath you want to save to.
 */
/*
function _custom_general_set_default_image(&$field, $filename, $source, $destination) {
  // See if a default image hasn't been set for this field yet
  //if (empty($field['settings']['default_image'])) {
  // Dynamically set the user default image on the field
  $destination = file_default_scheme() . '://' . $destination;
  // Check to see if it exists already
  $result = db_select('file_managed', 'f')
      ->fields('f', array('fid'))
      ->condition('f.uri', $destination)
      ->execute();
  $fid = $result->fetchField();
  // Simulate an upload of the default user image
  if (!$fid && file_exists($source)) {
    $file = new stdClass;
    $file->filename = $filename;
    $file->timestamp = REQUEST_TIME;
    $file->uri = $source;
    $file->filemime = file_get_mimetype($source);
    $file->uid = 1;
    $file->status = 1;
    $file = file_copy($file, 'public://default_images', FILE_EXISTS_REPLACE);

    if (!$file) {
      watchdog('custom general', 'Default image could not be set', null, WATCHDOG_ERROR);

      return;
    }


    $fid = $file->fid;
  }
  // field_config key no longer seems to exist.
  // $field['field_config']['settings']['default_image'] = (string) $fid;
  // Use this instead.
  $field['settings']['default_image'] = (string) $fid;
  //}
}*/

/**
 * fix realname
 * Implements hook_user_insert().
 */
/*
function custom_general_user_insert(&$edit, $account, $category) {
  //$account = user_load($account, TRUE);
  realname_update($account);
}*/


/**
 * Implementation of hook_mail_alter().
 * Here we allow the site name to be used as the senders name for outgoing email.
 * see http://drupal.org/node/209672
 */
function custom_general_mail_alter(&$message){
  $default_from = variable_get('site_mail', ini_get('sendmail_from'));

  if($message['from'] == $default_from){
    $default_from = 'onlinekurslabor@medienlabor-uni-augsburg.de';
    $message['headers']['Reply-To'] = '"'. variable_get('site_name', 'Drupal') .'" <'. $default_from .'>';
  }
  
  //empfänger
    $user_mail = $message['to'];
    $user_acc_to = user_load_by_mail($user_mail);
    if ($user_acc_to->status == 0) {
        drupal_set_message(t('@realname is blocked and thus will not receive an e-mail.', array('@realname' =>  format_username($user_acc_to))), 'warning');
        //  Prevent the mail from being sent
        $message['send'] = FALSE;
    }
}


/**
 * helper function for linkit autocomplete
 * checks if referer is one of context relevant nodes
 * todo project
 * @return bool
 */
function _custom_general_referer_node_add() {
  //check linkin ajax requests
  if (
    (arg(0) == 'admin' && strstr(arg(1), "_dashboard")) ||
    (arg(0) == 'section_content' && arg(1) == 'tasks' && arg(2) == 'autocomplete') ||
    (arg(0) == 'h5p_integration' && arg(1) == 'item' && arg(2) == 'autocomplete')
  ) {
    $referer_url = drupal_parse_url($_SERVER['HTTP_REFERER']);
    $referer_url['path'] = substr(parse_url($referer_url['path'], PHP_URL_PATH), 1);

    $referer_path = $referer_url['path'];
    if (arg(0, $referer_path) == 'node' &&
      arg(1, $referer_path) == 'add'
      && in_array(arg(2, $referer_path), array(
        "courses-course",
        "content-domain"
      ))
    ) {
      //FORCE no results
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * @param \QueryAlterableInterface $query
 */
function custom_general_query_alter(QueryAlterableInterface $query) {
  if ($query->hasTag('linkit_entity_autocomplete')) {

    //node add special case
    //adding domain, course

    //check linkin ajax requests
    //return empty list result, when adding course and domain. no context is set yet.
      //so no course/domain h5p and other content exist.
      if (_custom_general_referer_node_add()) {
        $query->condition("node.nid", "-1");
      }


    $domain = _section_content_get_active_domain(TRUE);
    $course = _section_courses_get_active_course(TRUE);



    $group = NULL;
    if ($domain) {
      $group = $domain;
    }
    else {
      if ($course) {
        $group = node_load(_section_courses_course_get_domain_id($course));
      }
    }

    if ($group) {
      //dpm((string) $query);
      $ogm_alias = $query->leftJoin('og_membership', 'ogm', 'ogm.etid = node.nid'); // AND ogm.tid = :entity_id
      $query->condition("$ogm_alias.gid", $group->nid); // AND ogm.tid = :entity_id
    }
  }

}


/**
 * node-delete-confirm
 * alter node deletion form
 */

function custom_general_form_node_delete_confirm_alter(&$form, &$form_state){
  $attachment_fields = array(
    'field_course_documents',
    'field_attachments',
    'field_nm_attachments',
  );

  $has_attachments = FALSE;
  $node = $form['#node'];
  $nid = $node->nid;

  $usage_titles = array(); 
  foreach ($attachment_fields as $field) {
    if (!empty($node->$field)) {
      $has_attachments = TRUE;
      $items = $node->{$field}[LANGUAGE_NONE];
      foreach ($items as $file) {
        $file = file_load($file['fid']);
       
        $usage_titles[] = $file->filename;
       
      }
    }
  }


  if($has_attachments){
    $form['#prefix'] = t('%node_title has file attachments which might get deleted from the platform totally.', array('%node_title'=> $node->title) ) ;
    $form['#prefix'] .= ' <br><br><ul><li>'.implode('</li><li>', $usage_titles);
    $form['#prefix'] .= "</li></ul><br/>";

    $form['actions']['submit']['#value'] =  t('Delete node and files');
    $form['actions']['submit']['#attributes'] = array('class' => array('btn','btn-danger'));
    $form['actions']['submit']['#weight'] = -11;

  }

}



/**
 * overriding file_entity_usage_page for our usage
 * respecting access
 * Page callback to show file usage information.
 */
function custom_general_file_entity_usage_page($file) {
  $rows = array();
  $occured_entities = array();

  foreach (file_usage_list($file) as $module => $usage) {
    $info = system_get_info('module', $module);

    // There are cases, where actual entitiy doesen't exist.
    // We have to handle this.
    foreach ($usage as $entity_type => $entity_ids) {
      $entity_info = entity_get_info($entity_type);
      $entities = empty($entity_info) ? NULL : entity_load($entity_type, array_keys($entity_ids));

      foreach ($entity_ids as $entity_id => $count) {
        // If some other module already added this entity just sum all counts.
        if (isset($occured_entities[$entity_type][$entity_id])) {
          $rows[$occured_entities[$entity_type][$entity_id]][2] += $count;
          continue;
        }

        //view - access check
        if(!entity_access('view', $entity_type, $entities[$entity_id])){
          $label = t("Access denied").". ".t("Please contact the site administrator.");
          $entity_uri = "";
        }else {
          $label = empty($entities[$entity_id]) ? $module : entity_label($entity_type, $entities[$entity_id]);
          $entity_uri = empty($entities[$entity_id]) ? NULL : entity_uri($entity_type, $entities[$entity_id]);
        }

        // Some entities do not have URL.
        if (empty($entity_uri)) {
          $rows[] = array(check_plain($label), $count);
        }
        else {
          $uri = $entity_uri['path'];
          $rows[] = array(l($label, $uri), $count);
        }

        $occured_entities[$entity_type][$entity_id] = count($rows) - 1;
      }
    }
  }
  $header[] = array(
    'data' => t('Used in'),
  );
  $header[] = array(
    'data' => t('Use count'),
  );
  $build['usage_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows
  );

  return $build;
}

/**
 *
 */
function custom_general_forum_set_breadcrumb(){


  $node = NULL;
  switch(arg(0)){
    case  'node':
      $nid = arg(1);
      $node = node_load($nid);
      if (!empty($node->taxonomy_forums)) {
        reset($node->taxonomy_forums);
        $langcode = key($node->taxonomy_forums);
        if (!empty($node->taxonomy_forums[$langcode])) {
          $fid = $node->taxonomy_forums[$langcode][0]['tid'];
        }
      }
      break;
    case  'forum':
      $fid = arg(1);
      break;
  }

  $term = taxonomy_term_load($fid);
  // Build Breadcrumbs
  $breadcrumb = array();
  //$breadcrumb[] = l('Forum', 'forum/178');
  //get forum parents
  $parents = taxonomy_get_parents_all($term->tid);

  //render as text not as link
  switch(arg(0)) {
    case  'node':
      $parent_last = (object)array('name' => $node->title);
      break;
    case  'forum':
      $parent_last = array_shift($parents);
      break;
  }

  while ($parent = array_pop($parents)) {
    $breadcrumb[] = l($parent->name, 'forum/' . $parent->tid);
  }


  $breadcrumb[] = $parent_last->name;

  // Set Breadcrumbs
  drupal_set_breadcrumb($breadcrumb);
}


/**
 * Implements hook_access().
 * from forum_access_query_term_access_alter
 *
 */

function custom_general_query_term_access_alter(QueryAlterableInterface $query) {
  global $user;

  // Read meta-data from query, if provided.
  if (!$account = $query->getMetaData('account')) {
    $account = $user;
  }
  if (!$op = $query->getMetaData('op')) {
    $op = 'view';
  }

  // If $account can bypass node access, or there are no node access
  // modules, we don't need to alter the query.
  if (user_access('bypass node access', $account) || @$user->term_access_bypass) {
    return;
  }

  // Prevent duplicate records.
  $query->distinct();

  // Find all instances of the {taxonomy_term_data} table being joined --
  // could appear more than once in the query, and could be aliased.
  // Join each one to the forum_access table.


  //19.02.2016 - 17:39 - SN
  //get forum terms the user may see
  $user_courses = _section_course_get_courses_by_uid($account->uid);
  $course_nids = array_map(function($o) { return $o->nid; }, $user_courses);
  if(empty($course_nids)) {
    $course_nids = array(-1);
  }


  $sub_query = db_select('og_membership', 'om')
    ->fields('om', array('etid', 'entity_type'))
    ->condition('om.type', 'og_membership_type_default')
    ->condition('om.entity_type', 'taxonomy_term')
    ->condition('om.state',OG_STATE_ACTIVE)
    ->condition('om.gid', $course_nids, 'IN');
  $results = $sub_query->execute()->fetchAll();


  $forum_term_ids = array_map(function($o) { return $o->etid; }, $results);
  if(empty($forum_term_ids)) {
    $forum_term_ids = array(-1);
  }

  //add global forum term ids for auth users
  if($user->uid > 0) {
    $forum_term_ids[] = variable_get('okl_global_forum_tid', NM_GLOBAL_FORUM_TID);
    $child_terms = _custom_general_taxonomy_get_children_all(variable_get('okl_global_forum_tid', NM_GLOBAL_FORUM_TID));
    $forum_term_ids = array_merge($forum_term_ids, $child_terms);

  }

  //Add course Parent Forum tid
  if($user->uid > 0) {
    $forum_term_ids[] = NM_GLOBAL_PARENT_FORUM_TID;
  }

  $tables = $query->getTables();
  foreach ($tables as $talias => $tableinfo) {
    $table = $tableinfo['table'];
    if (!($table instanceof SelectQueryInterface) && $table == 'taxonomy_term_data') {
      //restrict tid for Forum Vid only!
      $query->condition(db_or()->condition("$talias.vid", 2, '<>')->condition("$talias.tid", $forum_term_ids, 'IN'));
    }
  }

}


/**
 * get plane taxonomy children
 * userful to get all tids
 * @param $tid
 * @param int $vid
 * @param string $key
 * @return array
 */
function _custom_general_taxonomy_get_children_all($tid, $vid = 0){
  $c = _custom_general_taxonomy_get_children($tid, $vid);
  $result = array();
  foreach ($c as $d) {
    $result[] = $d;
    $below = array();
    $below = _custom_general_taxonomy_get_children_all($d, $vid);
    if (!empty($below)) {
      $result = array_merge($result, $below);
    }
  }
  return $result;
}


/**
 * avoid recursion. needed to remove the term access tag
 * sorry future me
 * @param $tid
 * @param int $vid
 * @return array
 */
function _custom_general_taxonomy_get_children($tid, $vid = 0) {
  $children = &drupal_static(__FUNCTION__, array());

  if ($tid && !isset($children[$tid])) {
    $query = db_select('taxonomy_term_data', 't');
    $query->join('taxonomy_term_hierarchy', 'h', 'h.tid = t.tid');
    $query->addField('t', 'tid');
    $query->condition('h.parent', $tid);
    if ($vid) {
      $query->condition('t.vid', $vid);
    }
    $query->orderBy('t.weight');
    $query->orderBy('t.name');
    $tids = $query->execute()->fetchCol();
    $children[$tid] = $tids;
  }

  return isset($children[$tid]) ? $children[$tid] : array();
}


/**
 * hook_theme um templates im Ordner templates des Moduls auszuliefern
 * wird genutzt, wenn bspw theme('custom_html5_video', array(...)); ausgeführt wird
 */
function custom_general_theme() {
    return array(
        // Name to be called with theme(). theme('custom_html5_video', ...)
        'custom_html5_video' => array(
            // Which .tpl.php file to use custom-html5-video.tpl.php
            'template' => 'custom-html5-video',
            'path' => drupal_get_path('module', 'custom_general') . '/templates')
        )
    ;
}

/**
 * Erstellt einen einfachen HTML-5-Videoplayer fuer verschiedene Bildschirmgrößen und unterschiedlichen 
 * Videoauflösungen
 * Die $video_base_url wird ergänzt um eine weitere Variante mit -sm-xs angehängt, aus imagefilm_onlinekurslabor.mp4 
 * wird also imagefilm_onlinekurslabor-sm-xs.mp4. Diese Datei muss natürlich unter der URL erreichbar sein.
 * Für mobil werden Dateigrößen < 99 MB empfohlen!
 * 
 * @param string $video_base_url URL zum Originalvideo für hohe Auflösungen wie Laptop, bspw http://.../imagefilm_onlinekurslabor.mp4
 * @param string $video_poster img-src-Pfad fuer Vorschaubild des Videos, bspw /sites/all/.../poster.png
 * @param string $other_formats liegen andere Varianten wie bspw. "webm" für das Video imagefilm_onlinekurslabor.mp4 vor, hier als Array angeben
 * @return string html5-markup-string
 */
function _custom_general_get_rendered_html5_video_tag($video_base_url, $video_poster, $other_formats = array("mp4")) {
    if (count($other_formats) > 1)
        drupal_set_message('Sorry, feature other_formats is not implemented. Do it on your own ;) ');

    $video_splitted = explode(".", $video_base_url);
    $video_filetype = array_pop($video_splitted);
    $video_base = implode(".", $video_splitted);
    //for $other_formats (like ogg, webm etc) you would implement a loop here
    //this only adds a smaller-size-identifier to the video_base_url
    $video_small = $video_base . "-sm-xs" . "." . $video_filetype;

    $video_def = array
        (
        array('bootstrap' =>
            array('class' => 'col-md-12', 'hidden_class' => 'hidden-xs hidden-sm'),
            'poster' => $video_poster,
            'videos' => array(array('url' => $video_base_url, "type" => "video/" . $video_filetype))),
        array('bootstrap' =>
            array('class' => 'col-xs-12', 'hidden_class' => 'hidden-md hidden-lg'),
            'poster' => $video_poster,
            'videos' => array(array('url' => $video_small, "type" => "video/" . $video_filetype))),
    );

    $output = theme('custom_html5_video', array('video_definition' => $video_def));
    return $output;
}



/**
 * Sucht in einem per  $books_menu_tree = menu_tree_all_data($books_menu_name); erhaltenen baum nach dem element mit der übergebenen mlid
 * @param array $menu_tree
 * @param int $mlid
 */
function _custom_general_get_menu_tree_entry_to_mlid($menu_tree, $mlid) {
 
    $found_entry = null;
    foreach ($menu_tree as $tree_branch) {
        //ok gleich am anfang gefunden
        if ($tree_branch['link']['mlid'] == $mlid) {
            $found_entry = $tree_branch;
        }
        //starte rekursion in "below"
        else {
            $found_entry = _custom_general_get_menu_tree_entry_to_mlid($tree_branch['below'], $mlid);
        }
        //abbruchbedingung der schleife
        if ($found_entry)
            break;
    }
    return $found_entry;
}

/**
 * Liefert aus einem  $books_menu_tree aus den elementen ['below'] den höchsten weight-wert.
 * @param array $tree
 * @return int $high
 */
function _custom_general_get_max_weight_in_book_tree($tree) {
    //default drupal min(weight)
    $high = -15;
    //gehe unter below alle eintraege durch und finde max(weight)
    if (!empty($tree['below'])) {
        foreach ($tree['below'] as $elem_below) {
            $high = max(array($high, (int) $elem_below['link']['weight']));
        }
    }
    return $high;
}

/**
 * og hook_og_membership_insert
 * used to clear cache of group a membership was inserted
 * @param OgMembership $og_membership
 */
function custom_general_og_membership_insert(OgMembership $og_membership) {
    //invalidate caches for affected group
    if ($og_membership->gid)
        og_invalidate_cache($og_membership->gid);
}


// fuegt im eigenen profil einen settings-bereich fuer eigene einstellungen hinzu, der einfach
// mit anderen modulen erweitert werden kann.
function custom_general_form_user_profile_form_alter(&$form, &$form_state, $form_id) {

  if ($form['#user_category'] == 'account') {
    
      $form['custom_general_fieldset'] = array(
        '#type' => 'fieldset',
        '#title' => t('Various settings'),
        '#weight' => 5,
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        //enable this placeholder in your own module! 
        '#access' => false,
          );
  }
}
/**
 * in custom_general_form_user_profile_form_alter wird ein settings-fieldset deklariert.
 * auf admin/config/people/accounts/fields kann man dieses beliebig verschieben und
 * die sortierung speichern.
 * @return array
 */
function custom_general_field_extra_fields() {
    $extras = array();
    $extras['user']['user'] = array(
        'form' => array(
            'custom_general_fieldset' => array(
                'label' => t('Various settings'),
                'description' => t('Placeholder for various custom settings'),
                'weight' => 5,
            ),
        ),
    );
    return $extras;
}




/**
 * Implements hook_filter_info().
 *
 */
function custom_general_filter_info() {
    $filters['filter_collapse'] = array(
        'title' => t('Content - Collapsible areas'),
        'description' => t('write [collapsible] to collapse text.'),
        'process callback' => '_custom_general_collapse_filter_process',
        'tips callback' => '_custom_general_collapse_filter_tips',
        'cache' => FALSE,
    );
    return $filters;
}

/**
 *   Filter  process callback.
 *   Content - look for [collapsible]...[/collapsible]
 * The actual filtering is performed here. The supplied text should be returned,
 * once any necessary substitutions have taken place.
 */
function _custom_general_collapse_filter_process($text, $filter, $format) {

    //[collapsible (options...)]ANYTHING[/collapsible]
    //ist zweiphasig. hier wird der komplette match rausgesucht und in der funktion dann der content zerbröselt.
    $regex = "/\[collapsible[a-zA-Z ]*\][^\[]*\[\/collapsible\]/";

    return preg_replace_callback($regex, '_custom_general_collapse_replacements', $text);
}


/**
 * Collapst aus Usability-Gründen ´das  og_domain_ref-/og-group-ref-field 
 * (vmtl aber universal und kann anders auch genutzt werden)
 * @param array $ref_field das field og_domain_ref oder og_group_ref
 * @return array $field das selbe field, aber collapsed
 */
function _custom_general_collapse_og_ref_field($ref_field) {
    $ref_field['#collapsible'] = TRUE;
    $ref_field['#collapsed'] = TRUE;
    $ref_field['#type'] = "fieldset";

    return $ref_field;
}
/**
 * entfernt matches auf [collapsible]elements
 * @see _custom_general_collapse_filter_process
 * @param type $matches
 * @return string
 */
function _custom_general_collapse_replacements($matches) {

    if (!empty($matches) && count($matches) == 1) {
        $collapse_text = $matches[0];

        $regex_heading = '/<h2>(.*)<\/h2>/';
        $heading_matches = array();
        preg_match($regex_heading, $collapse_text, $heading_matches);

        if (!empty($heading_matches)) {
            $heading_h2 = $heading_matches[0];
            $heading_text = $heading_matches[1];
        } else {
            drupal_set_message(t('The collapsible element @mismatch does not contain a heading and won\'t collapse.', array("@mismatch" => $matches[0])), 'warning');
            return $collapse_text;
        }


        $body = $collapse_text;
        //body: entferne überschrift.
        $body = str_replace($heading_h2, '', $body);
        //body: entferne überschrift und [collapsible], [/collapsible] anweisungen
        $body = preg_replace('/\[[\/]?collapsible[a-zA-Z ]*\]/', '', $body);

        $href_id = 'collapse_' . crc32($heading_text);

        $collapsible_element = array();
        $collapsible_element['#collapsible'] = true;
        //ist die option "collapsed" gesetzt?
        $collapsible_element['#collapsed'] = preg_match('/\[collapsible[a-zA-Z ]*collapsed[a-zA-Z ]*\]/', $collapse_text);
        $collapsible_element['#id'] = $href_id;
        $collapsible_element['#value'] = $body;
        $collapsible_element['#title'] = $heading_text;


        return ( theme('bootstrap_panel', array('element' => $collapsible_element)));
    }
}

/**
 * Filter tips callback for collapse filter.
 *
 * The tips callback allows filters to provide help text to users during the
 * content editing process. Short tips are provided on the content editing
 * screen, while long tips are provided on a separate linked page. Short tips
 * are optional, but long tips are highly recommended.
 */
function _custom_general_collapse_filter_tips($filter, $format, $long = FALSE) {

    return t('Pattern [collapsible]heading ... text... [/collapsible] is collapsible');
}


