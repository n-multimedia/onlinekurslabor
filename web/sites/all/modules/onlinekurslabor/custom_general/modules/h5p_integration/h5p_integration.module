<?php


/**
 * Implements hook_menu
 *
 * @return array
 */
function h5p_integration_menu() {
  $items = array();
  $items['h5p-export'] = array(
    'access callback' => '_h5p_integration_user_has_perm_on_exportfile',
    'access arguments' => array('download', 1), //check: may I download arg(1)
    'page callback' => '_h5p_integration_menu_download_h5p_export',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * needed in h5p_integration_menu: may I download the export-file?
 * @param type $access_type
 * @param type $filename
 * @return boolean
 */
function _h5p_integration_user_has_perm_on_exportfile($access_type, $filename) {
  //some drupal bug
  if (!$filename) {
    return false;
  }
  $permission_ok = false;
  $h5p_internal_id = _h5p_integration_extract_h5p_id_from_file_url($filename);

  if ($h5p_internal_id) {
    // Get the drupal nid for this $h5p_internal_nid
    $drupal_node = _h5p_integration_get_node_to_internal_h5p_id($h5p_internal_id);
    //NOT Found is handled later
    if (!$drupal_node) {
      return true;
    }
    //what we gonna do with the file?
    switch ($access_type) {
      case 'download':
        if (user_access('download all h5ps') || (node_access('update', $drupal_node) && (user_access('download own h5ps')))) {
          $permission_ok = true;
        }
        break;
    }
  }

  return $permission_ok;
}

/**
 * loads drupal-node-object of internal h5p-content-id
 * @param int $h5p_id internal h5p id
 * @return StdClass $node_object
 */
function _h5p_integration_get_node_to_internal_h5p_id($h5p_id) {
  $nid = db_query("SELECT nid FROM {h5p_nodes} WHERE content_id = :h5p_id", array(':h5p_id' => $h5p_id))->fetchField();
  return $nid ? node_load($nid) : null;
}

/**
 * extract ID from filename.
 * filename is sth like kap-1-1-tun-sommerschule-15205.h5p
 * Thus the h5p-ID is 15205
 * @param string $h5p_file_name the filename, like "kap-1-1-tun-sommerschule-15205.h5p"
 * @return int $h5p_internal_id
 */
function _h5p_integration_extract_h5p_id_from_file_url($h5p_file_name) {

  $matches = array();
  preg_match('/-(\d+)\.h5p/', $h5p_file_name, $matches);
  $h5p_internal_id = false;
  if (!empty($matches[1])) {
    $h5p_internal_id = $matches[1];
  }
  else {
    trigger_error("FILE URL $h5p_file_name has invalid format.");
  }
  return (int)$h5p_internal_id;
}

/**
 * downlaods the requested h5p-export-file
 * WARNING: NO permission-check. Check is done in _h5p_integration_user_has_perm_on_exportfile
 * @see h5p_integration_menu
 * @param String $filename like "my-great-h5p-23452.h5p"
 */
function _h5p_integration_menu_download_h5p_export($filename) {
  $h5p_internal_id = _h5p_integration_extract_h5p_id_from_file_url($filename);

  if ($h5p_internal_id) {
    // Get the drupal nid for this $h5p_internal_nid
    $drupal_node = _h5p_integration_get_node_to_internal_h5p_id($h5p_internal_id);
    //NOT Found handler if no corresponding node for perm-check.
    if (!$drupal_node) {
      return drupal_not_found();
    }


    $drupal_file_uri = 'public://h5p/exports/' . $filename;
    $full_file_path = drupal_realpath($drupal_file_uri);

    $http_headers = array(
      'Content-Type' => 'application/force-download',
      'Content-Disposition' => 'attachment; filename="' . $filename . '"',
      'Content-Length' => filesize($full_file_path),
    );
    file_transfer($drupal_file_uri, $http_headers);
  }
  return;
}

/**
 * Implements hook_wysiwyg_plugin
 * @param type $editor
 * @param type $version
 * @return type
 */
function h5p_integration_wysiwyg_plugin($editor, $version) {
#return false;
  //do not show H5P Plugin in Projects section
  if(section_projects_get_active_project()){
    return;
  }

  //_linkit_add_settings($editor);
  switch ($editor) {
    case 'ckeditor':
      /*wichtiger hinweis. beim entwickeln solcher plugins sind IDs extrem wichtig!
       Also Buttons in PHP und JS gleich benennen und auch der Modulname (hier der array-key)
       sollte wieder auftauchen.
       Ansonsten kommt es zu einem strangen is null js fehler*/
      return array(
        'h5p_integration' => array(
          'path' => drupal_get_path('module', 'h5p_integration') . '/wysiwyg_plugin',
          'buttons' => array(
            'h5p_button' => t('H5P Interactive Content'),
          ),
          'load' => TRUE,
        ),
      );
  }
}
 
/**
 *  FILTER
 */

/**
 * Implements hook_filter_info().
 *
 */
function h5p_integration_filter_info() {
  $filters['filter_content_h5p'] = array(
    'title' => t('Content - H5 Filter'),
    'description' => t('Every [h5p](node_id)[/h5p] pattern is being replaced by its content.'),
    'process callback' => '_h5p_integration_filter_h5p_process',
    'tips callback' => '_h5p_integration_filter_h5p_tips',
    'cache' => FALSE,
  );
  return $filters;
}

/**
 * Content - h5p Filter  process callback.
 *
 * The actual filtering is performed here. The supplied text should be returned,
 * once any necessary substitutions have taken place. The example just replaces
 * foo with our custom defined string in the settings page.
 */
function _h5p_integration_filter_h5p_process($text, $filter, $format) {
    $h5p_integration_replace_regex = '#\[h5p\]([0-9]+)(:*.*?)\[\/h5p\]#s';

    $replace_counter = 0;
    $text_after_replacement = preg_replace_callback($h5p_integration_replace_regex, '_h5p_integration_h5p_replacements', $text, -1, $replace_counter);
    //Zeige Warnmeldung im Lehrtext-Kontext an
    if ($replace_counter > 1 && _section_content_get_active_domain()) {
        drupal_set_message(t('There are multiple H5Ps embedded in this chapter. <ul><li>This can result in errors and a limited accessability on mobile devices.</li><li>Therefore this chapter should be split up in multiples.</li></ul>'), 'warning', false);
    }
    return $text_after_replacement;
}

function _h5p_integration_h5p_replacements($matches) {
  //preg_match($regex, $text, $matches);
  //$match = $matches[0];
  $text = "";

  if (!empty($matches) && count($matches) > 1) {

    $nid = $matches[1];
    $node = node_load($nid);

    if ($node != FALSE && node_access('view', $node) && $node->status) {

      //bei embed auch den view-mode anpassen
      $node_view = node_view($node, 'embed', NULL);

      //28.05.2013 - 12:22 - SN hack, title must be unset at another place (template)
      if (isset($node_view['#node']->title)) {
        $node_view['#node']->title = "";
      }
      //dpm($node_view);
      $node_output = drupal_render($node_view);
      //$text = preg_replace($regex, $node_output, $text);
      $text = '<div class="embeded_h5p">' . $node_output . '</div>';
    }
  }

  return $text;
}

/**
 * shows a warning to dozent / autor if inserted h5p-node is not visible for students
 * @param StdClass $h5p_node_object a h5p-node
 * @param StdClass $contend_node where the h5p is used, eg  lehrtext-kapitel
 */
function _h5p_integration_show_warning_if_h5p_not_accessible($h5p_node_object, $content_node) {
    //aktuell besuchter lehrtext: entweder group ref oder book-bid (bei der ersten seite v.a.)
    $current_domain_nid = @$content_node->og_group_ref[LANGUAGE_NONE][0]['target_id']? : @$content_node->book['bid'];
    $h5p_domain_nid = @$h5p_node_object->og_group_ref[LANGUAGE_NONE][0]['target_id'];

    //falls kontext einer group / lehrtext angehört und h5p einer group angehört
    if ($current_domain_nid && $h5p_domain_nid) {
        //check if h5p content is visible in active domain
        if (!og_is_member('node', $current_domain_nid, 'node', $h5p_node_object)) {
            //check if user may edit h5p and domain content node
            if (node_access('update', $h5p_node_object) && node_access('update', $content_node)) {
                drupal_set_message("Es wurde ein H5P Inhalt eingebettet, der nicht für dieses Thema freigeschaltet ist. " . l("Bitte schalten Sie diesen Inhalt hier frei.", 'domain/edit/' . $h5p_node_object->nid), 'warning');
            }
            //zeige warning nur fuer bearbeiter des contents. Normalen Nutzern bringt das nichts. 
            elseif (node_access('update', $content_node)) {
                drupal_set_message("Es wurde ein H5P Inhalt eingebettet, der nicht für dieses Thema freigeschaltet ist! Dieser ist für Kursteilnehmende nicht sichtbar. ", 'error');
            }
        }
    }
}

/**
 * hook_node_view um bei eingebetteten  h5p-elementen  eine warning einzublenden
 * @param type $node
 * @param type $view_mode
 * @param type $langcode
 */
function h5p_integration_node_view($node, $view_mode, $langcode) {

  $page_node = menu_get_object();
  if(empty($page_node))
    
      $page_node = node_load(arg(2)); 
  
  if (!empty($page_node) && $node->type == NM_INTERACTIVE_CONTENT &&  $node->nid != $page_node->nid) {
      _h5p_integration_show_warning_if_h5p_not_accessible($node, $page_node);
  }
}


/**
 * implements hook_form_alter hook_form_form_id_alter
 * hook fuer das h5p-content-formular
 * entfernt aktuellen lehrtext aus "zusätzlicher-lehrtext-feld" wegen field-bug
 */
function h5p_integration_form_h5p_content_node_form_alter(&$form, &$form_state, $form_id) {
    //siehe auch custom_general_form_alter

    //hole aktuelle lt-nid, falls per prefill gesetzt
    if(!empty($form['og_group_ref'][LANGUAGE_NONE][0]['default']['#default_value']))
    {
        $default_group = $form['og_group_ref'][LANGUAGE_NONE][0]['default']['#default_value'][0];
        //entferne aus zusätzlich-liste
        unset($form['og_domain_ref'][LANGUAGE_NONE][0]['default']['#options'][$default_group]);
        /*im grunde kann man nun auch noch das autocomplete-feld filtern. Hoff aber, admins sin nicht so doof.*/
        
        //verstecke download-embet-buttons-auswahl für < moderator
        if(!user_access('administer users')){
            $form['h5p_options']['#access'] = false;
        }
    }


    //verbiete Hochladen von .h5p-datei für non-admin
    global $user;
    if (!in_array(NM_ROLE_ADMIN, $user->roles)) {
        //der upload-form-bereich
        $form['h5p']['#access'] = false;
        //die option "upload" in buttonlist
        unset($form['h5p_type']['#options']['upload']);
    }
}

/**
 * Filter tips callback for foo filter.
 *
 * The tips callback allows filters to provide help text to users during the
 * content editing process. Short tips are provided on the content editing
 * screen, while long tips are provided on a separate linked page. Short tips
 * are optional, but long tips are highly recommended.
 */
function _h5p_integration_filter_h5p_tips($filter, $format, $long = FALSE) {

  return t('Every [h5p](node_id)[/h5p] pattern is being replaced by its content. Please embed only one H5P per page.');
}


/**
 * implements hook_h5p_filtered_params_alter
 * Problem: Innerhalb h5p können auch Links gesetzt werden (z.B. auf Kapitel), hier springen aber die
 * Drupal-Mechanismen nicht an. Deswegen werden vor Rendern des H5Ps Links mit den bestehenden Replacement-Methoden
 * umgeschrieben, so dass man keine festen Kurs-LT-Kombinationen hat.
 * @param type $filtered
 */
function h5p_integration_h5p_filtered_params_alter(&$filtered) {

    //api-doc: so kann man die timeline sperren.
    #$filtered->override->preventSkipping = true; 
    //kein interactive video - abbruch
    if (empty($filtered->interactiveVideo) || !property_exists($filtered->interactiveVideo->assets, 'interactions')) {
        return;
    }
    $url_object = null; 
    $all_interactions = $filtered->interactiveVideo->assets->interactions;

    foreach ($all_interactions as &$interaction) {
        //lösche variable
        $url_object = null; 

        //navigation hotspot
        if (!empty($interaction->action->params->destination->url)) {
            $url_object = &$interaction->action->params->destination->url;
        }
        //image with link
        elseif (!empty($interaction->goto->url)) {
            $url_object = &$interaction->goto->url;
        }
        //link
        elseif (!empty($interaction->action->params->linkWidget)) {
            $url_object = &$interaction->action->params->linkWidget;
        }
        

        if(is_object($url_object) && !empty($url_object->url))
        {
            $real_url = $url_object->protocol . $url_object->url;
            //konvertiere alt-urls in /node/nid
            //dpm("realurl vor filter : " . $real_url);
            $real_url = _section_content_filter_links_process($real_url, null, null);
            //dpm("realurl nach filter : " . $real_url);
            //entferne ersten /
            $real_url = trim($real_url, '/');
            //konvertiere node/nid in eigentliches ziel
            section_courses_url_outbound_alter($real_url, $options, $real_url);
            //dpm('das ist die neue realurl: ' . $real_url);

            //setze protocol und url im url_object
            //dafür aus neuer URL zunächst das scheme extrahieren
            $urls_http_scheme = parse_url($real_url, PHP_URL_SCHEME);
            if ($urls_http_scheme) {
                $real_scheme = $urls_http_scheme . '://';
                $url_object->url = str_replace($real_scheme, '', $real_url);
                $url_object->protocol = $real_scheme;

            }
            else {
                $url_object->url = $real_url;
                $url_object->protocol = '/';
            }
            
        //dpm("interaction neu:");
        //dpm($interaction);
            
        }

        
    }
}
