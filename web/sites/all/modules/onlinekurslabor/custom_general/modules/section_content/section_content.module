<?php

module_load_include('inc', 'custom_general', 'inc/bookchapter');
module_load_include('inc', 'section_content', 'inc/blocks');

/*
  BOOK - Chapters
 */

/**
 * Implements hook_block_info().
 */
function section_content_block_info() {
  $blocks = array();
  $blocks['content_node_tabs'] = array(
    'info' => t('Content - Node Tabs'),
  );
  $blocks['content_authors_tools'] = array(
    'info' => t('Content - Authors Tools'),
  );
  $blocks['content_node_revisions'] = array(
    'info' => t('Content - Node Revisions'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function section_content_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'content_node_tabs' :
      $block['content'] = _section_content_node_tabs_view();
      break;
    case 'content_authors_tools' :
      $block['content'] = _section_content_theme_authors_tools();
      break;
    case 'content_node_revisions' :
      $block['content'] = _section_content_theme_node_revisions();
      break;
  }


  return $block;
}


/**
 * Revisions Block.
 * 
 * Task: Mapping all actions of page domain/text/%/revisions/...
 * to the callbacks of the diff module
 * 
 * aim: embeding revision actions/views into domain context
 * 
 * @return type
 */
function _section_content_theme_node_revisions() {
  //disable in panel configuration
  if (arg(0) != 'admin' && arg(3) == 'revisions') {
    //case node/%/revisions
    module_load_include('inc', 'diff', 'diff.pages');
    
    $node = node_load(arg(2));
    switch (arg(4)) {
      case 'view':
        return drupal_render(diff_diffs_show($node, arg(5), arg(6)));
        break;
      default:
        return drupal_render(diff_diffs_overview($node));
    }
  }
}


/**
 * Implementation of hook_node_view().
 *
 * Dynamically modify book titles, adding numbering to the beginning.
 */
function section_content_node_view($node, $view_mode, $langcode) {
    /* Zeigt Verwendung: in Kursen... als Demo an */
    //Aktueller Node ist Themen-Ansicht, aber nicht innerhalb eines Kurses
    if (in_array($node->type, array(NM_CONTENT_DOMAIN)) && !_section_courses_get_active_course()) {

        $html_output__view_usage_in = "";
        //die zwei view-varianten: als kurs-lehrtext und als-demo-lehrtext
        $display_ids = array('usage_lehrtext', 'usage_demo_lehrtext');
        foreach ($display_ids as $display_id) {
            $view_usage_in = views_get_view('content_show_usage_in_courses');
            $view_usage_in->set_arguments(array($node->nid));
            //die panel-variante setzen
            $view_usage_in->set_display($display_id);
            //ausfuehren des views
            $view_usage_in->execute($display_id);
            //preview enables ajax-next-pager!!
            $view_usage_in->preview($display_id);
            //holt anzahl eintraege
            //gibts eintrÃ¤ge? dann diese anzeigen; sonst: 404
                $html_output__view_usage_in .= $view_usage_in->get_title() .( $view_usage_in->total_rows? $view_usage_in->render($display_id):"<br><i>&nbsp;&nbsp;- keine - </i><br>");
      
        }
      

        //Zeigt oberhalb des Inhaltsverzeichnis, in welchen Kursen dieser LT genutzt wird
        if ($html_output__view_usage_in) {
            $node->content['content_usage']['#markup'] = '<hr><h3>' . t('Verwendung in Kursen') . '</h3>' . $html_output__view_usage_in;
            $node->content['content_usage']['#weight'] = 50;
        }
    }

//test todo remove
//dpm(section_author($node->nid));
  if (in_array($node->type, array(NM_CONTENT_CHAPTER, NM_CONTENT_DOMAIN, ANNVID_CONTENTTYPE))) {
//disable book navigation
    //unset($node->content['book_navigation']);

    $has_children = FALSE;
    if (isset($node->book)) {
      $book_link = book_link_load($node->book['mlid']);
      $has_children = $book_link['has_children'];
    }


    if ($has_children) {
      $node->content['book_navigation']['#markup'] = '<hr><h3>Unterkapitel</h3>' . $node->content['book_navigation']['#markup'];
    }

    //TOC functionality. Numbering Chapters
    //check if numbering is enabled in domain settings
    if (_custom_general_toc_enabled($node->nid)) {
      $order_number = nm_bookchapters_get_chapter_numbering($node->nid);
      if (!empty($order_number)) {
        $new_title = $order_number . NM_CHAPTER_SEPARATOR . ' ' . $node->title;
        if (drupal_get_title() == $node->title) {
          drupal_set_title($new_title);
        }
        $node->title = $new_title;
      }
    }
  }
}

/**
 * Alter the menu tree and its configuration before the tree is rendered.
 *
 * This uses a hook from module menu_block
 * 
 * @param $tree
 *   An array containing the unrendered menu tree.
 * @param $config
 *   An array containing the configuration of the tree.
 */
function section_content_menu_block_tree_alter(&$tree, &$config) {

  static $processed_menues = array();

  if (in_array($config['menu_name'], $processed_menues)) {
    //already handled this tree
    return;
  }

  $processed_menues[$config['menu_name']] = $config['menu_name'];

  //TOC functionality. Numbering Chapters
  $top_leaf = current($tree);
  $top_leaf_link = $top_leaf['link']['link_path'];
  $node_id = substr($top_leaf_link, strpos($top_leaf_link, '/') + 1);
  if(!is_numeric($node_id))
    return;

  $node = node_load($node_id);
  


//Only apply when top_leaf is of type 'domain'
  if ($node->type == NM_CONTENT_DOMAIN) {
//TOC functionality. Numbering Chapters
//check if numbering is enabled in domain settings
    if (!_custom_general_toc_enabled($node->nid))
      return;

    $book_menus = array();
    $result = db_query("SELECT menu_name FROM {menu_links} WHERE module = 'book' GROUP BY menu_name");
    while ($menu_name = $result->fetchField()) {
      $book_menus[] = $menu_name;
    }

    if (!empty($tree) && in_array($config['menu_name'], $book_menus)) {
      $root_index = key($tree);
      if (!empty($tree[$root_index]['below'])) {
        foreach ($tree[$root_index]['below'] as $key => $value) {
          nm_bookchapters_rewrite_menu_link_title($tree[$root_index]['below'][$key]);
        }
      }
    }
  }
}

//toc - book navigation
function book_preprocess(&$variables, $hook) {

  if ($hook == 'book_navigation') {

    //TOC functionality. Numbering Chapters
    //check if numbering is enabled in domain settings
    if (!_custom_general_toc_enabled($variables['book_id']))
      return;


    $book_link = $variables['book_link'];

    $flat = book_get_flat_menu($book_link);

    // DO THE WHOLE TREE
    if ($book_link['has_children']) {
    // Walk through the array until we find the current page.
      do {
        $link = array_shift($flat);
      } while ($link && ($link['mlid'] != $book_link['mlid']));
      // Continue though the array and collect the links whose parent is this page.
      while (($link = array_shift($flat)) && $link['plid'] == $book_link['mlid']) {
        $numbering = nm_bookchapters_get_chapter_numbering_mlid($link['mlid']);

        if (!empty($numbering)) {
          $chapter_numbering = '<table><tr valign="top"><td><span class="badge">' . $numbering . '</span></td>';
          $title = $link['title'];
          //wrap title
          $title = '<td style="padding-left:5px;">' . $title . '</td></tr></table>';
          $link['link_title'] = $chapter_numbering . ' ' . $title;
          $link['title'] = $link['link_title'];
          $link['localized_options']['html'] = TRUE;
          $data['link'] = $link;
          $data['below'] = '';
          $children[] = $data;
        }
      }
    }

    if (isset($children)) {
      $elements = menu_tree_output($children);
      $variables['tree'] = drupal_render($elements);
    }

    // DO PREV
    if ($variables['prev_url']) {
      $prev = book_prev($book_link);
      $pnumbering = nm_bookchapters_get_chapter_numbering_mlid($prev['mlid']);
      if (!empty($pnumbering)) {

        $chapter_numbering = '<table><tr valign="top"><td><span class="badge">' . $pnumbering . '</span></td>';
        $title = $variables['prev_title'];
        //wrap title
        $title = '<td style="padding-left:5px;">' . $title . '</td></tr></table>';
        $variables['prev_title'] = $chapter_numbering . " " . $title;
      }
    }

    // DO NEXT
    if ($variables['next_url']) {
      $next = book_next($book_link);
      $nnumbering = nm_bookchapters_get_chapter_numbering_mlid($next['mlid']);

      if (!empty($nnumbering)) {
        $chapter_numbering = '<table><tr valign="top"><td><span class="badge">' . $nnumbering . '</span></td>';
        $title = $variables['next_title'];
        //wrap title
        $title = '<td style="padding-left:5px;">' . $title . '</td></tr></table>';
        $variables['next_title'] = $chapter_numbering . " " . $title;
      }
    }
  }
}

/**
 * Modify Book links
 *
 */
function section_content_node_view_alter(&$build) {
//disable book links
  if (isset($build['links']['book'])) {
    unset($build['links']['book']);
  }
}

/*
  Remove Outline Tabs from various sites.
 */
/*
  function section_content_preprocess(&$variables, $hook){

  return;
  } */

function section_content_preprocess_node(&$variables) {

  //04.06.2013 - 11:34 - SN testing todo
  if (in_array($variables['type'], array(NM_CONTENT_MULTIPLE_CHOICE, NM_CONTENT_QUESTION_AND_ANSWER, ANNVID_CONTENTTYPE))) {
    drupal_add_js(drupal_get_path('module', 'custom_general') . "/js/tasks.js");
  }
}

/*
 * alter links in forum section
 */

function section_content_url_outbound_alter(&$path, &$options, &$original_path) {

  $domain = _section_content_get_active_domain();

  if ($domain) {
    /*
     * 13.06.2013 - 15:12 - SN
     * unsauber . todo fix
     */
    /* replace links for book navigation and titles
     * [todo] Solution to avoid this overkill!
     *  Probably a performance killing thing....
     * 
     */
    if (strstr($path, "node/")) {
      $regex = '#^node/([0-9]+)$#s';
      preg_match($regex, $path, $matches);
      if (!empty($matches)) {
        $nid = $matches[1];
        //solution for biblio and course text needed
        $type = _custom_general_get_node_type($nid);

        if (in_array($type, array(NM_CONTENT_CHAPTER, NM_CONTENT_DOMAIN,  NM_CONTENT_MULTIPLE_CHOICE, NM_CONTENT_QUESTION_AND_ANSWER, NM_INTERACTIVE_CONTENT))) {
          $path = 'domain/text/' . $nid;
        }
        elseif(in_array($type, array( NM_BIBLIO)))
        {    
            $current_nid = arg(2);
            $current_node = node_load($current_nid);

            if(is_object($current_node) && !empty($current_node->book))
            {
                $curr_bookid  = $current_node->book['bid'];
                $path = 'domain/text/' .$curr_bookid.'/'. $nid;
            } 
        }
        $original_path = $path;
      }
    }

    if (strstr($path, "node/") && strstr($path, "/delete")) {
      $regex = '#^node/([0-9]+)/delete$#s';
      preg_match($regex, $path, $matches);
      if (!empty($matches)) {
        $tid = $matches[1];
        $path = "domain/delete/" . $tid;
      }
    }

    if (strstr($path, "node/") && strstr($path, "/edit")) {
      $regex = '#^node/([0-9]+)/edit$#s';
      preg_match($regex, $path, $matches);
      if (!empty($matches)) {
        $tid = $matches[1];
        $path = "domain/edit/" . $tid;
      }
    }
  }
}

/*
  BREADCRUMB
 */

//condition for context to be not set on domain overview page
function section_content_context_load_alter(&$context) {
//todo
  if ($context->name == "section_content_domain_blocks") {
//block should only be shown to subscribed users, so check for it
    $group = og_context();
    if (!$group && _section_domain_active($group)) {
//unset condition, so context gets active
      unset($context->conditions['context_og_condition_member_status']);
    }
  }
}

//  function section_content_menu_breadcrumb_alter(&$active_trail, $item) {
//
////Check if the proper context is set first:
////Abort if context is wrong
//    $context = context_get("context", "section_content");
//    if (empty($context))
//      return;
//
//    global $user;
//
//    $active_node = menu_get_object();
//    $active_node = !empty($active_node) ? $active_node : menu_get_object('file');
//    $type = isset($active_node) ? $active_node->type : NULL;
//    //adaption for every user
//    //set type to file, if file id (fid) is set
//    $entity_type = (isset($type) && !isset($active_node->fid)) ? 'node' : (isset($active_node->fid) ? 'file' : NULL);
//
//    //&& (in_array($type, array(NM_CONTENT_DOMAIN, NM_CONTENT_CHAPTER, NM_BIBLIO)) || $entity_type == 'file') // redundant
//    if (!empty($active_node)) {
//      //for every user
//      _section_content_breadcrumb_append_from_entity_data($entity_type, $active_trail, $active_node);
//    }
//    else {
//      //check if adaption any user role is necessary 
//      _section_content_alter_breadcrumb_for_role($active_trail);
//    }
//  }
//add domain overview as first breadcrumb item
//  function _section_content_breadcrumb_append_from_entity_data($entity_type, &$active_trail, $active_entity = NULL) {
//    global $user;
//
//    //adapt breadcrumb if content type domain or chapter are selected
//    $d_node = node_load(NM_DOMAIN_OVERVIEW_ID);
//
//    //when Biblio node is selected
//    //For authors and admins, breadcrumb leading to source domain
//    //todo: for students.. breadcrumb leading to their course
//    if (isset($active_entity) && (in_array($active_entity->type, array(NM_BIBLIO, NM_CONTENT_MULTIPLE_CHOICE, NM_CONTENT_QUESTION_AND_ANSWER)) || $entity_type == 'file') && isset($active_entity->og_group_ref)) {
//
//      $author_or_admin = in_array(NM_ROLE_AUTOR, $user->roles) || in_array(NM_ROLE_ADMIN, $user->roles);
//      if ($author_or_admin) {
//        $lang_og = field_language($entity_type, $active_entity, 'og_group_ref');
//
//        if (!empty($active_entity->og_group_ref)) {
//          $og_ref_val = $active_entity->og_group_ref[$lang_og][0]['target_id'];
//          $b_items = _section_content_get_domain_breadcrumb_items($og_ref_val);
//
//          $active_trail = array_merge(array($b_items['domain_overview_item']), array($b_items['active_domain_item'])/* , array_slice($active_trail, -1) */);
//        }
//      }
//    }
//    else {
//
//      $new_breadcrumb_item = array(
//        'title' => $d_node->title,
//        'href' => 'node/' . $d_node->nid,
//        'localized_options' => array(),
//      );
//
//      $active_trail = array_merge(/* array_slice($active_trail, 0, 1), */ array($new_breadcrumb_item), array_slice($active_trail, 1));
//    }
//  }



function _section_content_alter_breadcrumb_for_role(&$active_trail) {
  global $user;

//Check if user has role Autor or a certain path is being viewd (e.g. domain media)
  $path_match = strpos(request_uri(), NM_MEDIA_PATH);
  $path_match = strpos(request_uri(), NM_BIBLIO_PATH) || $path_match;
  $path_match = strpos(request_uri(), NM_TASKS_PATH) || $path_match;

  if ((in_array(NM_ROLE_AUTOR, $user->roles) || $path_match)) {

    $b_items = _section_content_get_domain_breadcrumb_items();

    if ($b_items) {
      $active_trail = array_merge(array($b_items['domain_overview_item']), array($b_items['active_domain_item'])/* , array_slice($active_trail, -1) */);
    }
  }
}

/**
 * Implementation of hook_form_alter().
 */

/**
 * Assign media files to domains
 * Automatically create a Book when creating a domain (Gebiet)
 */
function section_content_form_alter(&$form, &$form_state, $form_id) {

  global $user;
  static $form_og;

  //adapting redirects for section content


  /*
    if ($form_id == 'node_delete_confirm') {
    array_push($form['#submit'], 'section_content_node_form_delete_confirm_submit');
    }
   */


  if ($form_id == 'og_ui_confirm_subscribe' || $form_id == 'og_ui_confirm_unsubscribe') {
    array_push($form['#submit'], 'section_content_subscribe_submit');
  }


  if (stristr($form_id, '_node_form') && in_array($form['#node']->type, array(NM_CONTENT_DOMAIN, NM_BIBLIO, NM_CONTENT_CHAPTER, NM_CONTENT_QUESTION_AND_ANSWER, NM_CONTENT_MULTIPLE_CHOICE, ANNVID_CONTENTTYPE))) {
    $form['actions']['delete']['#submit'] = array('section_content_node_form_delete_submit');
    array_push($form['actions']['submit']['#submit'], '_section_content_node_form_submit');
  }

  
  //Assign files to active groups when uploaded
  //dependency: file entity, og, media
  if ($form_id == 'file_entity_add_upload' || $form_id == 'media_internet_add_upload' || $form_id == 'media_wysiwyg_format_form') {

    //Media Brower - Get Arguments from referer data, to assign file to a group 
    $referer_args['nid'] = _media_browser_get_referer_nid();
    $referer_args['node'] = isset($referer_args['nid']) ? node_load($referer_args['nid']) : NULL;
    $referer_args['gid'] = isset($referer_args['node']) ? _custom_general_get_group($referer_args['node']) : NULL;

    $options = drupal_parse_url($form['#action']);
    
    if (isset($form['og_group_ref']) && isset($options['query']['og_group_ref'])) {
      $form['og_group_ref'][LANGUAGE_NONE][0]['default']['#default_value']['value'] = $options['query']['og_group_ref'];
    }
    
    //25.02.2014 - 15:38 - SN
    //add additional group
    if(isset($form['#media'])) {
      unset($form['options']['fields']['og_group_ref']);
    }

    if (isset($referer_args['gid']) && is_numeric($referer_args['gid'])) {
      if (strpos('?', $form['#action']) >= 0) {
        $form['#action'] .= "&og_group_ref=" . $referer_args['gid'];
      }
      else {
        $form['#action'] .= "?og_group_ref=" . $referer_args['gid'];
      }
    }
  }

  /*
    //hack, og fields were not loaded for internet media in media browser
    if (!isset($form_og)) {
    $form_og = _custom_general_get_file_og_fields($form, $form_state, $form_id);
    }

    $form += $form_og;

    if (isset($referer_args['gid']) && is_numeric($referer_args['gid'])) {

    $file = new stdClass();
    $file->type = 'image';

    $lang_ref = field_language('file', $file, 'og_group_ref');


    $form['og_group_ref'][$lang_ref][0]['default']['#default_value']['value'] = $referer_args['gid'];

    //rearrange submit functions in order to prevent redirect
    $form['#submit'] = array_diff($form['#submit'], array('media_browser_form_submit'));
    $form['#submit'][] = 'file_entity_edit_submit';
    $form['#submit'][] = 'media_browser_form_submit';
    } */
  /**
   *  BOOK
   */
  //automatically create a Book when creating a domain (Lehrtext)
  if (!empty($form['#node_edit_form'])) {
    $node = $form['#node'];
    $type = $form['type']['#value'];
    // Not a book || not a domain => Nothing to do
    if (($type != NM_CONTENT_DOMAIN) || !isset($node->book)) {
      
    }
    else {
      $nid = empty($node->nid) ? 'new' : $node->nid;
      $form['book']['bid']['#default_value'] = $nid;
      //$form['book']['#type'] = 'hidden';
    }
  }
  //Only hide book options for users who dont have admin permission
  $hide_book_options = !user_access('bypass node access');

  //remove book settings from biblio content type for authors (Role Autor)
  if (!empty($form['#node_edit_form']) && $hide_book_options) {
    //should be easier
    //09.12.2015 - 18:09 - SN
    //outline should be shown for admins only!
    $form['book']['#type'] = 'hidden';

    /*$node = $form['#node'];
    $type = $form['type']['#value'];
    // Not a book || not a domain => Nothing to do
    if (($type != NM_BIBLIO) || !isset($node->book)) {

    }
    else {
      $form['book']['#type'] = 'hidden';
    }

    //hide book form options for certain content types
    if(!empty($form['#entity_type']) && $form['#entity_type'] == 'node') {
      if (!in_array($form['#bundle'], array(
        NM_CONTENT_CHAPTER,
        NM_CONTENT_DOMAIN,
        'book'
      ))
      ) {
        if (!empty($form['book']) && !user_access('administer nodes')) {
          hide($form['book']);
        }
      }
    }*/
  } 
  
      
  /*neu angelegte Buchkapiteln/annvid-kapiteln fehlt eine weight. Das fÃ¼hrt zu Falschsortierung/-nummerierung. Fixe.*/
    if (in_array($form_id ,array('annvid_node_form', 'content_chapter_node_form'))) {
        $parameters = drupal_get_query_parameters();
        $og_group_ref = @$parameters['og_group_ref'];
        $parent = @$parameters['parent'];
  
        //sollte zwar gesetzt sein, aber zur sicherheit..
        //hat die weight bestehender kapitel ueberschrieben. Darf nur auf neuen Kapiteln greifen (sprich: nid = null)!
        if ($og_group_ref && $parent && !isset($form['#node']->nid )) {
            //Suche buch zur Ã¼bergebenen Group
            $books_menu_name = 'book-toc-' . $og_group_ref;
            $books_menu_tree = menu_tree_all_data($books_menu_name);

            $found_element = _custom_general_get_menu_tree_entry_to_mlid($books_menu_tree, $parent);
            $maximum_weight = _custom_general_get_max_weight_in_book_tree($found_element);
            //hahaha. weight von 16 ergibt dann ne weight von -15 etc
            $form['book']['weight']['#default_value'] = min(15,$maximum_weight + 1);
        }
    }

    /*Feature Lehrtext deaktivieren + Link auf Lehrtext erstellen*/
  /*DAS gehÃ¶rt aber definitiv in section_courses!!!!!!*/
  if($form_id == 'courses_course_node_form'){
     $description ="<ul>";
    //add domain add link to
    $description .= "<li>".'Ein als Demo genutzter Lehrtext wird dadurch Ã¶ffentlich zugÃ¤nglich.'."</li>";
    $description .= "<li>".'Den Lehrtext komplett deaktivieren kÃ¶nnen Sie im Tab "Features".'."</li>";
    section_courses_instructors_tools_access();
    $description .= '<li>';
    if(node_access('create', NM_CONTENT_DOMAIN)){
      $description .= "<p>Falls Sie noch keinen Lehrtext zu Ihrem Kurs haben kÃ¶nnen Sie einen ".l('neuen Lehrtext erstellen', 'node/add/content-domain', array('attributes'=>array('target'=>'_blank'))).".</p>";
    }else {
      $description .= "<p>Falls Sie keinen Lehrtext zur Auswahl haben, kontaktieren Sie unseren Support. Dieser kann Ihnen die benÃ¶tigten Rechte freischalten.</p>";
      $description .= l('Kontakt', 'kontakt', array('attributes'=>array('target'=>'_blank')));
    }
    $description .= '</li></ul>';

    $form['field_domain_demo_ref']['#suffix'] = $description;
  }

      
  return $form;
}


/*
  function section_content_node_form_delete_confirm_submit($form, &$form_state) {

  //get domain the deleted node belongt to
  //redirect to root book page
  $form_state['redirect'] = NM_CONTENT_DOMAIN_PATH . '/text/' . $domain->nid;
  } */

function section_content_node_form_delete_submit($form, &$form_state) {

  $group_nid = _custom_general_get_group($form_state['node']);
  $group = node_load($group_nid);

  if ($group->type == NM_CONTENT_DOMAIN) {

    $form_state['redirect'] = array(
      NM_CONTENT_DELETE_CONTENT_PATH . '/' . $form_state['node']->nid,
      array(
        'query' => array(
          'destination' => NM_CONTENT_TEXT_PATH . '/' . $group->nid,
        ),
      )
        ,
    );
  }
}

function section_content_subscribe_submit($form, &$form_state) {

  //todo fix - ugly
  //$form_state['redirect'] = 'domains';
}

/**
 * custom submit-handling for redirecting
 * @param type $form
 * @param type $form_state
 */
function _section_content_node_form_submit($form, &$form_state) {

    if (arg(0) == 'domain' && (arg(1) == 'edit' || arg(1) == 'add') && is_numeric(arg(2))) {
        //if (1)+(2) Sonderbehandlung Biblio
        //biblio angelegt: gehe auf return_to parameter ...
        if (arg(1) == 'add' && arg(3) === 'biblio') {
            //ErgÃ¤nzung zur "node-created"-Message
            drupal_set_message(t('You can reference this biblio-entry now.'));
            //erst: return-to, dann arg(2) = Lehrtext
            $return_to = drupal_get_query_parameters()['return_to']? : arg(2);
            $form_state['redirect'] = NM_CONTENT_TEXT_PATH . '/' . $return_to;
        }//edit eines biblio-entries 
        elseif (arg(1) == 'edit' && is_numeric(arg(2)) && $form_state['node']->type === NM_BIBLIO) {
            $lehrtext_param = drupal_get_query_parameters()['og_group_ref'] ? drupal_get_query_parameters()['og_group_ref'] . '/' : '';
            $form_state['redirect'] = NM_CONTENT_TEXT_PATH . '/' . $lehrtext_param . $form_state['node']->nid;
        } else
            $form_state['redirect'] = NM_CONTENT_TEXT_PATH . '/' . $form_state['node']->nid;
    }
}

/*
  M E D I A    -   S T A R T
 */


/*
 *  Disable Domainoverview browsertab for non chapter or domain contenttypes
 */

function section_content_media_browser_plugins_alter(&$info) {
  if (isset($info['domain_media--media_browser_1'])) {
    $node = node_load(_media_browser_get_referer_nid());

    if (empty($node) || !in_array($node->type, array(NM_CONTENT_DOMAIN, NM_CONTENT_CHAPTER))) {
      unset($info['domain_media--media_browser_1']);
    }
  }
}

/**
 * pass argument (node's group id) to media browser
 *
 */
function section_content_views_pre_build(&$view) {

  if ($view->name == NM_VIEW_DOMAIN_MEDIA && $view->current_display == 'media_browser_1') {
    $referer_nid = _media_browser_get_referer_nid();
    $referer_node = node_load($referer_nid);

    $domain_id = _custom_general_get_group($referer_node);
    if (isset($domain_id))
      $view->set_arguments(array($domain_id));
  }
}

/*
  M E D I A    -   E N D
 */

/**
 * Implements hook_og_user_access_alter().
 *
 * 
 * Permit group-subscription for content type domain (Gebiet) for all roles other than "Autor" and "administrator"
 * 
 */
function section_content_og_user_access_alter(&$perm, $context) {
  global $user;
  if(!empty($context['account']))
      $account = $context['account'];
  else 
      $account = clone $user; 

  $group_type = $context['group_type'];
  $group = $context['group'];



  if ($group_type == 'node' && $group->type == NM_CONTENT_DOMAIN) {

    $access_perm = in_array(NM_ROLE_AUTOR, $account->roles) || in_array(NM_ROLE_ADMIN, $account->roles);
//var_dump($access_perm);
//if(isset($perm["subscribe without approval"]) && !$access_perm)

    if (isset($perm["subscribe"]) && !$access_perm) {
      //$perm["subscribe without approval"] = FALSE;
      $perm["subscribe"] = FALSE;
    }
    else {
      $perm["subscribe without approval"] = TRUE;
    }
  }

  return;
}

/**
 * Implements hook_wysiwyg_plugin
 * @param type $editor
 * @param type $version
 * @return type
 */
function section_content_wysiwyg_plugin($editor, $version) {


  //do not show TASKS Plugin in Projects section
  if(section_projects_get_active_project()){
    return;
  }


  switch ($editor) {
    case 'ckeditor':
      return array(
        'section_content_task_plugin' => array(
          'path' => drupal_get_path('module', 'section_content') . '/wysiwyg_plugin',
          'buttons' => array(
            'tasks_button' => t('Tasks'),
          ),
          'load' => TRUE,
        ),
      );
      
  }
}


/**
 *  FILTER
 */

/**
 * Implements hook_filter_info().
 *
 */
function section_content_filter_info() {
  $filters['filter_content_tasks'] = array(
    'title' => t('Content - Tasks Filter'),
    'description' => t('Every [task](node_id)[/task] pattern is being replaced by its content.'),
    'process callback' => '_section_content_filter_tasks_process',
    'tips callback' => '_section_content_filter_tasks_tips',
    'cache' => FALSE,
  );
    $filters['fix_content_links'] = array(
    'title' => t('Content - Link Filter (change to /node/...)'),
    'description' => t('changes internal URLs to /node/%nid to avoid 403s.'),
    'process callback' => '_section_content_filter_links_process',
    //'tips callback' => '_section_content_filter_links_tips',
    'cache' => FALSE,
  );
  return $filters;
}

/**
 * Content - Tasks Filter  process callback.
 *
 * The actual filtering is performed here. The supplied text should be returned,
 * once any necessary substitutions have taken place. The example just replaces
 * foo with our custom defined string in the settings page.
 */
function _section_content_filter_tasks_process($text, $filter, $format) {
  //$replacement = isset($filter->settings['filter_example_foo']) ? $filter->settings['filter_example_foo'] : 'bar';
  //return str_replace('foo', $replacement, $text);
  $regex = '#\[task\]([0-9]+)(:*.*?)\[\/task\]#s';

  return preg_replace_callback($regex, '_section_content_task_replacements', $text);
}



/**
 * Content - Filter links
 *
 * The actual filtering is performed here. The supplied text should be returned,
 * once any necessary substitutions have taken place. The example just replaces
 * foo with our custom defined string in the settings page.
 */
function _section_content_filter_links_process($text, $filter, $format){

    // 1) entfernt Verweis auf eigenen Server
    global $base_url;
    $url_without_http = str_replace("http://", "", $base_url);
    $url_without_http = str_replace("https://", "", $url_without_http);
    $regex_domain = '#((http:\/\/|https:\/\/)' . $url_without_http . ')#s';
    $text_without_domain = preg_replace($regex_domain, "", $text);

    //2) ersetzt angaben wie course/text/1234/567 sowie domain/text/567 durch /node/567
    $regex_text = '#(\/domain\/text|\/course\/text\/\d+)\/(\d+)#s';
    return $text_new = preg_replace($regex_text, "/node/$2", $text_without_domain);
}


function _section_content_task_replacements($matches) {
  //preg_match($regex, $text, $matches);
  //$match = $matches[0];
  $text = "";

  if (!empty($matches) && count($matches) > 1) {

    $nid = $matches[1];
    $node = node_load($nid);

    if ($node != FALSE && node_access('view', $node) && $node->status) {
      $node_view = node_view($node, 'task', NULL);

      //28.05.2013 - 12:22 - SN hack, title must be unset at another place (template)
      if (isset($node_view['#node']->title)) {
        $node_view['#node']->title = "";
      }
      //dpm($node_view);
      $node_output = drupal_render($node_view);
      //$text = preg_replace($regex, $node_output, $text);
      $text = '<div class="embeded_task">' . $node_output . '</div>';
    }
  }

  return $text;
}

/**
 * Filter tips callback for foo filter.
 *
 * The tips callback allows filters to provide help text to users during the
 * content editing process. Short tips are provided on the content editing
 * screen, while long tips are provided on a separate linked page. Short tips
 * are optional, but long tips are highly recommended.
 */
function _section_content_filter_tasks_tips($filter, $format, $long = FALSE) {

  return t('Every [task](node_id)[/task] pattern is being replaced by its content.');
}

function _section_content_multiple_choice_form() {
  $form['description'] = array(
    '#type' => 'item',
    '#title' => t('Form example wich is going to be replaced by multiple choice logics'),
  );

  $form['test'] = array(
    '#type' => 'textfield',
    '#title' => t('Test'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Test',
  );
  return $form;
}

/**
 * Implements hook_field_formatter_info().
 */
function section_content_field_formatter_info() {
  return array(
    'double_field_mc_answers' => array(
      'label' => t('Multiple Choice'),
      'field types' => array('double_field'),
    ),
    'section_content_formatter_video' => array(
      'label' => t('okl Video'),
      'description' => t('Render the file using an HTML5 video tag and additional parameters.'),
      'field types' => array('file'),
      'settings' => array(
        'controls' => TRUE,
        'autoplay' => FALSE,
        'loop' => FALSE,
        'muted' => FALSE,
        'width' => NULL,
        'height' => NULL,
        'multiple_file_behavior' => 'tags',
        'classes' => array(),
      ),
      'file formatter' => array(
        'mime types' => array('video/*'),
      ),
    )
  );
}

function section_content_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  if (!$items) {
    return;
  }

  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'double_field_mc_answers':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#display' => $display,
          '#item' => $item,
          '#theme' => 'multiple_choice_field',
        );
      }
      break;
    case 'section_content_formatter_video':
      // Use the media_thumbnail image style so that the output in media browser
      // is consistent.
      $multiple_file_behavior = $settings['multiple_file_behavior'];

      // Prevent 'empty' fields from causing a WSOD.
      $items = array_filter($items);

      // Build an array of sources for each <video> element.
      $source_lists = array();
      if ($multiple_file_behavior == 'tags') {
        foreach ($items as $delta => $item) {
          if ($item['type'] == 'video') {
            $source_lists[] = array($item);
          }
        }
      }
      else {
        foreach ($items as $delta => $item) {
          if ($item['type'] == 'video') {
            $source_lists[0][] = $item;
          }
        }
      }

      // Render each source list as an <video> element.
      foreach ($source_lists as $delta => $sources) {
        $width = $settings['width'];
        $height = $settings['height'];
        $element[$delta] = array(
          '#theme' => 'section_content_formatter_video',
          '#files' => $sources,
          '#controls' => $settings['controls'],
          '#autoplay' => $settings['autoplay'],
          '#loop' => $settings['loop'],
          '#muted' => $settings['muted'],
          '#width' => $width,
          '#height' => $height,
          '#classes' => $settings['classes'],
        );
      }

  }

  return $element;
}

/**
 * Implements hook_preprocess_field().
 */
function section_content_preprocess_field(&$vars) {
  if ($vars['element']['#field_name'] == 'field_answer' && $vars['element']['#bundle'] == 'content_multiple_choice') {
    $vars['theme_hook_suggestions'][] = 'multiple_choice_field_group';
  }
  else
  if ($vars['element']['#field_name'] == 'field_qaa_answer' && $vars['element']['#bundle'] == 'content_question_and_answer') {
    $vars['theme_hook_suggestions'][] = 'question_and_answer_field';        
  }
}

/**
 * Implements theme_multiple_choice_field().
 */
function theme_multiple_choice_field($vars) {
  $element = $vars['element'];
  //$settings = $element['#display']['settings'];

  $uniqueid = uniqid();

  $cb = array(
    '#type' => 'checkbox',
    '#suffix' => '<label for="' . $uniqueid . '">' . $element['#item']['second'] . '</label>',
    '#default_value' => FALSE,
    '#attributes' => array('id' => array($uniqueid)),
  );

  $class = 'container-inline';
  $output = '<div class="' . $class . '">';
  $output .= '<div class="double-field-first-sectond">' . drupal_render($cb) . '</div>';
//$output .= '<div class="double-field-second"> ' . $element['#item']['second'] . '</div>';
  $output .= '</div>';

  return $output;
}

/**
 * Implements hook_theme().
 */
function section_content_theme() {
  return array(
    'multiple_choice_field' => array('render element' => 'element'),
    'multiple_choice_field_group' => array('render element' => 'element'),
    'question_and_answer_field' => array('render element' => 'element'),
    'section_content_formatter_video' => array(
      'variables' => array(
        'files' => array(),
        'controls' => TRUE,
        'autoplay' => FALSE,
        'loop' => FALSE,
        'muted' => FALSE,
        'width' => NULL,
        'height' => NULL,
        'classes' => NULL
      )
    ),
  );
}

/**
 * Replaces theme_field() for removing all markup around single-item fields.
 */
function theme_multiple_choice_field_group($vars) {

  //$output = drupal_render($vars['items']);
  $form = drupal_get_form('section_content_mc_form', $vars);
  $output = drupal_render($form);

  return $output;
}

/**
 * 
 */
function theme_question_and_answer_field($vars) {

  $output = '<div class="qaa_solution_button field-label"><button class="btn btn-default">LÃ¶sung</button></div>';
  $output .= '<div class="solution" style="display:none;">';
  $output .= drupal_render($vars['items']);
  $output .= '</div>';
  //$output = drupal_get_form('section_content_mc_form', $vars);
  //$output = drupal_render($output);

  return $output;
}

function section_content_mc_form($form, $form_state, $vars = NULL) {

  $form = array();

  $form['mc_prefix'] = array(
    '#markup' => '<div id="mc_form">',
  );

  if (!empty($vars)) {
    foreach ($vars['items'] as $delta => $question) {
      $uniqueid = uniqid();
      $form['question_' . $delta] = array(
        '#type' => 'checkbox',
        '#prefix' => '<div>',
        '#suffix' => '<label for="' . $uniqueid . '">' . $question['#item']['second'] . '</label></div>',
        '#default_value' => FALSE,
        '#attributes' => array('id' => array($uniqueid)),
      );
    }
  }

  //$mc_node = menu_get_object();

  $form['mc_id'] = array(
    '#type' => 'hidden',
    '#value' => check_plain($vars['element']['#object']->nid),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Eingabe',
    //'#attributes' => array('class' => array('btn')),
    '#ajax' => array(
      'callback' => 'section_content_mc_submit_form',
      'wrapper' => 'mc_form',
      'effect' => 'fade',
    ),
  );

  $form['suffix'] = array(
    '#markup' => '</div>',
  );

  return $form;
}

function section_content_mc_submit_form($form, $form_state) {

  $mc_node = node_load($form_state['values']['mc_id']);
  $right = section_content_mc_check_correctness($mc_node, $form_state['values']);

  //solution / explanation
  $lang = field_language('node', $mc_node, 'field_mc_solution');
  $output_solution = drupal_render(field_view_field('node', $mc_node, 'field_mc_solution'));

  //$output .= $tmp['value'];
  //04.06.2013 - 23:56 - SN
  //todo Save intput - user and course contexed!
  if ($right) {
    $output = "Richtig!";
    $output .= $output_solution;
    return $output;
  }
  else {
    $output = "Die LÃ¶sung war leider falsch.";
    $output .= $output_solution;
    return $output;
  }
}

function section_content_mc_check_correctness($mc_node, $items) {
  $answers = array_search_i("question", $items);
  $lang = field_language('node', $mc_node, 'field_answer');

  foreach ($mc_node->field_answer[$lang] as $key => $val) {
    //return false if at least one answer is wrong

    if ($val['first'] == NULL)
      $val['first'] = 0;
    if ($val['first'] != current($answers[$key])) {
      return FALSE;
    }
  }
  return TRUE;
}

function array_search_i($str, $array) {
  $result = array();
  foreach ($array as $key => $value) {
    if (stristr($key, $str))
      $result[] = array($key => $value);
  }
  return $result;
}

function section_content_text_outline() {
  $active_domain = _section_content_get_active_domain();


  if (!$active_domain)
    return;
  $domain_ref = $active_domain->nid;

  $menu_name = 'book-toc-' . $domain_ref;
  $tree = menu_tree_all_data($menu_name);

// And add the active trail data back to the full tree.
//menu_tree_add_active_path($tree);

  $config = array();
  $config['title_link'] = "test";
  $config['delta'] = "0";
  $config['menu_name'] = $menu_name;
  $config['title_link'] = '';
  $config['parent_mlid'] = 0;
  $config['level'] = 1;

  _section_content_text_outline_add_active_path($tree);

// Allow alteration of the tree and config before we begin operations on it.
  drupal_alter('menu_block_tree', $tree, $config);


// Prune the tree along the active trail to the specified level.
  if ($config['level'] > 1 || $config['parent_mlid']) {
    if ($config['parent_mlid']) {
      $parent_item = menu_link_load($config['parent_mlid']);
      menu_tree_prune_tree($tree, $config['level'], $parent_item);
    }
    else {
      menu_tree_prune_tree($tree, $config['level']);
    }
  }

// Render the tree.
  $data = array();
  $title = menu_block_get_title($config['title_link'], $config);
  //$data['subject_array'] = $title;
  $data['subject'] = drupal_render($title);
  $data['content']['#content'] = menu_block_tree_output($tree, $config);
  if (!empty($data['content']['#content'])) {
    $data['content']['#theme'] = array(
      'menu_block_wrapper__' . str_replace('-', '_', $config['delta']),
      'menu_block_wrapper__' . str_replace('-', '_', $config['menu_name']),
      'menu_block_wrapper'
    );
    $data['content']['#config'] = $config;
    $data['content']['#delta'] = $config['delta'];
  }
  else {
    $data['content'] = '';
  }

  $output = drupal_render($data);


  //$output = '<div><h5><u>' . l($active_domain->title, 'domain/text/' . $active_domain->nid) . '</u></h5></div>' . $output;

  //Outline retraction by domain setting
  if(_custom_general_outline_retraction_enabled($domain_ref)) {
    drupal_add_js(drupal_get_path('module', 'section_content') . "/js/section_content.js");
    drupal_add_js(drupal_get_path('module', 'section_content') . "/js/bootstrap-treeview.min.js");
    drupal_add_css(drupal_get_path('module', 'section_content') . "/css/bootstrap-treeview.min.css");
    drupal_add_css(drupal_get_path('module', 'section_content') . "/css/nm-bootstrap-treeview.css");
  }


  return $output;
}

/**
 * Determins which domain is being active/selected
 * 
 * @return active domain object or FALSE
 */
function _section_content_get_active_domain($reset = FALSE) {
  static $domain;

  $context = context_get("context", "section_content");

  if (empty($context)) {
    return FALSE;
  }

  if (!isset($domain) || $reset) {
    //proove if user is in course section
    //not prooving causes an infinite loop here (menu_get_object(); on /comment/%/edit)
    $node = NULL;

    $node = menu_get_object();

    if ($node) {
      $domain = $node;
    }

    if (is_object($node) && in_array($node->type, array(NM_FILE, NM_CONTENT_CHAPTER, NM_CONTENT_MULTIPLE_CHOICE, NM_CONTENT_MULTIPLE_CHOICE, NM_CONTENT_DOMAIN, ANNVID_CONTENTTYPE))) {
      if ($node->type == NM_CONTENT_DOMAIN) {
        //get course which this group is assigned to
        if (isset($node->og_group_ref)) {
          //$lang_og = field_language('node', $node, 'og_group_ref');
          $group_tmp = node_load($node->og_group_ref[LANGUAGE_NONE][0]['target_id']);
          $domain = node_load(_custom_general_get_group($group_tmp, TRUE));
        }
      }
      else {
        $domain = node_load(_custom_general_get_group($node, TRUE));
      }
    }
    if (!isset($domain)) {
      $c_nid = check_plain(arg(2));
      $domain_tmp = is_numeric($c_nid) ? node_load($c_nid) : NULL;

      //arg 2 may be a chapter
      $domain = node_load(_custom_general_get_group($domain_tmp, TRUE));

    }

    //check linkin ajax requests
    if (
      (arg(0) == 'admin' && strstr(arg(1), "_dashboard")) ||
      (arg(0) == 'section_content' && arg(1) == 'tasks' && arg(2) == 'autocomplete') ||
      (arg(0) == 'h5p_integration' && arg(1) == 'item' && arg(2) == 'autocomplete')
    ) {
      $referer_url = drupal_parse_url($_SERVER['HTTP_REFERER']);
      $referer_url['path'] = substr(parse_url($referer_url['path'], PHP_URL_PATH), 1);

      //add and edit
      if (arg(0, $referer_url['path']) == 'domain' && (arg(1, $referer_url['path']) == 'edit' || arg(1, $referer_url['path']) == 'add')) {
        $node = node_load(arg(2, $referer_url['path']));
        $domain = node_load(_custom_general_get_group($node, TRUE));
      }
    }

    if (!empty($domain) && $domain->type == NM_CONTENT_DOMAIN) {

      return $domain;
    }

    $domain = FALSE;

  }


  return $domain;
}


/**
 * Holt Lehrtexte, die in Kursen als Demo-LT eingebunden sind und somit Ã¶ffentlich zugÃ¤nglich sind.
 * @return array
 */
function _section_content_get_public_domains() {

  $query = db_select('field_data_field_domain_demo_ref', 'dr');

  $query->condition('dr.deleted', 0, '=')
      ->distinct()
      ->orderBy('field_domain_demo_ref_target_id', 'ASC')
      ->fields('dr', array('field_domain_demo_ref_target_id'));

  $result = $query->execute();

  return $result->fetchCol();
}

function _section_content_text_outline_add_active_path(&$subtree_pointer) {

//Get active MLID from url structure
  $active_mlid = NULL;
  $content_text_active_nid = NULL;

  $content_text_active = (arg(0) == 'domain');
  if ($content_text_active) {
    $content_text_active_nid = arg(2);

    $domain_node = node_load($content_text_active_nid);
    if (isset($domain_node->book)) {
      $active_mlid = $domain_node->book['mlid'];
    }
  }

  $parents = _custom_general_book_get_parents($subtree_pointer, $active_mlid);

  _section_content_book_add_active_path($subtree_pointer, $active_mlid, $parents);
}

function _section_content_book_add_active_path(&$subtree_pointer, $active_mlid, $parents) {
  if (in_array($active_mlid, $parents)) {
    foreach (array_keys($subtree_pointer) as $key) {
//alter link for course section
      $match = "";
      preg_match("|\d+|", $subtree_pointer[$key]['link']['href'], $match);
//todo course ref
      $subtree_pointer[$key]['link']['href'] = 'domain/text/' . $match[0];
//$subtree_pointer[$key]['link']['localized_options']['query'] = '?og_group_ref';

      if (in_array($subtree_pointer[$key]['link']['mlid'], $parents)) {
        $subtree_pointer[$key]['link']['in_active_trail'] = TRUE;
        if ($active_mlid == $subtree_pointer[$key]['link']['mlid']) {
//active
          $subtree_pointer[$key]['link']['options']['attributes']['class'] = array('active');
        }
      }
      _section_content_book_add_active_path($subtree_pointer[$key]['below'], $active_mlid, $parents);
    }
  }
}

/*
 * check if user is has access to see the author's tools on current page
 */

function section_content_authors_tools_access() {

  $active_domain = _section_content_get_active_domain();
  if (!$active_domain) {
    //if we are not in domain context, but domain overview page
    if (strpos(request_uri(), NM_DOMAIN_OVERVIEW_PATH)) {
      if (_section_content_authors_tools_role_access()) {
        return TRUE;
      }
    }
    return FALSE;
  }

  //Bypass node access (admin/moderator)
  if(user_access("bypass node access")) {
    return TRUE;
  }

  //check if user is member of active domain
  if (!og_is_member('node', $active_domain->nid)) {
    return FALSE;
  }


  $role_access = _section_content_authors_tools_role_access();

  return $role_access;
}

/*
 * check if active user's role has access to author tools
 */

function _section_content_authors_tools_role_access() {
  global $user;
  $one_of_needed_roles = array_intersect($user->roles, array(NM_ROLE_ADMIN, NM_ROLE_AUTOR));

  return !empty($one_of_needed_roles);
}


/**
 * inspired by theme_file_entity_file_video
 * Returns HTML for displaying an HTML5 <video> tag.
 *
 * @param array $variables
 *   An associative array containing:
 *   - file: Associative array of file data, which must include "uri".
 *   - controls: Boolean indicating whether or not controls should be displayed.
 *   - autoplay: Boolean indicating whether or not the video should start
 *     playing automatically.
 *   - loop: Boolean indicating whether or not the video should loop.
 *   - muted: Boolean indicating whether or not the sound should be muted.
 *   - width: Width, in pixels, of the video player.
 *   - height: Height, in pixels, of the video player.
 *
 * @ingroup themeable
 */
function theme_section_content_formatter_video($variables) {
  $files = $variables['files'];
  $output = '';

  $video_attributes = array();
  if ($variables['controls']) {
    $video_attributes['controls'] = 'controls';
  }
  if ($variables['autoplay']) {
    $video_attributes['autoplay'] = 'autoplay';
  }
  if ($variables['loop']) {
    $video_attributes['loop'] = 'loop';
  }
  if ($variables['muted']) {
    $video_attributes['muted'] = 'muted';
  }
  if ($variables['width']) {
    $video_attributes['width'] = $variables['width'];
  }
  if ($variables['height']) {
    $video_attributes['height'] = $variables['height'];
  }

  if ($variables['classes']) {
    $classes = 'class="' . $variables['classes'] . '""';
  }


  $output .= '<video' . drupal_attributes($video_attributes) . ' ' . $classes . '>';
  foreach ($files as $delta => $file) {
    $source_attributes = array(
      'src' => file_create_url($file['uri']),
      'type' => $file['filemime'],
    );
    $output .= '<source' . drupal_attributes($source_attributes) . ' />';
  }
  $output .= '</video>';
  return $output;
}


/**
 * Implements hook_field_formatter_settings_form().
 */
function section_content_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  if ($display['type'] == 'section_content_formatter_video') {
    $element['controls'] = array(
      '#title' => t('Show video controls'),
      '#type' => 'checkbox',
      '#default_value' => $settings['controls'],
    );
    $element['autoplay'] = array(
      '#title' => t('Autoplay'),
      '#type' => 'checkbox',
      '#default_value' => $settings['autoplay'],
    );
    $element['loop'] = array(
      '#title' => t('Loop'),
      '#type' => 'checkbox',
      '#default_value' => $settings['loop'],
    );
    $element['width'] = array(
      '#type' => 'textfield',
      '#title' => t('Width'),
      '#default_value' => $settings['width'],
      '#size' => 5,
      '#maxlength' => 5,
      //'#field_suffix' => t('pixels'),
    );
    $element['height'] = array(
      '#type' => 'textfield',
      '#title' => t('Height'),
      '#default_value' => $settings['height'],
      '#size' => 5,
      '#maxlength' => 5,
      //'#field_suffix' => t('pixels'),
    );
    $element['multiple_file_behavior'] = array(
      '#title' => t('Display of multiple files'),
      '#type' => 'radios',
      '#options' => array(
        'tags' => t('Use multiple @tag tags, each with a single source', array('@tag' => '<video>')),
        'sources' => t('Use multiple sources within a single @tag tag', array('@tag' => '<video>')),
      ),
      '#default_value' => $settings['multiple_file_behavior'],
      // Hide this setting in the manage file display configuration.
      '#access' => !empty($field),
    );
    $element['classes'] = array(
      '#type' => 'textfield',
      '#title' => t('Classes'),
      '#default_value' => $settings['classes'],
      '#field_suffix' => t('separated by a space'),
    );
  }

  return $element;
}