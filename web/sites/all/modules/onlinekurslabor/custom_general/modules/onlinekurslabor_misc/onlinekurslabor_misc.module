<?php

/*
 * Implemeting hook_entity_load
 */
/*
  function onlinekurslabor_misc_entity_load($entities, $type) {
  global $is_https;
  if(!$is_https && $type == "file") {
  //replace http protocol by https
  foreach($entities as &$file){
  $parsed_url = parse_url($file->uri);
  $host = $parsed_url['host'];
  if(isset($host) && !strstr($host, "https") && strstr($host, "http")) {
  $file->uri = str_replace('http', 'https', $file->uri);
  dpm($file->uri);
  }
  }
  unset($file);
  }
  }
 */

/*
  function onlinekurslabor_misc_file_load($entities) {
  global $is_https;
  if (!$is_https) {
  //replace http protocol by https
  foreach ($entities as &$file) {
  $parsed_url = parse_url($file->uri);
  $host = $parsed_url['host'];
  if (isset($host) && !strstr($host, "https") && strstr($host, "http")) {
  $file->uri = str_replace('http', 'https', $file->uri);
  dpm($file->uri);
  }
  }
  unset($file);
  }
  } */

/*
  function onlinekurslabor_misc_oembed_request_alter($parameters, &$plugin, &$url) {
  dpm($parameters);
  dpm($plugin);
  $plugin['endpoint'] = str_replace('http', 'https', $plugin['endpoint']);
  dpm($plugin['endpoint']);
  dpm($url);

  }
 */
/**
 * replace oembed protocol in oembed's response message
 * Implements hook_oembed_response_alter
 * 
 * @global type $is_https
 * @param type $embed
 */
function onlinekurslabor_misc_oembed_response_alter(&$embed) {
  global $is_https;
  
  if ($is_https) {
    //iframe: replace http protocol by https
    if (isset($embed['html'])) {
      $html = $embed['html'];
      if (!strstr($html, "https") && strstr($html, "http")) {
        $html = str_replace('http', 'https', $html);
      }
      $embed['html'] = $html;
    }
  }
}

/**
 * Ajax callback remove field when remove click is trigger.
 *
 * In this callback we will replace field items. Main job
 * to delete field item we will done into submit handler.
 *
 * @see multiple_fields_remove_button_field_widget_form_alter()
 */
function onlinekurslabor_misc_remove_button_js($form, $form_state) {

  // Get the information on what we're removing.
  $button = $form_state['triggering_element'];
  // Go two levels up in the form, to the whole widget.
  $element = drupal_array_get_nested_value($form, array_slice($button['#array_parents'], 0, -3));
  // Now send back the proper AJAX command to replace it.
  //field-generic-solution-entry-add-more-wrapper
  $id = $element['#array_parents'][0] . '-add-more-wrapper';
  $id_altered = strtr(drupal_strtolower($id), array(' ' => '-', '_' => '-', '[' => '-', ']' => ''));

  $return = array(
    '#type' => 'ajax',
    '#commands' => array(
      ajax_command_replace('[id^=' . $id_altered . ']', drupal_render($element)),
    ),
  );

  // Because we're doing this ourselves, messages aren't automatic. We have
  // to add them.
  $messages = theme('status_messages');
  if ($messages) {
    $return['#commands'][] = ajax_command_prepend('[id^=' . $id_altered . ']', $messages);
  }

  return $return;
}

/**
 * Implements hook__field_widget_form_alter
 * 
 * @param type $element
 * @param type $form_state
 * @param type $context
 */
function onlinekurslabor_misc_field_widget_form_alter(&$element, $form_state, $context) {

  $field_parents = isset($element['#field_parents']) ? $element['#field_parents'] : array();
  $field_name = isset($element['#field_name']) ? $element['#field_name'] : NULL;
  $language = isset($element['#language']) ? $element['#language'] : LANGUAGE_NONE;
  $delta = isset($element['#delta']) ? $element['#delta'] : 0;

  // Get parent which will we use into Remove Button Element.
  $parents = array_merge(
      $field_parents, array($field_name, $language, $delta));

  if ($context['field']['cardinality'] == FIELD_CARDINALITY_UNLIMITED &&
      ($context['field']['type'] == 'text' || $context['field']['type'] == 'text_long' || $context['field']['type'] == 'double_field' ||
      $context['instance']['widget']['type'] == 'multiple_selects')) {
    $element['remove_button'] = array(
      '#delta' => $element['#delta'],
      '#name' => implode('_', $parents) . '_remove_button',
      '#type' => 'submit',
      '#value' => t('Remove'),
      '#validate' => array(),
      '#attributes' => array('class' => array('multiple-fields-remove-button')),
      '#submit' => array('onlinekurslabor_misc_remove_button_submit_handler'),
      '#limit_validation_errors' => array(),
      '#ajax' => array(
        'callback' => 'onlinekurslabor_misc_remove_button_js',
        'effect' => 'fade',
      ),
      '#weight' => 1000,
    );
  }
}

/**
 * Submit callback to remove an item from the field UI multiple wrapper.
 *
 * When a remove button is submitted, we need to find the item that it
 * referenced and delete it. Since field UI has the deltas as a straight
 * unbroken array key, we have to renumber everything down. Since we do this
 * we *also* need to move all the deltas around in the $form_state['values']
 * and $form_state['input'] so that user changed values follow. This is a bit
 * of a complicated process.
 */
function onlinekurslabor_misc_remove_button_submit_handler($form, &$form_state) {

  $button = $form_state['triggering_element'];
  $delta = $button['#delta'];
  $inpt = 'input';
  // Where in the form we'll find the parent element.
  $address = array_slice($button['#array_parents'], 0, -2);

  // Go one level up in the form, to the widgets container.
  $parent_element = drupal_array_get_nested_value($form, $address);
  $field_name = $parent_element['#field_name'];
  $langcode = $parent_element['#language'];
  $parents = $parent_element['#field_parents'];

  $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);

  // Go ahead and renumber everything from our delta to the last
  // item down one. This will overwrite the item being removed.
  for ($i = $delta; $i <= $field_state['items_count']; $i++) {
    $old_element_address = array_merge($address, array($i + 1));
    $new_element_address = array_merge($address, array($i));

    $moving_element = drupal_array_get_nested_value($form, $old_element_address);
    $moving_element_value = drupal_array_get_nested_value($form_state['values'], $old_element_address);
    $moving_element_input = drupal_array_get_nested_value($form_state[$inpt], $old_element_address);

    // Tell the element where it's being moved to.
    $moving_element['#parents'] = $new_element_address;

    // Move the element around.
    form_set_value($moving_element, $moving_element_value, $form_state);
    drupal_array_set_nested_value($form_state[$inpt], $moving_element['#parents'], $moving_element_input);

    // Move the entity in our saved state.
    if (isset($field_state['entity'][$i + 1])) {
      $field_state['entity'][$i] = $field_state['entity'][$i + 1];
    }
    else {
      unset($field_state['entity'][$i]);
    }
  }

  // Replace the deleted entity with an empty one. This helps to ensure that
  // trying to add a new entity won't ressurect a deleted entity
  // from thev trash bin.
  // $count = count($field_state['entity']);
  // Then remove the last item. But we must not go negative.
  if ($field_state['items_count'] > 0) {
    $field_state['items_count']--;
  }

  // Fix the weights. Field UI lets the weights be in a range of
  // (-1 * item_count) to (item_count). This means that when we remove one,
  // the range shrinks; weights outside of that range then get set to
  // the first item in the select by the browser, floating them to the top.
  // We use a brute force method because we lost weights on both ends
  // and if the user has moved things around, we have to cascade because
  // if I have items weight weights 3 and 4, and I change 4 to 3 but leave
  // the 3, the order of the two 3s now is undefined and may not match what
  // the user had selected.
  $input = drupal_array_get_nested_value($form_state[$inpt], $address);
  // Sort by weight.
  uasort($input, '_field_sort_items_helper');

  // Reweight everything in the correct order.
  $weight = -1 * $field_state['items_count'];
  foreach ($input as $key => $item) {
    if ($item) {
      $input[$key]['_weight'] = $weight++;
    }
  }
  drupal_array_set_nested_value($form_state[$inpt], $address, $input);
  field_form_set_state($parents, $field_name, $langcode, $form_state, $field_state);

  $form_state['rebuild'] = TRUE;
}

function onlinekurslabor_misc_form_alter($form, $form_state, $form_id) {

  if (isset($form['type'])) {

    //section course needed
    $active_course = _section_courses_get_active_course();
    if (!$active_course) {
      return;
    }

    $title = "";
    switch ($form['type']['#value']) {
      case NM_COURSE_NEWS:
        $title = empty($form['nid']['#value']) ? 'Neue Ankündigung erstellen' : 'Ankündigung bearbeiten';
        break;
      case NM_COURSE_DOCS:
        $title = empty($form['nid']['#value']) ? 'Neues Kursdokument erstellen' : 'Kursdokument bearbeiten';
        break;
      case NM_COURSE_GENERIC_TASK:
        $title = empty($form['nid']['#value']) ? 'Neue Aufgabe erstellen' : 'Aufgabe bearbeiten';
        break;
      case NM_COURSE_GROUP:
        $title = empty($form['nid']['#value']) ? 'Neue Kursgruppe erstellen' : 'Kursgruppe bearbeiten';
        break;
      case NM_COURSE:
        $title = empty($form['nid']['#value']) ? 'Neuen Kurs erstellen' : 'Kurs bearbeiten';
        break;
      case NM_COURSE_FORUMTOPIC:
        $title = empty($form['nid']['#value']) ? 'Neues Forenthema erstellen' : 'Forenthema bearbeiten';
        break;
    }

    drupal_set_title($title);
  }
}

/**
 * New default method for rendering horizontal menus. 
 * Use without any parameters to get an example.
 * Output will be renderable block-syntax
 * @param array $navigation_items. The navigation-items, see example
 * @param array $options currently supported:  $options['class']  (the css-class for your menu)
 * @return string
 */
function _onlinekurslabor_misc_get_renderable_section_navigation($navigation_items = null, $options = array()) {
    if (!count($navigation_items)) {
        $navigation_items = array(
            'single' => array(
                'header' => 'EXAMPLE',
                'prefix' => '',
                'suffix' => '',
                'urls' =>
                array(
                    array(
                        'url' => '/',
                        'fragment'=>'internallink',
                        'text' => 'Menu1',
                        'attributes' => array('class' => array('active'))
                    ),
                    array(
                        'url' => '/otherplace',
                        'text' => 'Menu2',
                        'attributes' => array('class' => array('disabled'))
                    )
                ),
            )
        );
    }


    $block = array(
        'prefix' => array(
            '#prefix' => '<nav class="navbar navbar-default ' . $options['class'] . '" id="section_navigation"><div class="container-fluid">',
            '#type' => 'markup',
            '#markup' => "",
    ));
    foreach ($navigation_items as $id => $definition) {
        $nav_entries = '';
        foreach ($definition['urls'] as $url_def) {
            $unread_badge = "";
            $unread_count = $url_def['data']['unread'];
            if ($unread_count) {
                $unread_badge = '<div class="unread_tiny_box"><div style="" class="arrow-down"></div>' . $unread_count . '</div>';
            }
            #$nav_entries .= sprintf('<li class="%s"><a href="%s" class="%s">%s %s</a></li>', _onlinekurslabor_misc_umlaut_to_text(strtolower($url_def['text'])), $url_def['url'], implode(' ', $url_def['attributes']['class']), $url_def['text'], $unread_badge);
            $nav_entries .= '<li class="'._onlinekurslabor_misc_umlaut_to_text(strtolower($url_def['text'])).'">'
                             . l( $url_def['text'] .' '. $unread_badge, $url_def['path'], array('fragment' => $url_def['fragment'],'attributes'=>array('class'=>  $url_def['attributes']['class']))) # <a href="%s" class="%s">%s %s</a></li>', , $url_def['url'],, $url_def['text'], $unread_badge);
                             .'</li>';
            }                    

        $block[$id] = array(
            '#prefix' => $definition['prefix'],
            '#type' => 'markup',
            '#markup' => '<div class="navbar-header">' . $definition['header'] . '</div>
                          <ul class="nav navbar-nav">' . $nav_entries . '</ul>',
            '#suffix' => $definition['suffix'],
        );
    }
    $block['suffix'] = array(
        '#type' => 'markup',
        '#markup' => "",
        '#suffix' => '</div></nav>',
    );
    return $block;
}

function _onlinekurslabor_misc_umlaut_to_text($string) {
    $search = array("Ä", "Ö", "Ü", "ä", "ö", "ü", "ß", "´");
    $replace = array("Ae", "Oe", "Ue", "ae", "oe", "ue", "ss", "");
    return str_replace($search, $replace, $string);
}
