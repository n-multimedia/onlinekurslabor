<?php

function section_start_page_build(&$page) {
    drupal_add_css(drupal_get_path('module', 'section_start') . '/assets/css/section_start.css');
}

/**
 * Implements hook_field_formatter_info().
 */
function section_start_field_formatter_info() {
  return array(
    'start_profile_picture' => array(
      'label' => t('Profile picture for homepage'),
      'field types' => array('image'),
    )
      );
      
}
/**
 * implements hook_field_formatter_view 
 * Auf der Startseite bekommt das Profilbild einen eigenen formatter
 * @param type $entity_type
 * @param type $entity
 * @param type $field
 * @param type $instance
 * @param type $langcode
 * @param type $items
 * @param type $display
 * @return type
 */
function section_start_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

    //generiert markup fuer das profilbild auf der startseite
    $element = array();
    switch ($display['type']) {
        case 'start_profile_picture':

            foreach ($items as $delta => $item) {
                $element[$delta] = array(
                    '#markup' => _section_start_render_profile_home_picture($item['uri']) #mymodule_crazy_fun_plain($name),
                );
            }
            break;
        default: break;
    }
    return $element;
}

// siehe section_start_field_formatter_view
function _section_start_render_profile_home_picture($img_uri) {
    global $user;
    $name = realname_load($user);
    //erstellt beide images, applied html-tags und fuegt ergänzendes html dazu
    $string = theme('image_style', array('path' => $img_uri, 'style_name' => 'homescreen_profile_background'));
    $string .= '<div id="home_profile_picture">';
    $string .= theme('image_style', array('path' => $img_uri, 'style_name' => 'homescreen_profile'));
    $string .="</div>";

    $string.= '<div class="home_picture_hover home_profile_hover_edit"><a href="/user/' . $user->uid . '/edit"><span class="glyphicon glyphicon-pencil" aria-hidden="true"></span></a></div>';

    $string .= '<div class="home_picture_hover home_picture_hover_username home_background_black_transp">' . $name . '</div>';
    return $string;
}

/**
 * Nach dem Login wird man auf die Startseite redirected
 * es sei dem, man hat einen destination-parameter...
 * @param type $edit
 * @param type $account
 */
function section_start_user_login(&$edit, $account) {
    if (!$_GET['destination'])
        $_GET['destination'] = '/';
}
/**
function _section_start_getRenderedProfilePhotoHovers()
{   global $user;
    $name = realname_load($user);
   # $name
   $string = '<div class="home_picture_hover home_profile_hover_edit"><a href="/user/'.$user->uid.'/edit"><span class="glyphicon glyphicon-pencil" aria-hidden="true"></span></a></div>';
    // da muesste man einen hook finden, der auf field item render abziehlt
    $string .= '<div class="home_picture_hover home_picture_hover_username home_background_black_transp">'.$name.'</div>';
  #  global $user;
    return $string;
}
*/
/**
 * ##########################################################################
 * AB HIER NICHT VERWENDETE FUNKTIONEN. MGLW SPÄTER INTERESSANT:::::
 * ##########################################################################
 */
/**
 * Die Stream-Ansicht
 * @return String $html
 */
function _section_start_getRenderedStream() {
 

    $view = _section_start_getView('nm_stream','panel_pane_1');
     
   # $view->set_title( t('Streamrecords'));
    return _section_start_renderView($view, 'panel_pane_1');
    }
    
/**
 * Die Activity-Ansicht
 * @return String $html
 */    
function _section_start_getRenderedActivity() {

    $view = _section_start_getView('nm_activity_stream');
 
   # $view->set_title(t('Activity'));
    return _section_start_renderView($view, null, true);
}

/**
 * Die Ungelesene-Nachrichten-Ansicht
 * @return String $html
 */
function _section_start_getRenderedMessages() {
 
    $view = _section_start_getView('messages_list','messages_unread');
     
 #   $view->set_title(t('Unread messages'));
    return _section_start_renderView($view, 'messages_unread');
   
}


/**
 * liefert ein View-Object mit übergebenem Namen und führt notwendige Operatioen fuer Funktionsweise aus
 * @param String  $view_name Name des Views (machine-name)
 * @param String $display_id Name der Panel Pane (machine-name)
 * @return View $view
 */
function _section_start_getView($view_name, $display_id = null)
{        $view = views_get_view($view_name);
        if ($display_id) {
        //die panel-variante setzen
        $view->set_display($display_id);
        //ausfuehren des views
        $view->execute($display_id);
        //preview enables ajax-next-pager!!
        $view->preview($display_id);
    } 
    return $view;
}
 
 
/**
 * Rendert einen View zu HTML
 * @param View $view der View
 * @param type $display_id Name der Panel Pane (machine-name)
 * @param type $override_count Bei manchen Views funktioniert die Abfrage der Anzahl der Einträge nicht. Kann hier übersprungen werden
 * @return String $html
 */
function _section_start_renderView(View $view, $display_id = null, $override_count = false) {

    $html = "<h3>" . $view->get_title() . "</h3>";
    if (!$override_count)
        $html .= $view->total_rows ? $view->render($display_id) : "<i>&nbsp;&nbsp;- keine - </i><br>";
    else
        $html .= $view->render($display_id);
    return $html;
}
