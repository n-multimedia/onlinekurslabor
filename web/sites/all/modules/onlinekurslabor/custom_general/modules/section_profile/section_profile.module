<?php

/**
 * implements hook_page_build(&$page) 
 * @param type $page
 */
function section_profile_page_build(&$page) {

    drupal_add_css(drupal_get_path('module', 'section_profile') . '/assets/css/profile.css');
}

/**
 * get remdered Header (img, Name, actions) for a profile
 * @param type $uid
 * @return type
 */
function _section_profile_getProfileHeader($uid) {
    return theme('profile_header');
}


/**
 * Implements hook_theme().
 */
function section_profile_theme($existing, $type, $theme, $path) {
    return array(
        'profile_header' => array(
            'template' => 'templates/profile-header',
        ),
        'profile_details' => array(
            'template' => 'templates/profile-details',
        ),
    );
}

/**
 * Get a  button for editing profile or "" if no access
 * @param type $user_id of affected user
 * @return type
 */
function _section_profile_get_profile_edit_btn($user_id) {
    //pre + suffix
    $useer_edit_button = '<button class="btn btn-default edit-profile"><i class="glyphicon glyphicon-pencil"></i> ' . t('Edit profile') . '</button>';
    $html_str = "";

    $path = 'user/' . $user_id . '/edit';
    if (drupal_valid_path($path)) {
        $html_str .= l($useer_edit_button, $path, array('attributes' => array(), 'html' => TRUE,));
    }
    return $html_str;
}



/**
 * get Infos about a user stored in profile.
 * 
 * @param StdClass $user the affected user
 * @return return array in form title => info-value
 */
function _section_profile_get_profile_data($user) {
    $data = array();
    //nutzerrollen
    $roles = $user->roles;
    $to_remove = array('authenticated user');
    $roles = array_diff($roles, $to_remove);
    $roles_name = count($roles) > 1 ? 'Rollen' : 'Rolle';
    $data['public'][$roles_name] = implode($roles, ', ');

    $profile = profile2_load_by_user($user, 'master');
    //profildaten

    $birthday_view = field_view_field('profile2', $profile, 'field_birthday', 'short');
    $data['private']['Geburtstag'] = $birthday_view [0]['#markup'];

    $profile_student = profile2_load_by_user($user, 'student');

    //hochschule
    $hs_items = field_get_items('profile2', $profile_student, 'field_hochschule');
    $persons_hss = array();
    foreach ($hs_items as $hs_itm) {
        $persons_hss[] = taxonomy_term_load($hs_itm['tid'])->name;
    }
    $data['public']['Hochschule'] = implode(", ", $persons_hss);

    $data['private']['Matrikelnummer'] = field_get_items('profile2', $profile_student, 'field_matrikelnummer_varchar')[0]['safe_value'];
    $data['private']['Studienfach'] = field_get_items('profile2', $profile_student, 'field_studienfach')[0]['safe_value'];

    //description
    $data['public']['Über mich'] = field_get_items('profile2', $profile, 'field_about_me', 'short')[0]['safe_value'];

    #return $data;
    //entferne leere values
    foreach ($data as $range => &$content_data) {
        foreach ($content_data as $title => $value) {
            if (!trim($value))
                unset($content_data[$title]);
        }
    }

    return $data;
}

/**
 * Implements section_profile_views_pre_view().
 */
function section_profile_views_pre_view(&$view, $display_id, $args) {
    //nur dieser hook geht, um filters anzupassen
    global $user;


    //geht um den Block "angebotene Kurse" auf "Profil"
    if ($view->name === 'courses_kurse_bersicht' && $view->current_display === 'my_courses_small') {
        $user_watched_id = $view->args[0];
        $current_user_id = $user->uid;
        $user_watched = user_load($user_watched_id);

        //prüft auf den Block "angebotene Kurse"
        if (in_array(NM_ROLE_DOZENT, $user_watched->roles) && !array_intersect(array(NM_ROLE_ADMIN, NM_ROLE_MODERATOR), $user->roles)) {
 
            //lade die filters des views
            $filters = $view->display_handler->get_option('filters');


            //setze neuen status-filter (nur veröffentlicht, keine Entwürfe!)
            $filters['status'] = array('id' => 'status', 'table' => 'node', 'field' => 'status', 'relationship' => 'none', 'group_type' => 'group', 'ui_name' => 'nicht gewähltes "veröffentlicht" sollt eigentlich beides akzeptieren', 'operator' => '=', 'value' => '1', 'group' => 1, 'exposed' => false, 'expose' => array('operator_id' => false, 'label' => '', 'description' => '', 'use_operator' => false, 'operator_label' => '', 'operator' => '', 'identifier' => '', 'required' => false, 'remember' => false, 'multiple' => false, 'remember_roles' => array(2 => 2,),), 'is_grouped' => false, 'group_info' => array('label' => '', 'description' => '', 'identifier' => '', 'optional' => true, 'widget' => 'select', 'multiple' => false, 'remember' => 0, 'default_group' => 'All', 'default_group_multiple' => array(), 'group_items' => array(),),);

            //coursemembership-filter
            $courserole_filter = &$filters['name'];

            //nur kurse, in denen betrachtete person dozent ist
            unset($courserole_filter['value']['kurs-student']);
            unset($courserole_filter['value']['kurs-tutor']);
            
            $filters['name'] = $courserole_filter;
            //override filter
            $view->display_handler->override_option('filters', $filters);
        }
    }
}
 
