<?php

/**
 * DONE
 * - COURSE
 * -- delete Task: delete coresponding solutions
 */
/**
 * Implements hook_node_delete().
 * @param $node
 */
function onlinekurslabor_delete_cascade_node_delete($node) {
  // delete all solutions linked to a task
  if ($node->type == NM_COURSE_GENERIC_TASK) {
    $referenced_nodes = _onlinekurslabor_get_referenced_nodes_by($node->nid, 'field_generic_task');
    $referenced_nids = array_keys($referenced_nodes);
    if (count($referenced_nids)) {
      //ruft selbst wiederum onlinekurslabor_delete_cascade_node_delete auf
      node_delete_multiple($referenced_nids);
      drupal_set_message(t("Deleted %count solutions belonging to task %task_title", array("%count" => count($referenced_nids), "%task_title" => $node->title)));
    }
    //dpm($referenced_nodes);
  }
  //Bilder löschen generisch
  if (in_array($node->type, [NM_COURSE_GENERIC_TASK, NM_COURSE_GENERIC_TASK_SOLUTION])) {
    _onlinekurslabor_delete_cascade_delete_used_files_in_content_if_single($node->nid);
  }
}

/**
 * gets nodes, that are referenced from a context.
 * for example via og_group_ref or a task-solution via the field field_generic_task
 * @param type $referencing_nid The referencing nid, e.g. 1234
 * @param type $referencing_field e.g. og_group_ref, field field_generic_task
 * @return type
 */
function _onlinekurslabor_get_referenced_nodes_by($referencing_nid, $referencing_field = 'og_group_ref') {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->fieldCondition($referencing_field, 'target_id', $referencing_nid);
  $result = $query->execute();
  if (!empty($result['node'])) {
    return $result['node'];
  }
  return array();
}

/**
 * deletes files that are used in  a content but only if its used exclusively in one content.
 * if used multiple times, they get a new og-group-ref
 * @param type $content_id e.g. $node->nid
 */
function _onlinekurslabor_delete_cascade_delete_used_files_in_content_if_single($content_id) {
  $files_in_content = _onlinekurslabor_delete_cascade_get_used_files_in_content($content_id);
  if (empty($files_in_content)) {
    return;
  }
  $deleted_file_counter = 0;
  $file_usage = _onlinekurslabor_delete_cascade_get_usage_for_files(array_keys($files_in_content));
  //nur in diesem node verwendet: löschen
  foreach ($file_usage as $fid => $file_usage_records) {
    if (count($file_usage_records) === 1) {
      file_delete_multiple(array($fid));
      $deleted_file_counter++;
    }
    //sonst: schreibe og-group-ref um
    else {
      _onlinekurslabor_delete_cascade_fix_og_group_ref_for_file($fid, $content_id);
    }
  }
  if ($deleted_file_counter) {
    drupal_set_message(t("Deleted %count files", array("%count" => count($deleted_file_counter))));
  }
}

/**
 * Wird ein Content gelöscht. Dann muss man, sofern eine File woanders weitergenutzt
 * wird, den og_group_ref auf einen existenten content umschreiben
 * @param type $file_id
 * @param type $deleted_content_id
 */
function _onlinekurslabor_delete_cascade_fix_og_group_ref_for_file($file_id, $deleted_content_id) {
  $file = file_load($file_id);
  $file_usage = _onlinekurslabor_delete_cascade_get_usage_for_files(array($file_id));
  foreach ($file_usage as $fid => $file_usage_records) {
    foreach ($file_usage_records as $usage_record) {
      if ($usage_record->type == 'node') {# && $usage_record->id != $deleted_content_id )
        //find og-group-ref for node
        $og_group_to_usage = og_get_entity_groups('node', $usage_record->id);
        if (!empty($og_group_to_usage)) {
          $og_value = current($og_group_to_usage['node']);

          if ($og_value != $deleted_content_id) {
            //  og_group('node', $og_value, (array('entity_type' => 'file', 'entity'=>$file_id)));
            $file->og_group_ref[LANGUAGE_NONE][0]['target_id'] = $og_value;
            //dummy-eigenschaft. in hook_file_presave wird der original-zeitstempel beibehalten
            $file->keeporiginaltimestamp = true;
            file_save($file);

            break;
          }
        }

        # $node
        dpm($usage_record);
      }
    }
  }
}

/**
 * implements   hook_file_presave($file) 
 * keep original timestamp on cascade operations
 * @param type $file
 */
function onlinekurslabor_delete_cascade_file_presave($file) {
  if ($file->keeporiginaltimestamp && is_object($file->original) && $file->original->timestamp) {
    $file->timestamp = $file->original->timestamp;
  }
}

/**
 * gets files used in a content based on file_usage-table (e.g. wysiwyg)
 * @param type $content_id e.g. $node->nid
 * @return type array StdClass fid => file-object
 */
function _onlinekurslabor_delete_cascade_get_used_files_in_content($content_id) {
  //laedt file-usage, also wo eine datei genutzt wird
  $files_used_in_content_query = db_select('file_usage', 'fu');
  $files_used_in_content_query->addField('fu', 'id');
  $files_used_in_content_query->addField('fu', 'type');
  $files_used_in_content_query->addField('fu', 'fid');
  $files_used_in_content_query->join('file_managed', 'fm', 'fm.fid = fu.fid');
  $files_used_in_content_query->condition('fu.id', $content_id, '=');
  $file_results = $files_used_in_content_query->execute();

  $return_arr = array();
  //$file_results ist kein array sondern ein  DatabaseStatementBase, deswegen foreach
  foreach ($file_results as $file_record) {
    $return_arr[$file_record->fid] = file_load($file_record->fid);
  }
  return $return_arr;
}

/**
 * gets usage based on file_usage-table (e.g. wysiwyg) for file-ids
 * @param array $fids drupal-file-ids
 * @return array StdClass $fid => array $records
 */
function _onlinekurslabor_delete_cascade_get_usage_for_files(array $fids) {
  if (!is_array($fids) || empty($fids)) {
    throw new Exception('parameter 1 must be an array and not empty!');
  }
  $abstract_usage_query = db_select('file_usage', 'fu');
  $abstract_usage_query->addField('fu', 'id');
  $abstract_usage_query->addField('fu', 'fid');
  $abstract_usage_query->addField('fu', 'type');
  $abstract_usage_query->addField('fu', 'count');
  $abstract_usage_query->condition('fu.fid', $fids, 'IN');
  $fileusage_result = $abstract_usage_query->execute();


  $return_arr = array();
  foreach ($fileusage_result as $file_usage_record) {
    $return_arr[$file_usage_record->fid][] = $file_usage_record;
  }
  return $return_arr;
}
