<?php

module_load_include('inc', 'section_courses', 'inc/blocks');
module_load_include('inc', 'section_courses', 'inc/realms');
module_load_include('inc', 'section_courses', 'inc/tasks');
module_load_include('inc', 'section_courses', 'inc/actions');

//add course header
//16.07.2013 - 11:58 - SN - now done by context module
function section_courses_preprocess_panels_pane(&$variables) {
  /*
    if (_section_courses_get_active_course()) {
    $block = module_invoke('section_courses', 'block_view', 'course_header_section');

    $variables['page']['content']['course_header_section']['#weight'] = -20;
    $variables['page']['content']['course_header_section']['#markup'] = $block['content'];

    } */

  // Update the history table, stating that this user viewed this node.

  /*
   * History Table
   */
  //news and nodes that are completely rendered in panels
  if (is_array($variables['content']) && isset($variables['content']['node'])) {
    $node = node_load(key($variables['content']['node']));
    node_tag_new($node);
  }

  /*course groups panel*/
  if (is_array($variables['content']) && !empty($variables['content']['#object']->nid)) {
    $node = node_load($variables['content']['#object']->nid);
    node_tag_new($node);
  }

}

/**
 * Implements hook_menu
 *
 * @return array
 */
function section_courses_menu() {

  $items['admin/onlinekurslabor/setting'] = array(
    'title' => 'Onlinekurslabor - Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('section_courses_onlinekurslabor_admin_settings_page'),
    'access callback' => 'custom_general_user_is_okl_admin',
    'access arguments' => array(array('administrator')),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * admin settings page
 * settings for
 *  - current semester
 *  -...
 *
 * @return type
 */
function section_courses_onlinekurslabor_admin_settings_page() {
  $form = array();

  $vocabulary = taxonomy_vocabulary_machine_name_load('semester');

  $semesters = taxonomy_get_tree($vocabulary->vid);
  $terms_select = array();
  foreach ($semesters as $semester) {
    // str_repeat('-', $semester->depth) .
    $terms_select[$semester->tid] = $semester->name;
  }

  //todo error handling
  //we need the taxonomy terms to be available!
  $default_key = current(taxonomy_get_term_by_name(_section_courses_semesterID_ToString(NM_VHB_SEMESTERID_OKL_START)));
  $current_semester = taxonomy_term_load(variable_get('okl_current_semester', $default_key->tid));

  $key = $current_semester->tid;
  $default_val = 0;
  if (isset($terms_select[$key])) {
    $default_val = $key;
  }

  $form['okl_current_semester'] = array(
    '#type' => 'select',
    '#title' => t('Current Semester'),
    '#default_value' => $default_val,
    '#options' => $terms_select,
    '#description' => t("(e.g. SS 13, WS 13/14, ...)"),
    '#required' => TRUE,
  );

  $form['okl_global_forum_tid'] = array(
    '#type' => 'textfield',
    '#title' => t('Global Forum Term ID'),
    '#default_value' => variable_get('okl_global_forum_tid', NM_GLOBAL_FORUM_TID),
    '#description' => t("Main Navigation Link Target"),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Convert VHB-Semester-ID to readable string
 * @param type $sem_id
 * @return string e.g. WS 13/14 or SS 14
 */
function _section_courses_semesterID_ToString($sem_id) {
  $result = "";
  if (is_numeric($sem_id)) {
    //semester id is beeing incremented twice a year
    $year = ($sem_id / 2) + NM_VHB_SEMESTERID_START_YEAR;
    $year_2 = $year + 1;

    $year = $year % 100;
    $year_2 = $year_2 % 100;

    $year = str_pad($year, 2, '0', STR_PAD_LEFT);
    $year_2 = str_pad($year_2, 2, '0', STR_PAD_LEFT);
    if (($sem_id % 2) == 0) {
      //dpm('WS ' . $year . '/' . ($year_2));
      $result = 'WS ' . $year . '/' . ($year_2);
    }
    else {
      //dpm('SS ' . ($year_2));
      $result = 'SS ' . ($year_2);
    }
  }
  else {
    $result = NULL;
  }

  return $result;
}

/**
 * 12.02.2014 - 16:11 - SN not sure, if this works..
 * needs to be tested
 * @param type $str
 * @return boolean
 */
function _section_courses_string_ToSemesterID($str) {

  $matches = array();
  $result = FALSE;
  //will only work till 2100
  preg_match_all('|\d+|', $str, $matches);
  if (isset($matches[0])) {
    $id = $matches[0][0];

    if (strstr($str, 'SS')) {

      $result = (($id + 100 - NM_VHB_SEMESTERID_START_YEAR) * 2 - 1);
    }
    else {
      if (strstr($str, 'WS')) {
        $result = (($id + 100 - NM_VHB_SEMESTERID_START_YEAR) * 2);
      }
    }

    return $result;
  }
  return FALSE;
}

/*
 *  alter group field
 *  subscribe/unsubscribe/you are the group manager
 */

function section_courses_render_course_link($course, $account = NULL) {

  $result = NULL;
  global $user;

  if (!$account) {
    $account = clone $user;
  }

  if (!og_is_group('node', $course)) {
    return NULL;
  }

  $url_course = '/course/home/' . $course->nid;
  if (!empty($course->uid) && ($course->uid == $account->uid)) {
    // User is the group manager.
    $result = '<div class="btn-group">';
    $result .= '<a href="' . $url_course . '" class="btn btn-success">Zum Kurs</a>';
    $result .= '<a href="#" class="btn disabled">Sie sind der Kursgr√ºnder</a>';
    //$result .= '<a href="/course/admin/' . $course->nid . '/settings" class="btn btn-inverse">Kurseinstellungen</a>';
    $result .= '</div>';
  }
  else {
    //check if node type is course
    if ($course->type == NM_COURSE) {
      //check if user is member
      if (og_is_member('node', $course->nid, 'user', $account, array(
        OG_STATE_ACTIVE,
        OG_STATE_PENDING
      ))) {
        $unsubscribe_url = '/group/node/' . $course->nid . '/unsubscribe?destination=courses';

        $result = '<div class="btn-group">';
        $result .= '<a href="' . $url_course . '" class="btn btn-success">Zum Kurs</a>';
        $result .= '<a href="' . $unsubscribe_url . '" class="btn btn-inverse">Abmelden</a>';
        $result .= '</div>';
      }
      else {
        $subscribe_url = 'group/node/' . $course->nid . '/subscribe';
        $subscribe_link = l('Anmelden', $subscribe_url, array(
          'query' => array('destination' => 'course/home/' . $course->nid),
          'attributes' => array('class' => array('btn', 'btn-primary'))
        ));
        $info_link = l('Kursinfo', 'course/info/' . $course->nid, array(
          'attributes' => array(
            'class' => array(
              'btn',
              'btn-info'
            )
          )
        ));

        $result = '<div class="btn-group">';
        $result .= $info_link;
        $result .= $subscribe_link;
        $result .= '</div>';
      }
    }
  }

  return $result;
}

function section_courses_preprocess_views_view_fields(&$variables) {
  global $user;
  if (isset($variables['view']) && $variables['view']->name == 'courses_course_news') {
    $nid = $variables['view']->result[$variables['id'] - 1]->nid;
    if (_section_courses_course_get_num_unread_by_type($user->uid, NM_COURSE_NEWS, $nid)) {
      $variables['row']->nm_classes = 'view-row-unread';
      //$variables['fields']['nm_classes'] = 'view-row-unread';
    }
    else {
      $variables['row']->nm_classes = 'view-row-read';
      //$variables['fields']['nm_classes'] = 'view-row-read';
    }
  }
}

/*
  function section_courses_preprocess_views_view_field(&$variables) {

  //$variables['row']->nid

  if ($variables['field']->real_field == 'nid') {
  $variables['field']->classes = array('test123');

  }

  return;
  if (isset($variables['view']) && $variables['view']->name == 'courses_course_news') {
  if (isset($variables['view']->field['nid'])) {
  dpm($variables);
  dpm($variables['view']->field['nid']->original_value);
  }
  }
  }
  /*
  function section_courses_preprocess_user_picture(&$variables) {

  $variables['user_picture'] = '';
  $account = $variables['account'];

  $profile = profile2_load_by_user($account, 'master');
  if (isset($profile->field_photo)) {
  $field_view = field_view_field('profile2', $profile, 'field_photo', array('settings' => array('image_style' => 'profile_mini_thumbnail')));
  $field_view['#label_display'] = 'hidden';
  $variables['user_picture'] = drupal_render($field_view);
  }
  }

  /**
 * Implements hook_block_info().
 */

function section_courses_block_info() {
  $blocks = array();

  $blocks['course_top_navigation'] = array(
    'info' => t('Course Top Navigation'),
  );
  $blocks['course_header_section'] = array(
    'info' => t('Course Header Secton'),
  );
  $blocks['course_tasks_generic_description'] = array(
    'info' => t('Course Tasks Generic Description'),
  );
  $blocks['course_tasks_generic_tips'] = array(
    'info' => t('Course Tasks Generic Tips'),
  );
  $blocks['course_tasks_generic_solution'] = array(
    'info' => t('Course Tasks Generic Solution Form'),
  );
  $blocks['course_instructors_tools'] = array(
    'info' => t('Course - Instructors Tools'),
  );
  $blocks['course_node_tabs'] = array(
    'info' => t('Course - Node Tabs'),
  );
  $blocks['course_forum_breadcrumbs'] = array(
    'info' => t('Forum - Breadcrumbs'),
  );
  $blocks['course_text_biblio'] = array(
    'info' => t('Course - Text Biblio'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function section_courses_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'course_header_section' :
      $block['content'] = _course_header_section_view();
      break;
    case 'course_top_navigation' :
      $block['content'] = _course_top_navigation_view();
      break;
    case 'course_tasks_generic_description' :
      $block['content'] = _course_tasks_generic_description_view();
      break;
    case 'course_tasks_generic_tips' :
      $block['content'] = _course_tasks_generic_tips_view();
      break;
    case 'course_tasks_generic_solution' :
      $block['content'] = _course_tasks_generic_solution_form_view();
      break;
    case 'course_instructors_tools' :
      $block['content'] = _section_courses_theme_instructor_tools();
      break;
    case 'course_node_tabs' :
      $block['content'] = _section_courses_node_tabs_view();
      break;
    case 'course_forum_breadcrumbs' :
      $block['content'] = _section_courses_forum_breadcrumb_view();
      break;
    case 'course_text_biblio' :
      $block['content'] = _section_courses_text_biblio_view();
      break;
  }

  return $block;


}

/**
 *
 * Implements hook_menu_breadcrumb_alter
 *
 * @global type $user
 * @param type $active_trail
 * @param type $item
 * @return type
 */
function section_courses_menu_breadcrumb_alter(&$active_trail, $item) {
  module_load_include('inc', 'section_courses', 'inc/breadcrumb');

  _section_courses_breadcrumb_alter($active_trail, $item);
}

//condition for context to be not set on domain overview page
function section_courses_context_load_alter(&$context) {
//todo
  if ($context->name == "section_courses_course") {
//block should only be shown to subscribed users, so check for it
    $active_course = _section_courses_get_active_course();
    if ($active_course) {
//unset condition, so context gets active
      unset($context->conditions['context_og_condition_member_status']);
    }
  }
}

/**
 * Determins which course is beeing active/selected
 *
 * @return active course object or FALSE
 */
function _section_courses_get_active_course($reset = FALSE) {
  static $course;
  static $context;

  if (empty($context)) {
    $context = context_isset("context", "section_courses");
  }

  if (empty($context)) {
    custom_general_init();
    $context = context_isset("context", "section_courses");
  }

  if (empty($context)) {
    return FALSE;
  }


  if (!isset($course) || $reset) {
    //proove if user is in course section
    //not prooving causes an infinite loop here (menu_get_object(); on /comment/%/edit)
    $node = NULL;

    /**
     * 18.02.2014 - 16:58 - SN
     * changed arg(5) to arg(4)
     */
    if ((arg(0) != "course" && arg(0) != "node") || (arg(0) == "course" && arg(4) == "reply" || arg(4) == "edit")) {
      $course = FALSE;
      $node = node_load(arg(2));
    }
    else {
      $node = menu_get_object();
    }

    if ($node) {
      $course = $node;
    }

    if (is_object($node) && in_array($node->type, array(
        NM_COURSE_DOCS,
        NM_COURSE_NEWS,
        NM_COURSE,
        NM_COURSE_GROUP,
        NM_COURSE_GENERIC_TASK,
        NM_COURSE_GENERIC_TASK_SOLUTION,
        NM_COURSE_FORUMTOPIC
      ))
    ) {
      if ($node->type == NM_COURSE_GROUP) {
        //get course which this group is assigned to
        if (isset($node->og_group_ref)) {
          //$lang_og = field_language('node', $node, 'og_group_ref');
          $group_tmp = node_load($node->og_group_ref[LANGUAGE_NONE][0]['target_id']);
          $course = node_load(_custom_general_get_group($group_tmp));
        }
      }
      else {
        $course = node_load(_custom_general_get_group($node));
      }
    }
    if (!isset($course)) {
      $c_nid = check_plain(arg(2));
      $course = is_numeric($c_nid) ? node_load($c_nid) : NULL;
    }

    //check linkin ajax requests
    if (
      (arg(0) == 'admin' && strstr(arg(1), "_dashboard")) ||
      (arg(0) == 'section_content' && arg(1) == 'tasks' && arg(2) == 'autocomplete') ||
      (arg(0) == 'h5p_integration' && arg(1) == 'item' && arg(2) == 'autocomplete')
    ) {
      $referer_url = drupal_parse_url($_SERVER['HTTP_REFERER']);
      $referer_url['path'] = substr(parse_url($referer_url['path'], PHP_URL_PATH), 1);

      if (arg(0, $referer_url['path']) == 'course' && (arg(1, $referer_url['path']) == 'admin' || arg(1, $referer_url['path']) == 'forumcontent')) {
        $node = node_load(arg(2, $referer_url['path']));
        $course = node_load(_custom_general_get_group($node));
      }
    }

    if (!empty($course) && $course->type == NM_COURSE) {

      return $course;
    }

    $course = FALSE;
  }

  return $course;
}

/**
 * gets the Lehrtext domain id
 */
function _section_courses_course_get_domain_id($course) {
  $domain_ref = NULL;

  //check if demo mode is set
  //take demo text
  if (section_courses_demo_mode()) {
    if (!empty($course->field_domain_demo_ref)) {
      //$lang = field_language('node', $course, 'field_domain_ref');
      $domain_ref = $course->field_domain_demo_ref[LANGUAGE_NONE][0]['target_id'];
    }
    //fallback to normal text if no demo text is set
    else {
      if (!empty($course->field_domain_ref)) {
        //$lang = field_language('node', $course, 'field_domain_ref');
        $domain_ref = $course->field_domain_ref[LANGUAGE_NONE][0]['target_id'];
      }
    }
  }
  else {
    if (!empty($course->field_domain_ref)) {
      //$lang = field_language('node', $course, 'field_domain_ref');
      $domain_ref = $course->field_domain_ref[LANGUAGE_NONE][0]['target_id'];
    }
  }

  return $domain_ref;
}

function _section_courses_get_forum_href($course, $forum_term_id = NULL) {
  if (!$forum_term_id) {
    $forum_term = _section_courses_get_forum_term($course);
    if (empty($forum_term)) {
      return '';
    }
    $forum_term_id = $forum_term->tid;
  }
  return "course/forum/" . $course->nid . '/' . $forum_term_id;
}

/**
 * Assign og administrator role for instructors (dozenten)
 *
 * Implements hook_entity_insert
 *

 */
/*
  function section_courses_entity_insert($entity, $type) {
  if ($type == 'og_membership' && isset($entity) && $entity->is_new && isset($entity->entity_type) && $entity->entity_type == 'user') {
  $a_user = user_load($entity->etid);
  //Assign admin og role for instructors
  if (in_array(NM_ROLE_DOZENT, $a_user->roles)) {
  og_role_grant($entity->group_type, $entity->gid, $a_user->uid, NM_OG_ROLE_COURSE_ADMINISTRATOR);
  }
  }
  } */

//solved with context module
/**
 * Remove Outline Tabs from various sites.
 *
 * Implements hook_preprocess_page
 *
 * @global type $user
 * @param type $vars
 * @return type
 */
/*
  function section_courses_preprocess_page(&$vars) {

  global $user;

  //check if node object is available
  if (!isset($vars['node']))
  return;

  //flags
  $hide_outline = array_intersect(array(NM_ROLE_STUDENT, NM_ROLE_TEST_STUDENT), $user->roles);


  if ($hide_outline) {
  //hide all tabs
  unset($vars['tabs']['#primary']);
  }

  return;
  } */

/**
 * Implementation of hook_query_alter().
 */
/*
  function section_courses_query_alter(QueryAlterableInterface $query) {

  dpm($query->getMetaData('node'));
  } */


function _section_courses_text_outline_add_active_path(&$subtree_pointer) {

  $parents = array();
  $active_course = _section_courses_get_active_course();

//Get active MLID from url structure
  $active_mlid = NULL;
  $course_text_active_nid = NULL;

  $course_text_active = (arg(0) == 'course' && (arg(1) == 'text' || arg(1) == 'biblio'));
  if ($course_text_active) {
    $course_text_active_nid = arg(3);

    $domain_node = node_load($course_text_active_nid);

    //special case
    //biblio entry -> not inside book
    //need to get course text
    if ($domain_node->type == NM_BIBLIO && $active_course) {
      $domain_id = _section_courses_course_get_domain_id($active_course);
      $domain_node = node_load($domain_id);
    }


    if ($domain_node->book) {
      $active_mlid = $domain_node->book['mlid'];
    }
  }

  $parents = _custom_general_book_get_parents($subtree_pointer, $active_mlid);

  _section_courses_book_add_active_path($subtree_pointer, $active_mlid, $parents);
}

function section_courses_text_outline() {

  $active_course = _section_courses_get_active_course();
  //$lang = field_language('node', $active_course, 'field_domain_ref');
  //$domain_ref = $active_course->field_domain_ref[LANGUAGE_NONE][0]['target_id'];
  $domain_ref = _section_courses_course_get_domain_id($active_course);

  $menu_name = 'book-toc-' . $domain_ref;
  $tree = menu_tree_all_data($menu_name);
// And add the active trail data back to the full tree.
//menu_tree_add_active_path($tree);

  $config = array();
  $config['title_link'] = "test";
  $config['delta'] = "0";
  $config['menu_name'] = $menu_name;
  $config['title_link'] = '';
  $config['parent_mlid'] = 0;
  $config['level'] = 2;

  _section_courses_text_outline_add_active_path($tree);

// Allow alteration of the tree and config before we begin operations on it.
  drupal_alter('menu_block_tree', $tree, $config);


// Prune the tree along the active trail to the specified level.
  if ($config['level'] > 1 || $config['parent_mlid']) {
    if ($config['parent_mlid']) {
      $parent_item = menu_link_load($config['parent_mlid']);
      menu_tree_prune_tree($tree, $config['level'], $parent_item);
    }
    else {
      menu_tree_prune_tree($tree, $config['level']);
    }
  }
  /*

    // Prune the tree to the active menu item.
    if ($config['follow']) {
    menu_tree_prune_active_tree($tree, $config['follow']);
    }

    // If the menu-item-based tree is not "expanded", trim the tree to the active path.
    if ($config['parent_mlid'] && !$config['expanded']) {
    menu_tree_trim_active_path($tree);
    }

    // Trim the branches that extend beyond the specified depth.
    if ($config['depth'] > 0) {
    menu_tree_depth_trim($tree, $config['depth']);
    }
   *

   */

// Render the tree.
  $data = array();
  $title = menu_block_get_title($config['title_link'], $config);
  //$data['subject_array'] = $title;
  $data['subject'] = drupal_render($title);
  $data['content']['#content'] = menu_block_tree_output($tree, $config);
  if (!empty($data['content']['#content'])) {
    $data['content']['#theme'] = array(
      'menu_block_wrapper__' . str_replace('-', '_', $config['delta']),
      'menu_block_wrapper__' . str_replace('-', '_', $config['menu_name']),
      'menu_block_wrapper'
    );
    $data['content']['#config'] = $config;
    $data['content']['#delta'] = $config['delta'];
  }
  else {
    $data['content'] = '';
  }

  return drupal_render($data);
}

/*
  function MY_MODULE_submenu_tree_all_data($path, $menu = 'main-menu', $curr_level = 0, $rebuilt_path = '', $childtree = array()) {
  $tree = menu_tree_all_data($menu);
  $args = explode('/', $path);

  $rebuilt_path = empty($rebuilt_path) ? $args[$curr_level] : $rebuilt_path . '/' . $args[$curr_level];

  foreach ($tree as $branch) {
  if ($branch['link']['link_path'] == $rebuilt_path) {
  $childtree = $branch['below'];
  if ($rebuilt_path != $path) {
  $curr_level++;
  MY_MODULE_submenu_tree_all_data($path, $menu, $curr_level, $rebuilt_path, $childtree);
  }
  }
  }

  $items = array();
  foreach ($childtree as $child) {
  $items[] = l($child['link']['title'], $child['link']['link_path']);
  }

  return theme('item_list', array('items' => $items, 'attributes' => array(), 'type' => 'ul'));
  }
 */

//11.04.2014 - 00:51 - SN changed presave to insert hook
//prevent errors on node creation!
function section_content_node_insert($node) {
  //dpm('inserting');
  _section_content_add_form_container($node);

  //07.05.2014 - 16:00 - SN fix insert for generic node add form embedded in panel page
  //page_courses_admin_add_node_panel_context
  if (arg(0) == 'course' && arg(3) == 'add') {
    //dpm('invoking manually');
    rules_invoke_event("node_insert", $node);
  }
}

function section_content_node_update($node) {
  _section_content_add_form_container($node);
}

function _section_content_add_form_container($node) {
  if ($node->type == NM_COURSE) {
    //Add Form Container for the Course, if form feature is set
    //$lang = field_language('node', $node, 'field_collaborative_features');
    foreach ($node->field_collaborative_features[LANGUAGE_NONE] as $feature) {
      if ($feature['value'] == 'forum') {
        /* $vid = db_query("SELECT vid FROM {taxonomy_vocabulary} WHERE machine_name = 'forums'")->fetchField();
          taxonomy_term_save((object) array(
          'name' => check_plain($node->title) . '_' . $node->nid,
          'vid' => $vid,
          )); */
        //$voc = taxonomy_vocabulary_machine_name_load('forums');
        //dpm($voc);
        $term = current(taxonomy_get_term_by_name('Kursforen'));
        $term_exists = current(taxonomy_get_term_by_name(_section_courses_get_forum_name($node)));

        if (!$term_exists) {
          taxonomy_term_save((object) array(
            'name' => _section_courses_get_forum_name($node),
            'vid' => $term->vid,
            'parent' => array($term->tid),
          ));

          $new_term = _section_courses_get_forum_term($node);

          //add taxonomy to og
          //Set the values
          $values = array(
            'entity_type' => 'taxonomy_term',
            'entity' => $new_term,
            'state' => OG_STATE_ACTIVE,
          );

          $og_membership_entity = og_group('node', $node->nid, $values);
          //
          //mark the forum as container
          $containers = variable_get('forum_containers', array());
          $containers[] = $new_term->tid;
          variable_set('forum_containers', $containers);
        }
      }
    }
  }
}

function _section_courses_get_forum_name($course_node) {
  return "Kursforum" . '-(' . $course_node->nid . ')';
}

function _section_courses_get_forum_term($course_node) {
  $term = current(taxonomy_get_term_by_name(_section_courses_get_forum_name($course_node)));
  return $term;
}

function _section_courses_feature_active($course, $feature) {
  switch ($feature) {
    case NM_COURSE_FEATURE_FORUM:
      //$lang = field_language('node', $course, 'field_collaborative_features');
      if (!empty($course->field_collaborative_features)) {
        foreach ($course->field_collaborative_features[LANGUAGE_NONE] as $feature) {
          if ($feature['value'] == NM_COURSE_FEATURE_FORUM) {
            return TRUE;
          }
        }
      }
      break;
    case NM_COURSE_FEATURE_COURSE_GROUP_LOCK:
      if (!empty($course->field_access_features)) {
        foreach ($course->field_access_features[LANGUAGE_NONE] as $feature) {
          if ($feature['value'] == NM_COURSE_FEATURE_COURSE_GROUP_LOCK) {
            return TRUE;
          }
        }
      }
      break;
    case NM_COURSE_FEATURE_TEXT:
      if (!empty($course->field_other_features)) {
        foreach ($course->field_other_features[LANGUAGE_NONE] as $feature) {
          if ($feature['value'] == NM_COURSE_FEATURE_TEXT) {
            return TRUE;
          }
        }
      }
      break;
    default:
  }

  return FALSE;
}

/*
 *  FORUM
 */

/*
 * alter links in forum section
 */

function section_courses_url_outbound_alter(&$path, &$options, &$original_path) {

  $course = _section_courses_get_active_course();

  if ($course) {
    /*
     *

     * forum node links
     */

    //[todo] refactoring needed
    if (strstr($path, "comment/") && strstr($path, "/edit")) {
      $regex = '#^comment/([0-9]+)/edit$#s';
      preg_match($regex, $path, $matches);
      if (!empty($matches)) {
        $tid = $matches[1];
        $comment = comment_load($tid);
        $path = "course/forumcontent/" . $course->nid . '/' . $comment->nid . '/' . $tid . '/edit';
      }
    }
    //comment reply
    else {
      if (strstr($path, "comment/reply/")) {
        $regex = '#^comment/reply/([0-9]+/*[0-9]*)#s';
        preg_match($regex, $path, $matches);
        if (!empty($matches)) {
          $tid = $matches[1];
          $path = "course/forumcontent/" . $course->nid . '/' . $tid . '/reply';
        }
      }
      //delete
      else {
        if (strstr($path, "comment/") && strstr($path, "/delete")) {
          $regex = '#^comment/([0-9]+)/delete$#s';
          preg_match($regex, $path, $matches);
          if (!empty($matches)) {
            $tid = $matches[1];
            $comment = comment_load($tid);
            $path = "course/forumcontent/" . $course->nid . '/' . $comment->nid . '/' . $tid . '/delete';
          }
        }
        //view
        else {
          if (strstr($path, "comment/")) {
            $regex = '@^comment/([0-9]+)#*@s';
            preg_match($regex, $path, $matches);
            if (!empty($matches)) {
              $tid = $matches[1];
              $comment = comment_load($tid);
              //18.02.2014 - 14:49 - SN
              //anchor is defined in $options (assumption)
              $path = "course/forumcontent/" . $course->nid . '/' . $comment->nid . '/' . $tid;
            }
          }
          else {
            if (strstr($path, "node/add/forum/")) {
              $regex = '#^node/add/forum/([0-9]+)$#s';
              preg_match($regex, $path, $matches);
              if (!empty($matches)) {
                $tid = arg(3);
                $path = "course/forumcontent/" . $course->nid . '/' . $tid . '/add';
              }
            }
            else {
              if (strstr($path, "forum/")) {
                $regex = '#^forum/([0-9]+)$#s';
                preg_match($regex, $path, $matches);
                if (!empty($matches)) {
                  $tid = $matches[1];
                  $term = taxonomy_term_load($tid);
                  //check if forum is assigned to a group
                  //if not.. its a global form. Do not rewrite the link.
                  if(!empty($term->og_group_ref)) {
                    $path = _section_courses_get_forum_href($course, $tid);
                    $original_path = $path;
                  }
                }
              }

              /*
               * 13.06.2013 - 15:12 - SN
               * unsauber . todo fix
               */
              /* replace links for book navigation and titles
               * [todo] Solution to avoid this overkill!
               *  Probably a performance killing thing....
               *

               */
              else {
                if (strstr($path, "node/")) {
                  $regex = '#^node/([0-9]+)$#s';
                  preg_match($regex, $path, $matches);
                  if (!empty($matches)) {
                    $nid = $matches[1];
//solution for biblio and course text needed
                    $type = _custom_general_get_node_type($nid);

                    if ($type == NM_COURSE_FORUMTOPIC) {
                      $path = "course/forumcontent/" . $course->nid . '/' . $nid;
                    }
                    else {
                      if ($type == NM_COURSE_GROUP) {
                        $path = "course/groups/" . $course->nid . '/' . $nid;
                      }
                      else {
                        if ($type == NM_COURSE) {
                          $path = "course/home/" . $nid;
                        }
                        else {
                          if ($type == NM_COURSE_NEWS) {
                            $path = "course/news/" . $course->nid . '/' . $nid;
                          }
                          else {
                            if ($type == NM_COURSE_DOCS) {
                              $path = "course/doc/" . $course->nid . '/' . $nid;
                            }//Study Text / Lehrtext
                            else {
                              if (in_array($type, array(
                                NM_CONTENT_DOMAIN,
                                NM_CONTENT_CHAPTER
                              ))) {
                                $path = "course/text/" . $course->nid . '/' . $nid;
                              }
                              else {
                                if ($type == NM_BIBLIO) {
                                  $path = "course/text/" . $course->nid . '/' . $nid;
                                }
                              }
                            }
                          }
                        }
                      }
                    }

                    $original_path = $path;
                  }
                  $regex = '#^node/([0-9]+)/edit$#s';
                  preg_match($regex, $path, $matches);
                  if (!empty($matches)) {
                    $nid = $matches[1];
                    //solution for biblio and course text needed
                    $type = _custom_general_get_node_type($nid);

                    if ($type == NM_COURSE_FORUMTOPIC) {
                      $path = "course/forumcontent/" . $course->nid . '/' . $nid . '/edit';
                    }
                    $original_path = $path;

                    //edit -> delete not working because of destination query parameter -> unset
                    $options['query'] = array();
                  }
                  $regex = '#^node/([0-9]+)/delete$#s';
                  preg_match($regex, $path, $matches);
                  if (!empty($matches)) {
                    $nid = $matches[1];
                    //solution for biblio and course text needed
                    $type = _custom_general_get_node_type($nid);

                    if ($type == NM_COURSE_FORUMTOPIC) {
                      $path = NM_CONTENT_DELETE_CONTENT_PATH . '/' . $nid;

                      $node = node_load($nid);
                      $topic_term_id = $node->taxonomy_forums[LANGUAGE_NONE][0]['tid'];

                      $options['query'] = array('destination' => NM_COURSE_FORUM_PATH . '/' . $course->nid . '/' . $topic_term_id);
                    }
                    $original_path = $path;
                  }
                }
              }
            }
          }
        }
      }
    }

    /*

      if (strstr($path, "node/")) {
      $regex = '#^node/([0-9]+)#s';
      preg_match($regex, $path, $matches);
      if (!empty($matches)) {
      $nid = $matches[1];
      //solution for biblio and course text needed
      $type = _custom_general_get_node_type($nid);

      if (in_array($type, array(NM_CHAPTER, NM_DOMAIN))) {
      $path = "course/text/" . $course->nid . '/' . $nid;
      }
      else if ($type == NM_BIBLIO) {
      $path = "course/text/biblio/" . $course->nid . '/' . $nid;
      }
      $original_path = $path;
      }
      } */
  }
  else {
    //not course context
    if (strstr($path, "node/")) {
      $regex = '#^node/([0-9]+)$#s';
      preg_match($regex, $path, $matches);
      if (!empty($matches)) {
        $nid = $matches[1];
        //solution for biblio and course text needed
        $type = _custom_general_get_node_type($nid);

        if ($type == NM_COURSE_GROUP) {
          $course_group = node_load($nid);
          if (!empty($course_group->og_group_ref)) {
            $course_nid = $course_group->og_group_ref[LANGUAGE_NONE][0]['target_id'];
            $path = "course/groups/" . $course_nid . '/' . $nid;
          }
        }
        else {
          if ($type == NM_COURSE) {
            $path = "course/home/" . $nid;
          }
        }
      }


      $original_path = $path;
    }
  }
}

/*
 *  NODE ACCESS
 */

/**
 * Allow access to domain-content, when its part of the course
 */
function section_courses_node_access($node, $op, $account) {

  /*
    if (!is_object($node) || !in_array($node->type, array(NM_CHAPTER, NM_DOMAIN))) {
    return NODE_ACCESS_IGNORE;
    }

    switch ($op) {

    case 'view':
    $active_course = _section_courses_get_active_course();

    $access = NODE_ACCESS_DENY;

    if ($active_course) {
    $access = NODE_ACCESS_ALLOW;
    }

    return $access;
    }

    // Returning nothing from this function would have the same effect.
    return NODE_ACCESS_IGNORE;
   *

   */
}

/*
  function section_courses_field_access($op, $field, $entity_type, $entity, $account) {
  $context = context_get("context", "section_courses");
  if (empty($context))
  return;

  if (isset($entity->type) && in_array($entity->type, array(NM_CHAPTER, NM_DOMAIN))) {
  if ($op == "view") {
  $group = _custom_general_get_group($entity);
  $active_course = _section_courses_get_active_course();
  $domain_ref = _section_courses_course_get_domain_id($active_course);
  if ($domain_ref == $group) {
  return TRUE;
  }
  }
  }
  }
 *

 * */

/**
 *
 *
 * @param type $implementations
 * @param type $hook
 */
function section_courses_module_implements_alter(&$implementations, $hook) {

  //[todo] BIG TODO HERE
  //Prove correctness - hacked really badly
  $context = context_get("context", "section_courses");
  if (empty($context)) {
    return;
  }

  //hack for showing the node menu items! deactivates node_access!!!! need more legitimation checks here

  if ($hook == 'field_access') {
    //unset($implementations['og']);
    unset($implementations['og_field_access']);

    // Move mymodule_field_access() to the top of the list. module_implements()
    // iterates through $implementations with a foreach loop which PHP iterates
    // in the order that the items were added, so to move an item to the end of
    // the array, we remove it and then add it.
    //$group = $implementations['mymodule'];
    //unset();
    //$implementations = array('mymodule' => $group) + $implementations;
  }
}

/**
 * get the student's course group of the active course
 *
 * @global type $user
 * @return Group ID of the first course group that matched
 *

 */
function _section_courses_student_get_coursegroup_gid() {
  global $user;

  return _section_courses_get_coursegroup_gid($user->uid);
}

/**
 * get the users's course group in the active course
 *
 * @param type $uid
 * @return Group ID of the first course group that matched
 */
function _section_courses_get_coursegroup_gid($uid, $course = NULL) {
  $account = user_load($uid);

  //we want to redirect students directly to their course group
  //check fo role
  if (array_intersect(array(
    NM_ROLE_STUDENT,
    NM_ROLE_TEST_STUDENT
  ), $account->roles)) {
    //get all gids the user belongs to
    $groups = og_get_groups_by_user($account);
    $groups = $groups['node'] ? $groups['node'] : array();

    foreach ($groups as $gid) {
      //check if group's type is a course group
      if (_custom_general_get_node_type($gid) == NM_COURSE_GROUP) {
        //get active course
        if (empty($course)) {
          $active_course = _section_courses_get_active_course();
        }
        else {
          $active_course = $course;
        }
        //check if course group is part of the active course
        if (og_is_member('node', $active_course->nid, 'node', node_load($gid))) {
          return $gid;
        }
      }
    }
  }
  return NULL;
}

/**
 * Add students form
 *
 * @param type $form
 * @param type $form_state
 * @return type
 */
function section_courses_student_registration_form($form, &$form_state) {

  // Creation of a phone field and its container, hidden by default.

  $form['#tree'] = TRUE;


  $form['import_container'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div id="students-import-wrapper">',
    '#suffix' => '</div>',
    //'#title' => 'Student(en) hinzuf√ºgen',
    // Set up the wrapper so that AJAX will be able to replace the fieldset.
  );

  if (isset($form_state['triggering_element']['#id']) && strstr($form_state['triggering_element']['#id'], 'import')) {
    $output_msg = _section_courses_student_registration_import($form_state['values']['import_container']['import_users']);
    $form['import_container']['import_message'] = array(
      '#markup' => $output_msg,
    );
  }


  $form['import_container']['import_users'] = array(
    '#title' => t('Import List'),
    '#type' => 'textarea',
    '#description' => t('Import existing users: enter their email-adresses <em>One email address per line</em> (accounts will be unlocked)') .


      '<br/>' .
      t('Create new accounts: enter "Firstname Lastname; example@email.com". <em>One entry per line</em> (if an account with that email address already exists, the user will be imported)')


  );
  $form['import_container']['import'] = array(
    '#type' => 'button',
    '#value' => '<i class="icon-user icon-white"></i> Import',
    '#submit' => array('section_courses_student_registration_import_submit'),
    '#attributes' => array('class' => array('btn-warning')),
    // See the examples in ajax_example.module for more details on the
    // properties of #ajax.
    '#ajax' => array(
      'callback' => 'section_courses_student_registration_import_callback',
      'wrapper' => 'students-import-wrapper',
    ),
  );


//
//    $form['users_container'] = array(
//      '#type' => 'fieldset',
//      //'#title' => 'Student(en) hinzuf√ºgen',
//      // Set up the wrapper so that AJAX will be able to replace the fieldset.
//      '#prefix' => '<div id="students-add-wrapper">',
//      '#suffix' => '</div>',
//    );
//    /* if a count set, create a number of user fields */
//    if (isset($form_state['users_num'])) {
//      $users_num = $form_state['users_num'];
//    }
//    else {
//      $form_state['users_num'] = 1;
//      $users_num = 1;
//    }
//
//    // Add the current choices to the form.
//    for ($i = 0; $i < $users_num; $i++) {
//      $form['users_container']['items'][$i . 'prefix'] = array(
//        '#prefix' => '<span class="badge badge-info">#' . ($i + 1) . '</span>',
//      );
//      $form['users_container']['items'][$i] = section_courses_student_registration_fields();
//    }
//
//    $form['users_container']['add_user_num'] = array(
//      //'#prefix' => '<div class="controls"><div class="input-prepend"><span class="add-on">#</span>',
//      //'#suffix' => '</div></div>',
//      //'#title' => 'Anzahl',
//      //'#description' => 'choose a username',
//      '#type' => 'textfield',
//      '#default_value' => '1',
//      '#attributes' => array('class' => array('input-small')),
//      '#maxlength' => 2,
//    );
//
//    $form['users_container']['add_user'] = array(
//      '#type' => 'submit',
//      '#value' => '<i class="icon-plus icon-white"></i> Zeilen',
//      '#submit' => array('section_courses_student_registration_fields_add_one'),
//      '#attributes' => array('class' => array('btn-success')),
//      // See the examples in ajax_example.module for more details on the
//      // properties of #ajax.
//      '#ajax' => array(
//        'callback' => 'section_courses_student_registration_fields_callback',
//        'wrapper' => 'students-add-wrapper',
//      ),
//    );
//

  /*
    $form['users_container']['#tree'] = TRUE;
    $form['users_container'][] = section_courses_student_registration_fields();
   */
  /*
    $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    );
   */
  /*
    $type_name = 'student';
    $form_state['profiles'][$type_name] = profile2_create(array('type' => $type_name));
    profile2_attach_form($form, $form_state);
   *

   */

  return $form;
}

/**
 * Callback for both ajax-enabled buttons.
 *
 * Selects and returns the fieldset with the names in it.
 */
function section_courses_student_registration_fields_callback($form, $form_state) {
  return $form['users_container'];
}

/**
 * Callback for both ajax-enabled buttons.
 *
 * Selects and returns the fieldset with the names in it.
 */
function section_courses_student_registration_import_callback($form, $form_state) {

  $form_state['rebuild'] = TRUE;

  return $form['import_container']; //$form['import_container'];
}

function _section_courses_student_registration_import($input) {

  $input = check_plain($input);

  if (!empty($input)) {
    watchdog('section_courses', 'Importing user list %input', array('%input' => $input), WATCHDOG_INFO);

    //email list = account activation
    //first + lastname; emaillist =  account creation!
    $emails = array();
    $rows_data = array();

    if (strpos($input, ';') > 0) {
      //separators are in the input textares => account creation
      $rows = explode("\n", $input);
      foreach ($rows as $row) {
        $row = html_entity_decode($row, ENT_QUOTES);
        $row = explode(';', $row);
        $data['first_name'] = trim(substr($row[0], 0, strrpos($row[0], ' ')));
        $data['last_name'] = trim(substr($row[0], strrpos($row[0], ' ') + 1));
        $data['email'] = trim($row[1]);

        $emails[] = $data['email'];
        $rows_data[$data['email']] = $data;
      }
    }

    //account activation
    if (strpos($input, ';') === FALSE) {
      $emails = explode("\n", $input);
    }

    $success = array();
    $already_in = array();
    $missing_accounts = array();
    foreach ($emails as $email) {
      if (empty($email)) {
        //ignore empty lines
        continue;
      }

      $acc = user_load_by_mail($email);

      if ($acc) {
        //account activation, if account has not been activated yet
        if (!$acc->status) {

          //activate
          $acc->status = 1;

          //add role
          $role = user_role_load_by_name(NM_ROLE_STUDENT);
          $acc->roles = array($role->rid => $role->name);

          user_save($acc);
        }

        //hadnle ajax callbacks
        if (arg(0) == 'system' && arg(1) == 'ajax') {
          $referer_url = drupal_parse_url($_SERVER['HTTP_REFERER']);
          $referer_url['path'] = substr(parse_url($referer_url['path'], PHP_URL_PATH), 1);

          if (arg(0, $referer_url['path']) == 'course' && arg(1, $referer_url['path']) == 'admin') {
            $active_course = node_load(arg(2, $referer_url['path']));
          }
        }
        else {
          //assign user to active group
          $active_course = _section_courses_get_active_course();
        }


        if (og_is_member('node', $active_course->nid, 'user', $acc, array(OG_STATE_ACTIVE))) {
          //already member
          $already_in[] = $email;
        }
        else {
          //not a member yet
          //add to group
          $values = array(
            'entity type' => 'user',
            'entity' => $acc,
          );
          og_group('node', $active_course->nid, $values);

          $success[] = $email;
        }
      }
      else {

        if (strpos($input, ';') === FALSE) {
          // fill missing aacounts array for status message, or create accounts if
          // the structure of the request contains ';' separators
          $missing_accounts[] = $email;

        }
        else {

          //add user
          $role = user_role_load_by_name(NM_ROLE_STUDENT);
          $edit = array(
            'name' => $rows_data[$email]['first_name'] . ' ' . $rows_data[$email]['last_name'],
            'pass' => user_password(),
            'mail' => $rows_data[$email]['email'],
            'init' => $rows_data[$email]['email'],
            'status' => 1,
            'access' => REQUEST_TIME,
            'roles' => array($role->rid => $role->name),
          );

          //increment until we get an unused user name
          $count = 1;
          $user_name = $edit['name'];
          while (user_load_by_name($user_name)) {
            $user_name = $edit['name'] . ' ' . $count++;
          }
          $edit['name'] = $user_name;

          //save and notify the user
          $account = user_save(drupal_anonymous_user(), $edit);

          if (!$account) {
            drupal_set_message("Account konnte nicht gespeichert werden.", 'error');
            return;
          }

          //student profile
          $profile2 = profile2_create(array('type' => 'student'));
          $profile2->setUser($account);
          profile2_save($profile2);
          //Populate profile fields
          $wrapper = entity_metadata_wrapper('profile2', $profile2->pid);

          //master profile
          $profile2 = profile2_create(array('type' => 'master'));
          $profile2->setUser($account);
          profile2_save($profile2);
          //Populate profile fields
          $wrapper = entity_metadata_wrapper('profile2', $profile2->pid);
          $wrapper->field_first_name->set($rows_data[$email]['first_name']);
          $wrapper->field_last_name->set($rows_data[$email]['last_name']);

          $wrapper->save();

          realname_update($account);
          $account = user_load($account->uid, TRUE);

          //Notification. we need the realname first!
          // Set operation.
          $op = 'register_no_approval_required';
          // Send an email.
          _user_mail_notify($op, $account);

          //hadnle ajax callbacks
          if (arg(0) == 'system' && arg(1) == 'ajax') {
            $referer_url = drupal_parse_url($_SERVER['HTTP_REFERER']);
            $referer_url['path'] = substr(parse_url($referer_url['path'], PHP_URL_PATH), 1);

            if (arg(0, $referer_url['path']) == 'course' && arg(1, $referer_url['path']) == 'admin') {
              $active_course = node_load(arg(2, $referer_url['path']));
            }
          }
          else {
            //assign user to active group
            $active_course = _section_courses_get_active_course();
          }

          //not a member yet
          //add to group
          $values = array(
            'entity type' => 'user',
            'entity' => $account,
          );
          og_group('node', $active_course->nid, $values);

          drupal_set_message('Student ' . $edit['name'] . ' wurde angelegt.');
        }


      }
    }


    $output = '';


    //missing
    if ($missing_accounts) {
      $output .= '<div class="alert alert-error"><h3>Kein Account vorhanden</h3><h5>F√ºr folgende Eintr√§ge</h5>' . '<ol style="padding:0 0 0 25px;margin:0;margin-bottom: 20px;"><li>' . implode('</li><li>', $missing_accounts) . "</li>" . '</ol></div>';
    }
    //already in
    if ($already_in) {
      $output .= '<div class="alert alert-warning"><h3>Bereits im Kurs</h3><h5>F√ºr folgende Eintr√§ge</h5>' . '<ol style="padding:0 0 0 25px;margin:0;margin-bottom: 20px;"><li>' . implode('</li><li>', $already_in) . "</li>" . '</ol></div>';
    }
    //successfully addded
    if ($success) {
      $output .= '<div class="alert alert-success"><h3>Erfolgreich hinzugef√ºgt</h3><h5>F√ºr folgende Eintr√§ge</h5>' . '<ol style="padding:0 0 0 25px;margin:0;margin-bottom: 20px;"><li>' . implode('</li><li>', $success) . "</li>" . '</ol></div>';
    }
  }

  return $output;
}

/**
 * Submit handler for the "add-one-more" button.
 *
 * Increments the max counter and causes a rebuild.
 */
function section_courses_student_registration_import_submit($form, &$form_state) {

  return;
  $form_state['import_response'] = 'import submitted';
}

/**
 * Submit handler for the "import" button.
 *
 * Increments the max counter and causes a rebuild.
 */
function section_courses_student_registration_fields_add_one($form, &$form_state) {
  if ($form['users_container']['add_user_num']['#value'] &&
    $form['users_container']['add_user_num']['#value'] > 0 &&
    $form['users_container']['add_user_num']['#value'] <= 99
  ) {

    $form_state['users_num'] += $form['users_container']['add_user_num']['#value'];
  }
  else {
    $form_state['users_num']++;
  }
  $form_state['rebuild'] = TRUE;
}

function section_courses_student_registration_fields() {

  $form['users_item_container'] = array(
    '#prefix' => '<div id="users_item_container">',
    '#suffix' => '</div>',
  );

  $form['users_item_container']['name'] = array(
    '#prefix' => '<div class="input-prepend"><span class="add-on"><i class="icon-user"></i></span>',
    '#suffix' => '</div>',
    //'#title' => t('Username'),
    '#attributes' => array(
      'placeholder' => t('Username'),
      'class' => array('input-small')
    ),
    //'#description' => 'choose a username',
    '#type' => 'textfield',
  );


  //master data
  $form['users_item_container']['mail'] = array(
    '#prefix' => '<div class="input-prepend"><span class="add-on">@</span>',
    '#suffix' => '</div>',
    //'#title' => t('Email'),
    '#attributes' => array(
      'placeholder' => t('Email'),
      'class' => array('input-large')
    ),
    //'#description' => 'enter a valid email address',
    '#type' => 'textfield',
  );

  $form['users_item_container']['first_name'] = array(
    //'#prefix' => '<div class="input-prepend"><span class="add-on"></span>',
    //'#suffix' => '</div>',
    //'#title' => t('Email'),
    '#attributes' => array(
      'placeholder' => 'Vorname',
      'class' => array('input-small')
    ),
    //'#description' => 'enter a valid email address',
    '#type' => 'textfield',
  );

  //drupal
  $form['users_item_container']['last_name'] = array(
    //'#prefix' => '<div class="input-prepend"><span class="add-on"></span>',
    //'#suffix' => '</div>',
    //'#title' => t('Email'),
    '#attributes' => array(
      'placeholder' => 'Nachname',
      'class' => array('input-small')
    ),
    //'#description' => 'enter a valid email address',
    '#type' => 'textfield',
  );


  return $form;
}

function section_courses_student_registration_form_validate($form, &$form_state) {

  //todo check for clicked button
  return;
  $account = drupal_anonymous_user();

  $name = "";
  $mail = "";
  if (isset($form_state['clicked_button'])) {


  }
  // Random example, if the title is 'test' throw an error
  if ($form_state['values']['users_container']['items'] > 0) {
    foreach ($form_state['values']['users_container']['items'] as $key => $ci) {
      $name = check_plain($ci['users_item_container']['name']);
      $mail = check_plain($ci['users_item_container']['mail']);
      if ((bool) db_select('users')
        ->fields('users', array('uid'))
        ->condition('uid', $account->uid, '<>')
        ->condition('name', db_like($ci['users_item_container']['name']), 'LIKE')
        ->range(0, 1)
        ->execute()
        ->fetchField()
      ) {
        form_set_error('users_container][items][' . $key, t('The name %name is already taken.', array('%name' => $name)));
      }
      $uname_check = user_validate_name($name);
      if (!empty($uname_check)) {
        form_set_error('users_container][items][' . $key, $uname_check);
      }

      // Validate the e-mail address, and check if it is taken by an existing user.
      $error = user_validate_mail($mail);
      if ($error) {
        form_set_error('users_container][items][', $error);
      }
      elseif ((bool) db_select('users')
        ->fields('users', array('uid'))
        ->condition('uid', $account->uid, '<>')
        ->condition('mail', db_like($mail), 'LIKE')
        ->range(0, 1)
        ->execute()
        ->fetchField()
      ) {
        form_set_error('users_container][items][', t('The e-mail address %email is already taken.', array('%email' => $mail)));
      }
    }
  }
}

/**
 * Final submit handler.
 *
 * Reports what values were finally set.
 */
function section_courses_student_registration_form_submit($form, &$form_state) {


  if (count($form_state['values']['users_container']['items']) > 0) {
    foreach ($form_state['values']['users_container']['items'] as $key => $ci) {
      if (!empty($ci['users_item_container']['name']) && !empty($ci['users_item_container']['mail'])) {
        $role = user_role_load_by_name(NM_ROLE_STUDENT);
        $edit = array(
          'name' => check_plain($ci['users_item_container']['name']),
          'pass' => user_password(),
          'mail' => check_plain($ci['users_item_container']['mail']),
          'init' => check_plain($ci['users_item_container']['mail']),
          'status' => 1,
          'access' => REQUEST_TIME,
          'roles' => array($role->rid => $role->name),
        );

        if (!user_load_by_name($edit['name'])) {

          //save and notify the user
          $account = user_save(drupal_anonymous_user(), $edit);

          //student profile
          $profile2 = profile2_create(array('type' => 'student'));
          $profile2->setUser($account);
          profile2_save($profile2);

          //master profile
          $profile2 = profile2_create(array('type' => 'master'));
          $profile2->setUser($account);
          profile2_save($profile2);
          //Populate profile fields
          $wrapper = entity_metadata_wrapper('profile2', $profile2->pid);
          $wrapper->field_first_name->set(check_plain($ci['users_item_container']['first_name']));
          $wrapper->field_last_name->set(check_plain($ci['users_item_container']['last_name']));
          $wrapper->save();


          if (!$account) {
            drupal_set_message("Account konnte nicht gespeichert werden.", 'error');
            return;
          }
          drupal_set_message('Student ' . $edit['name'] . ' wurde angelegt.');

          //assign user to active group
          $active_course = _section_courses_get_active_course();
          $values = array(
            'entity type' => 'user',
            'entity' => $account,
          );
          og_group('node', $active_course->nid, $values);


          _user_mail_notify('register_admin_created', $account);
          //profile2_load_by_user($account);
          //profile2_save();
        }
        else {
          drupal_set_message('Im System gibt es bereits einen Benutzer mit dem Namen ' . $edit['name'], 'error');
        }
      }
      else {
        drupal_set_message('Benutzer ' . ($key + 1) . ' konnte nicht hinzugef√ºgt werden, da eines der Formularfelder leer war.', 'error');
      }
    }
  }
  else {
    drupal_set_message("Es wurde kein neuer Benutzer erstellt", 'error');
  }
}

function _section_courses_book_add_active_path(&$subtree_pointer, $active_mlid, $parents) {
  if (in_array($active_mlid, $parents)) {
    foreach (array_keys($subtree_pointer) as $key) {
      //alter link for course section
      $match = "";
      preg_match("|\d+|", $subtree_pointer[$key]['link']['href'], $match);

      //todo course ref
      $active_course = _section_courses_get_active_course();
      $subtree_pointer[$key]['link']['href'] = 'course/text/' . $active_course->nid . '/' . $match[0];
      //$subtree_pointer[$key]['link']['localized_options']['query'] = '?og_group_ref';

      if (in_array($subtree_pointer[$key]['link']['mlid'], $parents)) {
        $subtree_pointer[$key]['link']['in_active_trail'] = TRUE;
        if ($active_mlid == $subtree_pointer[$key]['link']['mlid']) {
          //active
          $subtree_pointer[$key]['link']['options']['attributes']['class'] = array('active');
        }
      }
      _section_courses_book_add_active_path($subtree_pointer[$key]['below'], $active_mlid, $parents);
    }
  }
}

/*
 * assign kurs_student role for students
 * Assign og administrator role for instructors (dozenten)
 *
 *


 *  Implements hook_og_membership_insert
 *  Add OG-Role automatically when instructors join a group
 */

function section_courses_og_membership_insert(OgMembership $og_membership) {


  if ('user' == $og_membership->entity_type && is_numeric($og_membership->etid)) {

    //user has role instructor
    $account = user_load($og_membership->etid);
    if (in_array(NM_ROLE_DOZENT, $account->roles)) {
      $roles = og_roles('node', NM_COURSE, $og_membership->gid);

      foreach ($roles as $key => $value) {
        if (NM_COURSES_ROLE_ADMINISTRATOR == $value) {
          og_role_grant('node', $og_membership->gid, $og_membership->etid, $key);
        }
      }
    }

    if (array_intersect(array(
      NM_ROLE_STUDENT,
      NM_ROLE_TEST_STUDENT
    ), $account->roles)) {
      $roles = og_roles('node', NM_COURSE, $og_membership->gid);

      foreach ($roles as $key => $value) {
        if (NM_COURSES_ROLE_STUDENT == $value) {
          og_role_grant('node', $og_membership->gid, $og_membership->etid, $key);
        }
      }
    }
  }
}

/**
 * add WYSIWYG Editor to Task Fields
 *
 * @param string $form
 * @param type $form_state
 * @param type $form_id
 */
function section_courses_form_alter(&$form, &$form_state, $form_id) {
  /*
   * Task Node
   */
  if ($form_id == 'courses_generic_task_node_form') {

    $field_items = &$form['field_generic_task_entry'][LANGUAGE_NONE];
    foreach ($field_items as &$f_item) {
      if (is_array($f_item) && isset($f_item['second'])) {
        $f_item['second']['#type'] = 'text_format';
        $f_item['second']['#base_type'] = 'textarea';
        $f_item['second']['#format'] = NM_FILTER_FORMAT_FILTERED_HTML;
      }
    }

    //aufgabenstellung: die textbox wird bei jedem bearbeiten um eine mehr
    //renive empty fields


    $empty_entries = array();
    if (!empty($form['field_generic_task_entry'][LANGUAGE_NONE])) {
      if (count($form['field_generic_task_entry'][LANGUAGE_NONE]) > 1) {
        foreach ($form['field_generic_task_entry'][LANGUAGE_NONE] as $key => $item) {
          //get elements only
          if (is_numeric($key)) {
            if ($item['first']['#default_value'] == NULL && $item['second']['#default_value'] == 0) {
              $empty_entries[$key] = $key;
            }
          }
        }

        /*
        asort($empty_entries);
        if(!empty($empty_entries)) {
          $form_state['rebuild'] = TRUE;
          foreach ($empty_entries as $key) {
            unset($form['field_generic_task_entry'][LANGUAGE_NONE][$key]);
          }
        }*/
        //remove empty forms

        $js_settings['task_remove_empty_fields'] = $empty_entries;

        drupal_add_js(drupal_get_path('module', 'section_courses') . '/js/section_courses_tasks.js');
        drupal_add_js(array('section_courses' => $js_settings), 'setting');

      }
    }


    if (isset($f_item)) {
      unset($f_item);
    }

    $form['#submit'][] = 'section_courses_courses_generic_task_node_form_submit';
    $form['#after_build'][] = 'section_courses_courses_generic_task_node_form_after_build';
  }

  /**
   * Forum Topic Node
   */
  if ($form_id == 'forum_node_form') {

    if (!section_courses_instructors_tools_access()) {
      $form['taxonomy_forums']['#attributes']['style'] = 'display:none';
    }
    //hide forum alias setting
    if (isset($form['shadow'])) {
      unset($form['shadow']);
    }
  }

  //adapting redirects for section courses
  if (stristr($form_id, '_node_form') && in_array($form['#node']->type, array(
      NM_COURSE,
      NM_COURSE_NEWS,
      NM_COURSE_DOCS,
      NM_COURSE_GENERIC_TASK,
      NM_COURSE_GENERIC_TASK_SOLUTION,
      NM_COURSE_GROUP,
      NM_COURSE_FORUMTOPIC
    ))
  ) {
    $form['actions']['delete']['#submit'] = array('section_courses_node_form_delete_submit');
    array_push($form['actions']['submit']['#submit'], 'section_courses_node_form_submit');

    /*
      dpm("setting");
      $active_cours = _section_courses_get_active_course();
      if(!$active_cours) {
      dpm("need reset");
      dpm($form);
      dpm($form['taxonomy_forums'][LANGUAGE_NONE]['#options']);

      }else {

      } */
  }


  /**
   * Course Form
   */
  if (isset($form['type']) && isset($form['type']['#value']) && $form['type']['#value'] == NM_COURSE) {
    /* $form['options']['#title'] = t('Promotion settings');
      $form['options']['#attributes']['class'] = array('node-promotion-options');
      $form['options']['#attached'] = array(
      'js' => array(
      'vertical-tabs' => drupal_get_path('module', 'save_draft') . '/save_draft.js',
      ),
      ); */
    $form['options']['status'] = FALSE;
    if (empty($form['#validate'])) {
      $form['#validate'] = array();
    }
    array_unshift($form['#validate'], 'section_courses_save_draft_validate');
    if (isset($form['nid']['#value'])) {
      if ($form['#node']->status == 1) {
        $form['actions']['draft'] = array(
          '#type' => 'submit',
          '#class' => 'form-submit',
          '#value' => t('Unpublish'),
          '#weight' => '9',
          '#submit' => array('section_courses_save_draft_submit')
        );
        $form['actions']['submit']['#value'] = t('Save');
      }
      else {
        $form['actions']['draft'] = array(
          '#type' => 'submit',
          '#class' => 'form-submit',
          '#value' => t('Save'),
          '#weight' => '0',
          '#submit' => array('section_courses_save_draft_submit')
        );
        $form['actions']['submit']['#value'] = t('Publish');
      }
    }
    else {
      $form['actions']['draft'] = array(
        '#type' => 'submit',
        '#class' => 'form-submit',
        '#value' => t('Save as draft'),
        '#weight' => '9',
        '#submit' => array('section_courses_save_draft_submit')
      );
      $form['actions']['submit']['#value'] = t('Publish');
    }
  }
  
  /**
     * Generische L√∂sung: Eingereicht-am-Feld
     */
    if ($form_id == 'courses_generic_task_solution_node_form') {

        //hat eintrag - verstecken
          $form['field_submitted_on']['#access'] = user_access('administer content');
        
    }
}

/**
 * Handles save draft form validation
 */
function section_courses_save_draft_validate($form, &$form_state) {
  // Set the node to be published or unpublished depending on which button was
  // clicked.
  if ($form_state['triggering_element']['#value'] == $form['actions']['draft']['#value']) {
    $form_state['values']['status'] = 0;
  }
  elseif ($form_state['triggering_element']['#value'] == $form['actions']['submit']['#value']) {
    $form_state['values']['status'] = 1;
  }
}

/**
 * Handles save draft form submission
 */
function section_courses_save_draft_submit($form, &$form_state) {
  node_form_submit($form, $form_state);
}

/**
 * alter taxonomy reference widget for forum references
 * we need to only show the options which are possible in course section
 *
 * @param type $element
 * @param type $form_state
 * @param type $context
 */
function section_courses_field_widget_form_alter(&$element, &$form_state, $context) {
  if ($context['field']['type'] == 'taxonomy_term_reference') {
    if ($context['field']['field_name'] == 'taxonomy_forums') {
      if (isset($element['#type']) && ($element['#type'] == 'select' || $element['#type'] == 'radios' || $element['#type'] == 'checkboxes')) {

        $active_course = _section_courses_get_active_course();


        if ($active_course) {
          $term = _section_courses_get_forum_term($active_course);
          $children = taxonomy_get_tree($term->vid, $term->tid);
          $allowed = array();

          foreach ($children as $value) {
            $allowed[$value->tid] = $value->name;
          }

          if (!empty($allowed)) {
            $options = array();
            if (isset($element['#options']['_none'])) {
              $options = array('_none' => $element['#options']['_none']);
            }
            else {
              $options = array(
                '_none' => theme('options_none', array(
                  'instance' => $context['instance'],
                  'option' => $element['#properties']['empty_option']
                ))
              );
            }
            $options += array_intersect_key($element['#options'], $allowed);

            $element['#options'] = $options;
          }
        }

        /*
          $allowed = _get_referencable_terms_from_view($context['field'], $context['instance'], NULL, 0, NULL, FALSE);
          if (!empty($allowed)) {
          $options = array();
          if (isset($element['#options']['_none'])) {
          $options = array('_none' => $element['#options']['_none']);
          }
          else {
          $options = array('_none' => theme('options_none', array('instance' => $context['instance'], 'option' => $element['#properties']['empty_option'])));
          }
          $options += array_intersect_key($allowed, $element['#options']);
          $element['#options'] = $options;
          }
         *
         *


         */
      }
    }
  }
}

/**
 * Unset field format values to avoid db errors
 *
 * @param type $form
 * @param type $form_state
 */
function section_courses_courses_generic_task_node_form_submit($form, &$form_state) {


  $field_items = &$form_state['values']['field_generic_task_entry'][LANGUAGE_NONE];
  foreach ($field_items as &$f_item) {
    if (is_array($f_item) && isset($f_item['second'])) {
      unset($f_item['second']['format']);
      unset($f_item['second']['format']);
    }
  }
  if (isset($f_item)) {
    unset($f_item);
  }

  $field_items2 = &$form_state['input']['field_generic_task_entry'][LANGUAGE_NONE];
  foreach ($field_items2 as &$f_item2) {
    if (is_array($f_item2) && isset($f_item2['second'])) {
      unset($f_item2['second']['format']);
      unset($f_item2['second']['format']);
    }
  }
  if (isset($f_item2)) {
    unset($f_item2);
  }
}

function section_courses_courses_generic_task_node_form_after_build($form) {

  $field_items = &$form['field_generic_task_entry'][LANGUAGE_NONE];
  foreach ($field_items as &$f_item) {
    if (is_array($f_item) && isset($f_item['second'])) {
      $f_item['second']['format']['#attributes']['style'] = 'display:none';
    }
  }
  if (isset($f_item)) {
    unset($f_item);
  }

  return $form;
}

/**
 * Implements hook_og_user_access_alter().
 *
 *
 * Permit group-subscription for Course Groups, if course configuration forces is
 *

 */
function section_courses_og_user_access_alter(&$perm, $context) {
  global $user;
  $account = clone $user;

  $group_type = $context['group_type'];
  $group = $context['group'];

  $course = _section_courses_get_active_course();

  //we are in course section
  if ($course) {
    //Course Group - Content Type
    if ($group_type == 'node' && $group->type == NM_COURSE_GROUP) {
      //Student
      if (array_intersect(array(
        NM_ROLE_STUDENT,
        NM_ROLE_TEST_STUDENT
      ), $account->roles)) {
        //lock group feature active
        $group_locked = _section_courses_feature_active($course, NM_COURSE_FEATURE_COURSE_GROUP_LOCK);
        //deny access

        if (isset($perm["subscribe"]) && $group_locked) {
          $perm["subscribe"] = FALSE;
          $perm["subscribe without approval"] = FALSE;
        }
        if (isset($perm["unsubscribe"]) && $group_locked) {
          $perm["unsubscribe"] = FALSE;
        }
      }
    }
  }

  return;
}

function section_courses_forum_get_breadcrumb_items() {
  $breadcrumb = array();
  //add forum breadcrumbs
  if (strpos(request_uri(), NM_COURSE_FORUM_PATH) || strpos(request_uri(), NM_COURSE_FORUMCONTENT_PATH)) {

    $active_course = _section_courses_get_active_course();
    $active_course_forum_name = _section_courses_get_forum_name($active_course);
    //$forum_term = taxonomy_term_load(arg(3));

    $active_topic = node_load(arg(3));
    if (!$active_topic || $active_topic->type != "forum") {
      $forum_term = taxonomy_term_load(arg(3));
      $active_topic = NULL;
    }
    else {
      $forum_term = taxonomy_term_load($active_topic->forum_tid);
    }

    $forum_term->parents = taxonomy_get_parents_all($forum_term->tid);

    /* $breadcrumb[] = array(
      'title' => $active_course->title,
      'href' => NM_COURSE_HOME_PATH . '/' . $active_course->nid,
      'localized_options' => array(),
      ); */


    if (isset($forum_term->parents)) {

      $parents = array_reverse($forum_term->parents);

      if (!empty($parents)) {
        //follow path from course_depth
        //the depth is reached when Forum "Course Forum Name" is called
        $depth_flag = FALSE;
        $counter = 0;
        foreach ($parents as $p) {
          //break in der Tiefe von Kursforen
          if ($p->name != $active_course_forum_name && !$depth_flag) {
            continue;
          }

          $depth_flag = TRUE;

          if ($counter++ == 0) {
            continue;
          }

          if ($p->tid != $forum_term->tid || $active_topic) {
            $breadcrumb[] = array(
              'title' => $p->name,
              'href' => NM_COURSE_FORUM_PATH . '/' . $active_course->nid . '/' . $p->tid,
              'localized_options' => array(),
            );
          }
        }


        //add first breadcrumb item
        $tmp = array(
          'title' => "Forum",
          'href' => _section_courses_get_forum_href($active_course),
          'localized_options' => array(),
        );
        array_unshift($breadcrumb, $tmp);

        //add last breadcrumb item
        if (count($parents) > 2) {
          //add currently active
          $href = NM_COURSE_FORUM_PATH . '/' . $active_course->nid . '/' . $forum_term->tid;
          if (current_path() == $href) {
            $breadcrumb[] = array(
              'title' => $forum_term->name,
              'href' => $href,
              'localized_options' => array(),
            );
          }

          //topic is active
          if (strstr(current_path(), NM_COURSE_FORUMCONTENT_PATH)) {
            $topic_nid = arg(3);
            $topic = node_load($topic_nid);
            $breadcrumb[] = array(
              'title' => $topic->title,
              'href' => NM_COURSE_FORUMCONTENT_PATH . '/' . $active_course->nid . '/' . $topic_nid,
              'localized_options' => array(),
            );
          }
        }
      }
    }
  }

  return $breadcrumb;
}

function section_courses_node_form_delete_submit($form, &$form_state) {

  $group_nid = _custom_general_get_group($form_state['node']);
  $group = node_load($group_nid);
  $node = $form_state['node'];
  $node_type = $node->type;
  $group = node_load($group_nid);


  $path = NM_CONTENT_DELETE_CONTENT_PATH . '/' . $form_state['node']->nid;
  $destination = NM_COURSE_HOME_PATH . '/' . $group->nid;


  switch ($node_type) {
    case NM_COURSE:
      $destination = NM_COURSE_HOME_PATH . '/' . $group->nid;
      break;
    case NM_COURSE_NEWS:
      $destination = NM_COURSE_HOME_PATH . '/' . $group->nid;
      break;
    case NM_COURSE_DOCS:
      $destination = NM_COURSE_DOCS_PATH . '/' . $group->nid;
      break;
    case NM_COURSE_GENERIC_TASK:
      $destination = NM_COURSE_GENERIC_TASK_PATH . '/' . $group->nid;
      break;
    case NM_COURSE_FORUMTOPIC:
      //$forum_term = _section_courses_get_forum_term($group);
      $topic_term_id = $node->taxonomy_forums[LANGUAGE_NONE][0]['tid'];
      $destination = NM_COURSE_FORUM_PATH . '/' . $group->nid . '/' . $topic_term_id;
      break;
    case NM_COURSE_GROUP:
      $course = $group;
      //get course which this group is assigned to
      if (isset($node->og_group_ref)) {
        //$lang_og = field_language('node', $node, 'og_group_ref');
        $group_tmp = node_load($node->og_group_ref[LANGUAGE_NONE][0]['target_id']);
        $course = node_load(_custom_general_get_group($group_tmp));
      }

      $destination = NM_COURSE_ADMIN_PREFIX_PATH . '/' . $course->nid . '/' . 'groups';
      break;
  }

  $form_state['redirect'] = array(
    $path,
    array(
      'query' => array(
        'destination' => $destination,
      ),
    )
  ,
  );
}

function section_courses_node_form_submit($form, &$form_state) {

  $form_state['redirect'] = 'node' . '/' . $form_state['nid'];
}

/*
 *  DB QUERY ALTER
 *  Needed to display overview of courses, where the usere is not signed up for yet
 *

 */

/**
 * todo 11.02.2014 - 23:06 - SN
 * @param type $view
 * @param type $queryt
 */
function section_courses_views_query_alter(&$view, &$query) {

  //panel_pane_3 -> show courses where user is not member of
  if ($view->name == "courses_kurse_bersicht" && $view->current_display == 'panel_pane_3') {
    $query->add_where_expression(1, "node.nid NOT IN (SELECT gid FROM og_membership WHERE entity_type= 'user' AND etid = ***CURRENT_USER*** )");
  }
}

/**
 * get timespan progress in percent
 *
 * @param type $node
 * @return int
 */
function _section_courses_get_timespan_percentage($node, &$start_text = NULL, &$end_text = NULL) {
  $percent = 0;
  if (isset($node->field_time_span[LANGUAGE_NONE][0]['value']) && isset($node->field_time_span[LANGUAGE_NONE][0]['value2'])) {
    $now = time();
    $start = $node->field_time_span[LANGUAGE_NONE][0]['value'];
    $end = $node->field_time_span[LANGUAGE_NONE][0]['value2'];

    $start = strtotime($start);
    $end = strtotime($end);

    $percent = 0;

    if ($now <= $start) {
      $percent = 0;
    }
    else {
      if ($now >= $end) {
        $percent = 1;
      }
      else {
        $percent = (($now - $start) / ($end - $start));
      }
    }

    $percent *= 100;

    $start_text = date('d.m.Y', $start);
    $end_text = date('d.m.Y', $end);
  }
  return $percent;
}

/*
 * remove user from course groups if he leaves course
 */

//todo..


/*
 *  Projects Projekte
 */

/**
 * Add students form
 *
 * @param type $form
 * @param type $form_state
 * @return type
 */
function section_courses_group_projects_form($form, &$form_state) {

  // Creation of a phone field and its container, hidden by default.

  $form['#tree'] = TRUE;


  /*
    $form['import_container'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div id="students-import-wrapper">',
    '#suffix' => '</div>',
    //'#title' => 'Student(en) hinzuf√ºgen',
    // Set up the wrapper so that AJAX will be able to replace the fieldset.
    );

    if (isset($form_state['triggering_element']['#id']) && strstr($form_state['triggering_element']['#id'], 'import')) {
    $output_msg = _section_courses_student_registration_import($form_state['values']['import_container']['import_users']);
    $form['import_container']['import_message'] = array(
    '#markup' => $output_msg,
    );
    } */

  $active_course = _section_courses_get_active_course();

  $course_groups = _section_course_get_coursegroups($active_course);

  $form['description'][] = array(
    '#markup' => '<h3 class="page-header">Projektvorschl√§ge zu Kursgruppen zuweisen<h3>',
  );

  $form['proposals'] = array();
  if (!empty($active_course->field_course_proposals)) {

    $options = array(0 => '---');
    foreach ($active_course->field_course_proposals[LANGUAGE_NONE] as $proposal) {
      $proposal_node = node_load($proposal['target_id']);
      $options[$proposal_node->nid] = $proposal_node->title;
    }

    foreach ($course_groups as $course_group) {

      $selected_proposal_nid = _section_courses_course_group_get_proposal($course_group);
      $default_value = $selected_proposal_nid ? $selected_proposal_nid : 0;
      //dpm(node_load($course_group->nid));
      //dpm($default_value);

      $form['proposals'][] = array(
        '#markup' => '<h4>' . $course_group->title . '</h4>',
      );
      $form['proposals'][$course_group->nid] = array(
        '#type' => 'select',
        '#options' => $options,
        '#default_value' => $default_value
        //'#title' => t('In what country is your college or university located?'),
      );
    }

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Submit'
    );
  }
  else {
    $form['warning'][] = array(
      '#markup' => '<h5 class="page-header"><span class="badge badge-important">Damit Sie fortfahren k√∂nnen, m√ºssen Sie zuerst relevante Projektvorschl√§ge in den Kurseinstellungen ausw√§hlen. </span><h5>',
    );
  }


  /*
    $form['import_container']['import'] = array(
    '#type' => 'button',
    '#value' => '<i class="icon-user icon-white"></i> Import',
    '#submit' => array('section_courses_student_registration_import_submit'),
    '#attributes' => array('class' => array('btn-warning')),
    // See the examples in ajax_example.module for more details on the
    // properties of #ajax.
    '#ajax' => array(
    'callback' => 'section_courses_student_registration_import_callback',
    'wrapper' => 'students-import-wrapper',
    ),
    );
   *

   */

  return $form;
}

function section_courses_group_projects_form_submit($form, &$form_state) {

  //dpm($form_state['values']['proposals']);
  //assign selected project to groups
  foreach ($form_state['values']['proposals'] as $group_nid => $proposal_nid) {

    $course_group_node = node_load($group_nid);

    if ($proposal_nid) {
      $course_group_node->field_course_group_proposal[LANGUAGE_NONE][0]['target_id'] = $proposal_nid;
    }
    else {
      $course_group_node->field_course_group_proposal = NULL;
    }
    node_save($course_group_node);

    //$wrapper = entity_metadata_wrapper('node', $course_group_node);
    //$wrapper->field_course_group_proposal->set(node_load($proposal_nid));
    //$wrapper->save();
  }
}

function _section_courses_course_group_get_proposal($course_group) {


  $nid = NULL;
  $course_group_node = node_load($course_group->nid);
  //dpm($course_group_node->field_course_group_proposal);
  if (!empty($course_group_node->field_course_group_proposal)) {
    $nid = $course_group_node->field_course_group_proposal[LANGUAGE_NONE][0]['target_id'];
  }

  //$nid = entity_metadata_wrapper('node', $course_group_node)->field_course_group_proposal->value();


  return $nid;
}

/**
 * copy an existing content to another course
 * given: content-id , course-id
 * applicable for: news, aufgaben, kursdokument. f√ºr weitere typen anpassen.
 *
 * @param string $content_id ID des Contents, der kopiert werden soll
 * @param string $new_course_id ID des Zielkurses
 */
function _section_courses_clone_content($content_id, $new_course_id) {

  $content_object = node_load($content_id);

  $clone_object = _section_courses_clone_node_prepare($content_object);

  if (isset($clone_object->field_course_docs)) {
    /*kopiere attachments auf dateieebnee*/
    $docs = $clone_object->field_course_docs[LANGUAGE_NONE];
    foreach ($docs as $counter => $entry) {
      $fid = $entry['fid'];
      $file = file_load($fid);
      //clone file
      $new_file = file_copy($file, $file->uri, FILE_EXISTS_RENAME);
      //on success set new id
      if ($new_file) {
        $clone_object->field_course_docs[LANGUAGE_NONE][$counter]['fid'] = $new_file->fid;
      }

    }
  }
  if (isset($content_object->og_group_ref)) {
    /* unnecessary
    $copy_ogr = $cn->og_group_ref;
    $clone_cn->og_group_ref = $copy_ogr;*/
    //set new group audience
    $clone_object->og_group_ref[LANGUAGE_NONE][0]['target_id'] = $new_course_id;
    node_save($clone_object);
    # dpm('node',$clone_cn);
  }
}