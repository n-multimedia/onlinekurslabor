<?php

function section_courses_clone_menu() {
  $items['admin/onlinekurslabor/courses/clone'] = array(
    'title' => 'Onlinekurslabor - Courses Clone',
    'file' => 'section_courses_clone.pages.inc',
    'page callback' => 'section_courses_clone_page',
    'access callback' => 'user_access',
    'access arguments' => array('administer users'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implementation of hook_action_info().
 */
function section_courses_clone_action_info() {
  $actions = array();
  $actions['section_courses_clone_course'] = array(
    'label' => t('Clone Course'),
    'type' => 'node',
    'configurable' => TRUE,
    'triggers' => array('any'),
  );

  return $actions;
}

/**
 * Return a form definition
 *
 * @param $context
 *   Default values (if we are editing an existing action instance).
 *
 * @return
 *   Form definition.
 *
 */
function section_courses_clone_course_form($context) {

  //dpm($context);

  $clone_items = array(
    'news' => 'News',
    'course_groups' => 'Course Groups',
      'aufgaben' => 'Aufgaben',
      'kursdokumente' => 'Kursdokumente'
  );

    $clone_persons = array(
    'professor' => 'Professors',
    'tutor' => 'Tutors'
  );

  // Personen-klonen
  $clone_structure = array(
    'forum' => 'Forum',
  );

  $clone_properties = array(
    'status' => 'Status (published)',
  );

  $form['clone_items'] = array(
    '#title' => t('Items'),
    '#type' => 'checkboxes',
    '#options' => $clone_items,
    '#description' => t('Select which content you would like to clone.'),
  );
  
  //Personen-klonen
    $form['clone_persons'] = array(
    '#title' => t('Persons'),
    '#type' => 'checkboxes',
    '#options' => $clone_persons,
    '#description' => t('Select which groups you would like to clone.'),
  );
    
  $form['clone_structure'] = array(
    '#title' => t('Structure'),
    '#type' => 'checkboxes',
    '#options' => $clone_structure,
    '#description' => t('Select which structures you would like to migrate.'),
  );

  $form['clone_properties'] = array(
    '#title' => t('Properties'),
    '#type' => 'checkboxes',
    '#options' => $clone_properties,
    '#description' => t('Set up the properties, you would like to have for the new node.'),
  );

  return $form;
}

function section_courses_clone_course_submit($form_id, $form_state) {
  $result = array();
  $result['clone_items'] = $form_state['values']['clone_items'];
  $result['clone_structure'] = $form_state['values']['clone_structure'];
  $result['clone_properties'] = $form_state['values']['clone_properties'];
  // Personen-klonen
  $result['clone_persons'] = $form_state['values']['clone_persons'];

  return $result;
}

/**
 * Action function: hier wird das klonen durchgefuehrt
 */
function section_courses_clone_course(&$entity, $context = array()) {
    watchdog('section_courses_clone', 'Cloning Course %nid', array('%nid' => $entity->nid), WATCHDOG_INFO);
    $clone_node = _section_courses_clone_node_prepare($entity);
    $clone_items = $context['clone_items'];
    $clone_structure = $context['clone_structure'];
    $clone_properties = $context['clone_properties'];
    // Personen-klonen
    $clone_persons = $context['clone_persons'];
    /*
    *  B E F O R E   S A V I N G
    */
    //Structure before save
    if (!$clone_structure['forum']) {
      foreach ($clone_node->field_collaborative_features[LANGUAGE_NONE] as $key => $feature) {
        if ($feature['value'] == 'forum') {
          //unset form feature, if it was set
          unset($clone_node->field_collaborative_features[LANGUAGE_NONE][$key]);
        }
      }
    }
    $clone_node->title .= ' (KOPIE)';
    //PROPERTIES
    $clone_node->status = $clone_properties['status'] ? 1 : 0;
    node_save($clone_node);
    /*
    *  A F T E R   S A V I N G
    */
    //ITEMS
    //initialize to array to prevent warnings
    $course_news =  $course_groups = $aufgaben = $kursdokumente = array();
    //clone news
    if ($clone_items['news']){  
        $course_news = _section_course_get_news($entity); 
    }
    //clone course_groups
    if ($clone_items['course_groups']) {
        $course_groups = _section_course_get_coursegroups($entity);
    }
    if ($clone_items['aufgaben']) {
        $aufgaben = _section_course_get_tasks ($entity);   
    }
    if ($clone_items['kursdokumente']){ 
        $kursdokumente = _section_course_get_documents ($entity);    
    }
  
    $content_entities = array_merge(array(),$course_news, $course_groups,$aufgaben,$kursdokumente);
   
    if (!empty($content_entities)) {
      //clone course groups
      foreach ($content_entities as $cg) {
           _section_courses_clone_content($cg->nid, $clone_node->nid);
        }
      } 
    //STRUCTURE
    if ($clone_structure['forum']) {
      //copy taxonomy structure
      $old_forum_term = _section_courses_get_forum_term($entity);
      $new_forum_term = _section_courses_get_forum_term($clone_node);
      $old_children = taxonomy_get_tree($new_forum_term->vid, $old_forum_term->tid);
      //map for new tree structure
      $map = array();
      $map[$old_forum_term->tid] = $new_forum_term->tid;
      $buffer = array();
      $counter = count($old_children);
      while ($counter >= 0) {
        foreach ($old_children as $child) {
            if (!isset($map[$child->parents[0]])) {
              //mapping not set yet
              $buffer[] = $child;
              continue;
            }
            $nt = (object) array(
                  'name' => $child->name,
                  'vid' => $new_forum_term->vid,
                  'parent' => array($map[$child->parents[0]]),
            );
            taxonomy_term_save($nt);
            //add taxonomy to og
            //Set the values
            $values = array(
              'entity_type' => 'taxonomy_term',
              'entity' => $nt,
              'state' => OG_STATE_ACTIVE,
            );
            $og_membership_entity = og_group('node', $clone_node->nid, $values);
            //map old term to new added term
            if (!isset($map[$child->tid]) && isset($nt->tid)) {
              $map[$child->tid] = $nt->tid;
              }
        }
        $old_children = $buffer;
        $counter--;
      }
    }
    //Personen-klonen
    $dozenten = $tutoren = array();
    if ($clone_persons['professor']){
        // returns too much people. e.g. Sergej instead of only the professors
        $dozenten = custom_general_get_users_in_group_by_role_real($entity->nid, 'kurs-dozent');  
    }
    if($clone_persons['tutor']){
        $tutoren = custom_general_get_users_in_group_by_role_real($entity->nid, 'kurs-tutor');
    }
    
    foreach ($dozenten as $dozent){
        $acc = user_load($dozent->uid);
        $values = array(
          'entity type' => 'user',
          'entity' => $acc,
        );
        og_group('node', $clone_node->nid, $values);
    }
    foreach ($tutoren as $tutor){
        $acc = user_load($tutor->uid);
        $values = array(
          'entity type' => 'user',
          'entity' => $acc,
        );
        og_group('node', $clone_node->nid, $values);
    }
}

/**
 * Implements hook_views_bulk_operations_form_alter().
 */
function section_courses_clone_views_bulk_operations_form_alter(&$form, &$form_state, $vbo) {



  if ($form['#form_id'] == 'views_form_nm_courses_clone_default') {

    $vbo->view->override_url = $_GET['q'];
    // We are changing the override_url too late, the form action was already
    // set by Views to the previous URL, so it needs to be overriden as well.
    $query = drupal_get_query_parameters($_GET, array('q'));
    $form['#action'] = url($_GET['q'], array('query' => $query));
  }
}

/**
 *  inspired by clone.module
 *  Prepares a node to be cloned.
 */
function _section_courses_clone_node_prepare($original_node, $prefix_title = FALSE, $account = NULL) {
  $node = clone $original_node;

  $node->nid = NULL;
  $node->vid = NULL;
  $node->tnid = NULL;
  $node->log = NULL;
  // Also handle modules that attach a UUID to the node.
  $node->uuid = NULL;
  $node->vuuid = NULL;

  // Anyonmymous users don't have a name.
  // @see: drupal_anonymous_user().
  $node->name = isset($account->name) ? $account->name : NULL;

  $node->created = NULL;
  //no need of menu link here
  //$node->menu = clone_node_clone_menu_link($original_node);
  /* if (isset($node->book['mlid'])) {
    $node->book['mlid'] = NULL;
    $node->book['has_children'] = 0;
    } */
  $node->path = NULL;
  $node->files = array();
  if ($prefix_title) {
    $node->title = t('Clone of !title', array('!title' => $node->title));
  }
  // Add an extra property as a flag.
  $node->clone_from_original_nid = $original_node->nid;


  foreach (array('status', 'moderate', 'promote', 'sticky', 'revision') as $key) {
    // Cast to int since that's how they need to be saved to the DB.
    $node->$key = (int) $original_node->$key;
  }

  return $node;
}
