<?php

//restrict access to other users solutions
//restrict access for instructors to see group streams
//-> change in design here: instructors may see group streems to have the ability to help the groups
//restrict access to course content from users not being part of the course
//restrict submission to course groups, if user already is part of a group
//restrict access to other  course groups, if user already is part of a group

/**
 * Alter the permissions to take action on a comment.
 *
 * @param $allow
 *   Whether the user will be allowed to take action on the comment. Only set
 *   this to FALSE if you want to explicitly deny access. Setting this to TRUE
 *   defaults to the built-in access controls.
 * @param $op
 *   The action being taken on the comment. One of view, post, edit, delete.
 * @param $comment
 *   The comment object on which the action is being taken.
 * @param $account
 *   The user object of the person taking the action.
 * @see fbss_comments_can()
 */
/* 10.12.2013 - 16:09 - SN
 * permit access to delete and edit status comments otside from legal course context
 * instructors and tutors may not edit and delete status comments in other courses that they are not assigned to
 */
function onlinekurslabor_access_fbss_comments_has_permission_alter(&$allow, $op, $comment, $account) {

  $active_course = _section_courses_get_active_course();

  //if course section is set only
  if ($active_course) {
    $og_role = og_get_user_roles('node', $active_course->nid);
    if ($op == 'edit' || $op == 'delete') {
      if (!array_intersect(array(NM_COURSES_ROLE_ADMINISTRATOR, NM_COURSES_ROLE_TUTOR), $og_role)) {
        $allow = FALSE;
      }
    }
  }
}


/**
 * Implements hook_node_grants().
 */
function onlinekurslabor_access_node_grants($account, $op) {

  if ($op != 'view') {
    return;
  }

  $grants = array();

  //COURSES

  //PUBLIC
  $grants['onlinekurslabor_course_public'][] = 1;

  if ($account->uid > 0) {
    $grants['onlinekurslabor_authenticated'][] = 1;
  }
  //grant  access to videosafe-videos
    $all_videosafe_videos = _videosafe_get_all_videos();
    foreach ($all_videosafe_videos as $video_node) {
        $flattened_exclusive_access = array();
        if (count($video_node->field_exclusive_access)) {
            //fÃ¼lle sperrvermerk-array
            $flattened_exclusive_access_iterator = new RecursiveIteratorIterator(new RecursiveArrayIterator($video_node->field_exclusive_access));
            foreach ($flattened_exclusive_access_iterator as $it => $v)
                $flattened_exclusive_access[] = $v;
        }
        //sperrvermerk - nur die exklusivpersonen haben zugriff
        if (count($flattened_exclusive_access) && in_array($account->uid, $flattened_exclusive_access)) {
            #$grants['onlinekurslabor_videosafe_exclusive'][] = $video_node->nid;
            $grants['onlinekurslabor_videosafe_lock'][] = $video_node->nid;
        }
        //freigabe fuer fuer moderator und autoren, falls kein sperrvermerk
        if (in_array(NM_ROLE_MODERATOR, array_values($account->roles)) || (!count($flattened_exclusive_access) && in_array(NM_ROLE_AUTOR, array_values($account->roles))))
            $grants['onlinekurslabor_videosafe_lock'][] = $video_node->nid;
    }




    /*
  
  */
  
  $courses = _section_course_get_courses_by_uid($account->uid);

  $realm_content = 'onlinekurslabor_course_content';
  $realm_solution = 'onlinekurslabor_course_solution';
  foreach ($courses as $course) {
    //give view access for all course groups in course

    if(og_is_member('node', $course->nid, 'user', $account)) {
      $grants[$realm_content][] = $course->nid;


      //solutions for instructors
      $course_solutions = _section_course_get_solutions($course);
      if(!empty($course_solutions)) {
        $og_membership = og_get_membership('node', $course->nid, 'user', $account->uid);

        $roles = og_get_user_roles('node', $og_membership->gid, $account->uid, true, ($og_membership->state < OG_STATE_BLOCKED));

        foreach ($roles as $key => $value) {
          //grant permission for dozenz and tutor only
          if (in_array($value, array(NM_COURSES_ROLE_ADMINISTRATOR, NM_COURSES_ROLE_TUTOR))) {
            foreach($course_solutions as $solution){
              $grants[$realm_solution][] = $solution->nid;
            }
            break;
          }
        }
      }
    }
  }


  $uid = $account->uid;
  //solutions for students
  $solutions = custom_general_get_all_task_solutions_by_uid($uid);
  if(!empty($solutions)) {
    foreach ($solutions as $solution) {
      $grants[$realm_solution][] = $solution->nid;
    }
  }

  //DOMAINS

  $domains = _section_content_get_domains();
  $realm_domain_content = 'onlinekurslabor_domain_content';
  foreach ($domains as $domain) {
    //give view access for all domain group members
    if(og_is_member('node', $domain->nid, 'user', $account)) {
      $grants[$realm_domain_content][] = $domain->nid;
    }else if (array_intersect($account->roles, array(NM_ROLE_DOZENT, NM_ROLE_TUTOR))) {
      //access for authors
      $grants[$realm_domain_content][] = $domain->nid;
    }
  }

  $courses = _section_course_get_courses();
  foreach ($courses as $course) {
    $course = node_load($course->nid);
	//get courses the user is in
    if (og_is_member('node', $course->nid, 'user', $account)) {
      //access complete domain text
      //set domain field target id
      if(!empty($course->field_domain_ref[LANGUAGE_NONE][0]['target_id'])){
        $grants[$realm_domain_content][] = $course->field_domain_ref[LANGUAGE_NONE][0]['target_id'];
      }
    }

    //access demotext
    //set demo domain field target id
    if(!empty($course->field_domain_demo_ref[LANGUAGE_NONE][0]['target_id'])){
      $grants[$realm_domain_content][] = $course->field_domain_demo_ref[LANGUAGE_NONE][0]['target_id'];
    }
  }


  return !empty($grants) ? $grants : array();
}

/**
 * Implements hook_node_access_records().
 */
function onlinekurslabor_access_node_access_records($node) {

  /**
   * restrict access to course groups.
   * course groups should be accessable only, if one is member in its course
   */


  /*
   * COURSES AND COURSE CONTENT
   */

  //course
  //should never be empty
  if($node->type == NM_COURSE) {
    $grants[] = array(
      'realm' => 'onlinekurslabor_course_content',
      'gid' => $node->nid,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 1,
    );
  }

  if($node->type == NM_COURSE) {
    $grants[] = array(
      'realm' => 'onlinekurslabor_course_public',
      'gid' => 1,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 1,
    );
  }
  if ($node->type == NM_VIDEOSAFE_VIDEO) {
      /* warum gehen mehrere realms nicht???
        if ($node->field_exclusive_access) {
            $flattened_exclusive_access_iterator = new RecursiveIteratorIterator(new RecursiveArrayIterator($node->field_exclusive_access));
            foreach ($flattened_exclusive_access_iterator as $it => $v)
                $flattened_exclusive_access[] = $v;
            if (count($flattened_exclusive_access)) {
                $grants[] = array( 
                    'realm' => 'onlinekurslabor_videosafe_exclusive',
                    'gid' => $node->nid,
                    'grant_view' => 1,
                    'grant_update' => 1,
                    'grant_delete' => 0,
                    'priority' => 1,
                );
            }
            }*/
            { //wir muessen den zugriff erstmal sperren, um ihn spaeter fuer autoren etc wieder freizugeben
                    $grants[] = array(
                    'realm' => 'onlinekurslabor_videosafe_lock',
                    'gid' => $node->nid,
                    'grant_view' => 1,
                    'grant_update' => 0,
                    'grant_delete' => 0,
                    'priority' => 2,
                );
            }
        
    }



  //course content
  if (in_array($node->type, array(NM_COURSE_GROUP, NM_COURSE_GENERIC_TASK, NM_COURSE_NEWS, NM_COURSE_DOCS, NM_COURSE_FORUMTOPIC))) {

    //should never be empty
    if(!empty($node->og_group_ref[LANGUAGE_NONE][0]['target_id'])){
      $grants[] = array(
        'realm' => 'onlinekurslabor_course_content',
        'gid' => $node->og_group_ref[LANGUAGE_NONE][0]['target_id'],
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 1,
      );
    }else {
      //forums are handled by taxonomy terms
      if($node->type == NM_COURSE_FORUMTOPIC){
        if(!empty($node->taxonomy_forums[LANGUAGE_NONE][0]['tid'])){
          $term = taxonomy_term_load($node->taxonomy_forums[LANGUAGE_NONE][0]['tid']);
          if(!empty($term->og_group_ref[LANGUAGE_NONE][0]['target_id'])){
            $grants[] = array(
              'realm' => 'onlinekurslabor_course_content',
              'gid' => $term->og_group_ref[LANGUAGE_NONE][0]['target_id'],
              'grant_view' => 1,
              'grant_update' => 0,
              'grant_delete' => 0,
              'priority' => 1,
            );
          }
          else {
            //global forum
            $grants[] = array(
              'realm' => 'onlinekurslabor_authenticated',
              'gid' => 1,
              'grant_view' => 1,
              'grant_update' => 0,
              'grant_delete' => 0,
              'priority' => 1,
            );
          }
        }
      }
      //watchdog('onlinekurslabor_access', 'Course content without course reference (%d)', array('%d' => $node->nid . ' ' . $node->title), WATCHDOG_ALERT);
    }

  }

  //todo solution
  if ($node->type == NM_COURSE_GENERIC_TASK_SOLUTION) {
    $grants[] = array(
      'realm' => 'onlinekurslabor_course_solution',
      'gid' => $node->nid,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 1,
    );
  }

  /*
   * DOMAIN AND DOMAIN CONTENT
   * TEXT
   */
  if ($node->type == NM_CONTENT_DOMAIN) {
    $grants[] = array(
      'realm' => 'onlinekurslabor_domain_content',
      'gid' => $node->nid,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 1,
    );
  }

  if (in_array($node->type, array(NM_CONTENT_CHAPTER, NM_CONTENT_MULTIPLE_CHOICE, NM_CONTENT_QUESTION_AND_ANSWER, NM_BIBLIO, NM_INTERACTIVE_CONTENT))) {
    //should never be empty
    if (!empty($node->og_group_ref[LANGUAGE_NONE][0]['target_id'])) {
      $grants[] = array(
        'realm' => 'onlinekurslabor_domain_content',
        'gid' => $node->og_group_ref[LANGUAGE_NONE][0]['target_id'],
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 1,
      );
    }
    else {
      watchdog('onlinekurslabor_access', 'Domain content without domain reference (%d)', array('%d' => $node->nid . ' ' . $node->title), WATCHDOG_ALERT);
    }
  }

  //biblio special case: should be visible to everyone!
  if ($node->type == NM_BIBLIO) {
    $grants[] = array(
      'realm' => 'onlinekurslabor_course_public',
      'gid' => 1,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 1,
    );
  }

  //additional visibility
  //h5p is being used in different domains
  if (in_array($node->type, array(NM_INTERACTIVE_CONTENT))) {
    if (!empty($node->og_domain_ref[LANGUAGE_NONE])) {
      foreach($node->og_domain_ref[LANGUAGE_NONE] as $item){
        $grants[] = array(
          'realm' => 'onlinekurslabor_domain_content',
          'gid' => $item['target_id'],
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 1,
        );
      }
    }
  }

  return !empty($grants) ? $grants : array();
}

/**
 * Implements hook_media_browser_plugins_alter().
 * deaktiviere library fÃ¼r non-admins
 */
function onlinekurslabor_access_media_browser_plugins_alter(&$plugins) {
    global $user;
    if (!in_array('administrator', array_values($user->roles))) {
        // Hide the "Library" tab on the WYSIWYG media upload widget.
        unset($plugins['media_default--media_browser_1']);
    }
}




/**
 * Implements hook_file_download().
 */
function onlinekurslabor_access_file_download($uri) {
    # drupal_set_message("access" . $uri);
    global $user;
    $account = clone $user;
    $access_allowed = false;
    //laedt file-usage, also wo eine datei genutzt wird
    $query = db_select('file_usage', 'fu');
    $query->addField('fu', 'id');
    $query->addField('fu', 'type');
    $query->join('file_managed', 'fm', 'fm.fid = fu.fid');
    $query->condition('fm.uri', $uri, '=');
    $query->condition('fu.type', array('default_image', 'node', 'profile2'), 'IN');
    $result = $query->execute();

    #   $allowd = true;
    # drupal_set_message("db_result" . var_export($result, true));
    # dpm(count($result));
    #return -1;
    $entryfound = false;
    foreach ($result as $record) {
        $entryfound = true;
        #    dpm($record);
        if (in_array($record->type, array('default_image', 'profile2')))
        {
            $access_allowed = true;
        }
        if ($record->type == 'node') {
            $node = node_load($record->id);
            #     drupal_set_message("access" . var_export($record, true) . 'to' . node_access('view', node_load($record->id), $account));
            if (node_access('view', $node, $account))
                $access_allowed = true;
            //Video protecten
            if ($node->type == NM_VIDEOSAFE_VIDEO) {
                /*leider leider zicken die browser, wenn man dann als student und autor abwechselnd testen mÃ¶chte. das erste geladene bleibt im cache..*/
                header('Expires: Sun, 01 Jan 2014 00:00:00 GMT');
                header('Cache-Control: no-store, no-cache, must-revalidate');
                header('Cache-Control: post-check=0, pre-check=0', FALSE);
                header('Pragma: no-cache');
               
                //wir schauen nach, in welchem h5p-content das gelistet wird  
                $h5p_nodes =   _videosafe_get_h5p_usage($uri);
               
                foreach($h5p_nodes as $h5p_node)
                {   //zugriff auf einen h5p, dann auf das video, egal wo
                     if (node_access('view', $h5p_node, $account))
                     {
                         $access_allowed = true;
                         break;
                     }
                }
                
                if (!$access_allowed )
                {
                 drupal_goto(drupal_get_path('module', 'onlinekurslabor_access').'/assets/video/403.mp4', array(), 307);
                }
                /* verhindert herunterladen, wenn nicht in einem html5-player abgespielt */
                elseif ($access_allowed && !_videosafe_is_video_streaming() &&  !_videosafe_was_node_edited($node))
                { 
                    drupal_goto(drupal_get_path('module', 'onlinekurslabor_access').'/assets/video/403_dl.mp4', array(), 307);
                }
                else
                {
                    
                }
            }
        }
    }
    if (!$entryfound)
        $access_allowed = true;

    if ($access_allowed) {
        $info = image_get_info($uri);
        $mime = $info['mime_type'];
        if (!$mime)
            $mime = file_get_mimetype($uri);
        return array('Content-Type' => $mime);
    }
    return -1;
}
