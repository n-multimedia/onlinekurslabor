<?php

//restrict access to other users solutions
//restrict access for instructors to see group streams
//-> change in design here: instructors may see group streems to have the ability to help the groups
//restrict access to course content from users not being part of the course
//restrict submission to course groups, if user already is part of a group
//restrict access to other  course groups, if user already is part of a group

/**
 * Alter the permissions to take action on a comment.
 *
 * @param $allow
 *   Whether the user will be allowed to take action on the comment. Only set
 *   this to FALSE if you want to explicitly deny access. Setting this to TRUE
 *   defaults to the built-in access controls.
 * @param $op
 *   The action being taken on the comment. One of view, post, edit, delete.
 * @param $comment
 *   The comment object on which the action is being taken.
 * @param $account
 *   The user object of the person taking the action.
 * @see fbss_comments_can()
 */
/* 10.12.2013 - 16:09 - SN
 * permit access to delete and edit status comments otside from legal course context
 * instructors and tutors may not edit and delete status comments in other courses that they are not assigned to
 */
function onlinekurslabor_access_fbss_comments_has_permission_alter(&$allow, $op, $comment, $account) {

  $active_course = _section_courses_get_active_course();

  //if course section is set only
  if ($active_course) {
    $og_role = og_get_user_roles('node', $active_course->nid);
    if ($op == 'edit' || $op == 'delete') {
      if (!array_intersect(array(NM_COURSES_ROLE_ADMINISTRATOR, NM_COURSES_ROLE_TUTOR), $og_role)) {
        $allow = FALSE;
      }
    }
  }
}


/**
 * Implements hook_node_grants().
 */
function onlinekurslabor_access_node_grants($account, $op) {

  if ($op != 'view') {
    return;
  }

  //speedup by 40% using static cache
  $grants = &drupal_static(__FUNCTION__);
  if (isset($grants)) {
      return $grants;
  }
  
  $grants = array();

  //COURSES

  //PUBLIC
  $grants['onlinekurslabor_course_public'][] = 1;

  if ($account->uid > 0) {
    $grants['onlinekurslabor_authenticated'][] = 1;
  }

  
  //Videosafe-Videos
  if (in_array(NM_ROLE_AUTOR, array_values($account->roles)))
  {
      $users_videosafe_videos = _videosafe_get_videos_for_exclusive_user_id($account->uid);
          foreach ($users_videosafe_videos as $video_node) {
                 $grants['onlinekurslabor_videosafe_exclusive_access'][] = $video_node->nid;
          }
    $grants['onlinekurslabor_author_access'][] = 1;
  }
  




    /*
  
  */
  
  
  $courses = _section_course_get_courses_by_uid($account->uid);

  $realm_content = 'onlinekurslabor_course_content';
  $realm_solution = 'onlinekurslabor_course_solution';
  $realm_solution_teacher = 'onlinekurslabor_course_solution_teacher';
  foreach ($courses as $course) {
       
    if(og_is_member('node', $course->nid, 'user', $account)) {
      //give view access for contents  in course
      $grants[$realm_content][] = $course->nid;

    //separater realm fuer Zugriff auf Lösungen durch  dozenten/tutoren. 
    //Durch Nutzung der Course-Nid nur wenige Einträge nötig.  
    if(_section_courses_user_can_edit_course($account, $course))
      {
           $grants[$realm_solution_teacher][] = $course->nid ; 
      }
        
    }
  }


  $uid = $account->uid;
  //solutions for students
  $solutions = custom_general_get_all_task_solutions_by_uid($uid);
  if(!empty($solutions)) {
    foreach ($solutions as $solution) {
      $grants[$realm_solution][] = $solution->nid;
    }
  }
  //zugriff auf lösungen zu gruppenaufgaben
  $arr_my_group_solutions = _section_courses_get_group_task_solutions_for_user($account);
  foreach ($arr_my_group_solutions as $group_solution) {
      $grants[$realm_solution][] = $group_solution["solution"]->nid;
    }

        
  //DOMAINS
    
  $domains = _section_content_get_domains();
  $public_domains_nids = array_keys(_section_content_get_domains_having_group_access(0));
  $realm_domain = 'onlinekurslabor_domain';
  $realm_domain_content = 'onlinekurslabor_domain_content';
  foreach ($domains as $domain) {
    //give view access for all domain group members OR if domain is "public"
    if (og_is_member('node', $domain->nid, 'user', $account) || in_array($domain->nid, $public_domains_nids)) {
      $grants[$realm_domain][] = $domain->nid;
      $grants[$realm_domain_content][] = $domain->nid;
    }
    else if (array_intersect($account->roles, array(NM_ROLE_DOZENT, NM_ROLE_TUTOR))) {
      //give view access ONLY for Domain, not for its content!
      $grants[$realm_domain][] = $domain->nid;
    }
  }

  $courses = _section_course_get_courses();
  foreach ($courses as $course) {
    $course = node_load($course->nid);
	//get courses the user is in
    if (og_is_member('node', $course->nid, 'user', $account)) {
      //access complete domain text
      //set domain field target id
      if(!empty($course->field_domain_ref[LANGUAGE_NONE][0]['target_id'])){
        $grants[$realm_domain][] = $course->field_domain_ref[LANGUAGE_NONE][0]['target_id'];
        $grants[$realm_domain_content][] = $course->field_domain_ref[LANGUAGE_NONE][0]['target_id'];
      }
    }

    //access demotext
    //set demo domain field target id
    if(!empty($course->field_domain_demo_ref[LANGUAGE_NONE][0]['target_id'])){
      $grants[$realm_domain][] = $course->field_domain_demo_ref[LANGUAGE_NONE][0]['target_id'];
      $grants[$realm_domain_content][] = $course->field_domain_demo_ref[LANGUAGE_NONE][0]['target_id'];
    }
  }


  return !empty($grants) ? $grants : array();
}

/**
 * Implements hook_node_access_records().
 */
function onlinekurslabor_access_node_access_records($node) {

  /**
   * restrict access to course groups.
   * course groups should be accessable only, if one is member in its course
   */


  /*
   * COURSES AND COURSE CONTENT
   */

  //course
  //should never be empty
  if($node->type == NM_COURSE) {
    $grants[] = array(
      'realm' => 'onlinekurslabor_course_content',
      'gid' => $node->nid,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 1,
    );
  }

  //public access,
  //biblio special case: should be visible to everyone!
  if(in_array($node->type ,array( NM_COURSE , NM_BIBLIO))) {
    $grants[] = array(
      'realm' => 'onlinekurslabor_course_public',
      'gid' => 1,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 1,
    );
  }
  if ($node->type == NM_VIDEOSAFE_VIDEO) {
      
      /*video mit sperrvermerk*/
        if ($node->field_exclusive_access) {
            $flattened_exclusive_access_iterator = new RecursiveIteratorIterator(new RecursiveArrayIterator($node->field_exclusive_access));
            foreach ($flattened_exclusive_access_iterator as $it => $v)
                $flattened_exclusive_access[] = $v;
            if (count($flattened_exclusive_access)) {
                $grants[] = array(
                    'realm' => 'onlinekurslabor_videosafe_exclusive_access',
                    'gid' => $node->nid,
                    'grant_view' => 1,
                    'grant_update' => 1,
                    'grant_delete' => 0,
                    'priority' => 1,
                );
            }
        } else { //kein sperrvermerk dann sperren mit gid=1
            $grants[] = array(
                'realm' => 'onlinekurslabor_author_access',
                'gid' => 1,
                'grant_view' => 1,
                'grant_update' => 0,
                'grant_delete' => 0,
                'priority' => 2,
            );
        }
    }



  //course content
  if (in_array($node->type, array(NM_COURSE_GROUP, NM_COURSE_GENERIC_TASK, NM_COURSE_NEWS, NM_COURSE_DOCS, NM_COURSE_FORUMTOPIC))) {

    //should never be empty
    if(!empty($node->og_group_ref[LANGUAGE_NONE][0]['target_id'])){
      $grants[] = array(
        'realm' => 'onlinekurslabor_course_content',
        'gid' => $node->og_group_ref[LANGUAGE_NONE][0]['target_id'],
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 1,
      );
    }else {
      //forums are handled by taxonomy terms
      if($node->type == NM_COURSE_FORUMTOPIC){
        if(!empty($node->taxonomy_forums[LANGUAGE_NONE][0]['tid'])){
          $term = taxonomy_term_load($node->taxonomy_forums[LANGUAGE_NONE][0]['tid']);
          if(!empty($term->og_group_ref[LANGUAGE_NONE][0]['target_id'])){
            $grants[] = array(
              'realm' => 'onlinekurslabor_course_content',
              'gid' => $term->og_group_ref[LANGUAGE_NONE][0]['target_id'],
              'grant_view' => 1,
              'grant_update' => 0,
              'grant_delete' => 0,
              'priority' => 1,
            );
          }
          else {
            //global forum
            $grants[] = array(
              'realm' => 'onlinekurslabor_authenticated',
              'gid' => 1,
              'grant_view' => 1,
              'grant_update' => 0,
              'grant_delete' => 0,
              'priority' => 1,
            );
          }
        }
      }
    }

  }
  
  //trigger warning for course-corpses [kills "rebuild node access"]
   if (in_array($node->type, array(NM_COURSE_GROUP, NM_COURSE_GENERIC_TASK, NM_COURSE_NEWS, NM_COURSE_DOCS, NM_COURSE_GENERIC_TASK_SOLUTION))) {
    if (empty($node->og_group_ref[LANGUAGE_NONE][0]['target_id'])) {
      watchdog('onlinekurslabor_access', 'Course content without course reference (%d)', array('%d' => '/node/'.$node->nid . ' ' . $node->title), WATCHDOG_ALERT);
    }
  }


  //todo solution
  if ($node->type == NM_COURSE_GENERIC_TASK_SOLUTION) {
    
    $grants[] = array(
      'realm' => 'onlinekurslabor_course_solution',
      'gid' => $node->nid,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 1,
    );
   //teacher override
   //separater realm spart weitere 60% Zeit 
   $grants[] = array(
    'realm' => 'onlinekurslabor_course_solution_teacher',
    'gid' => $node->og_group_ref[LANGUAGE_NONE][0]['target_id'],
    'grant_view' => 1,
    'grant_update' => 0,
    'grant_delete' => 0,
    'priority' => 1,
  );
  }

  /*
   * DOMAIN AND DOMAIN CONTENT
   * TEXT
   */
  if ($node->type == NM_CONTENT_DOMAIN) {
    $grants[] = array(
      'realm' => 'onlinekurslabor_domain',
      'gid' => $node->nid,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 1,
    );
  }

  if (in_array($node->type, array(NM_CONTENT_CHAPTER, NM_CONTENT_MULTIPLE_CHOICE, NM_CONTENT_QUESTION_AND_ANSWER, NM_INTERACTIVE_CONTENT, ANNVID_CONTENTTYPE))) {
    //should never be empty
    if (!empty($node->og_group_ref[LANGUAGE_NONE][0]['target_id'])) {
      $grants[] = array(
        'realm' => 'onlinekurslabor_domain_content',
        'gid' => $node->og_group_ref[LANGUAGE_NONE][0]['target_id'],
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 1,
      );
    }
    else {
      watchdog('onlinekurslabor_access', 'Domain content without domain reference (%d)', array('%d' => '/node/'.$node->nid . ' ' . $node->title), WATCHDOG_ALERT);
    }
  }

        

  //additional visibility
  //h5p is being used in different domains
  if (in_array($node->type, array(NM_INTERACTIVE_CONTENT))) {
    if (!empty($node->og_domain_ref[LANGUAGE_NONE])) {
      foreach($node->og_domain_ref[LANGUAGE_NONE] as $item){
        $grants[] = array(
          'realm' => 'onlinekurslabor_domain_content',
          'gid' => $item['target_id'],
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 1,
        );
      }
    }
  }

  return !empty($grants) ? $grants : array();
}

/**
 * Implements hook_media_browser_plugins_alter().
 * deaktiviere library für non-admins
 */
function onlinekurslabor_access_media_browser_plugins_alter(&$plugins) {
    global $user;
    if (!in_array('administrator', array_values($user->roles))) {
        // Hide the "Library" tab on the WYSIWYG media upload widget.
        unset($plugins['media_default--media_browser_1']);
    }
}




 /**
 * Implements hook_file_download_access($file_item, $entity_type, $entity)
 * hook_file_download_access wird zunächst aufgerufen. 
 * Hier wird Zugriff auf private files in a field freigegeben (insbesondere Taxonomy wie Kurs-Sponsoren)
 * 
 * Eine Freigabe allein aufgrund hook_file_download ist nicht immer möglich!
 * 
 * Anschließend wird onlinekurslabor_access_file_download aufgerufen. 
 * Darin kann ein erlaubter Zugriff noch abgebrochen werden.  
 *  
 */ 
function onlinekurslabor_access_file_download_access($file_item, $entity_type, $entity) {
   
    //bilder in taxonomien oder profilbilder? Access!
    if(in_array($entity_type, array('taxonomy_term','profile2')))
        return true;
    /*
    {
        dpm('In onlinekurslabor_access_file_download_access, file, type, entity');
        dpm($file_item);
        dpm($entity_type);
        dpm($entity);
    }*/
    //neues proplem mit file_entity: erlaube generell zugriff auf dateien im kontext... ,
    // Feinsteuerung geschieht in onlinekurslabor_access_file_download
    if(in_array($entity_type,array('node')))
    {
        if(in_array($entity->type, array(NM_VIDEOSAFE_VIDEO, 'nm_stream')))
        {
            return true;
        }
    }
}
 

/**
 * Implements hook_file_download().
 * notice: 
 * http://stackoverflow.com/questions/19215098/html5-video-audio-player-on-mobile-safari-ios-7-ios-10-excludes-cookies
 * http://stackoverflow.com/questions/39636103/video-requiring-asp-net-authentication-not-working-on-ios-10
 * IOS 10 (safari, chrome) unterstuetzt keine Videos mit Sessioncookies.
 * beispielhafter Test: https://www.bizify.me/test-if-your-ios-device-is-broken/
 * https://moodle.org/mod/forum/discuss.php?d=340465
 * 
 * 403-Workaround funktioniert nur einmalig, macht Springen kaputt
 * 
 */
function onlinekurslabor_access_file_download($uri) {
    #    drupal_set_message("access" . $uri); return -1;

    //17.11.2017 - 13:18 - SN
    //Important - DENY Access to DB Backup Files!
    if (stristr($uri, "/backup_migrate/")) {
      if (!user_access("access backup files")) {
        return -1;
      }
    }

    global $user;
    $account = clone $user;
    $access_allowed = false;
    //laedt file-usage, also wo eine datei genutzt wird
    //zunächst nur abstract, da doppelverwendung
    $abstract_usage_query = db_select('file_usage', 'fu');
    $abstract_usage_query->addField('fu', 'id');
    $abstract_usage_query->addField('fu', 'type');
    $abstract_usage_query->join('file_managed', 'fm', 'fm.fid = fu.fid');
    $abstract_usage_query->condition('fm.uri', $uri, '=');
    //tatsächliche ausführung des queries
    $usage_query = clone $abstract_usage_query;
    $usage_query->condition('fu.type', array('node',), 'IN');

    $fileusage_result = $usage_query->execute();

    $info = image_get_info($uri);
    $mime = $info['mime_type'];
    if (!$mime) {
      $mime = file_get_mimetype($uri);
    }
        
    #drupal_set_message("db_result" . var_export($fileusage_result, true));  dpm(count($fileusage_result)); return -1;
    $node_usage_found = false;
    foreach ($fileusage_result as $record) {
        $node_usage_found = true;
        #    dpm($record); return -1;

        if ($record->type == 'node') {
            $node = node_load($record->id);
            #dpm($node); return -1;
            #drupal_set_message("access" . var_export(node_load($record->id),true) . 'to' . node_access('view', node_load($record->id), $account)); return -1;
            if (node_access('view', $node, $account))
                $access_allowed = true;
            //Video protecten
            if ($node->type == NM_VIDEOSAFE_VIDEO) {
              
              /* OK das ist jetzt ein bisschen spooky. Fordere ich einen Screenshot 
               * zu einem Videosafe-Video an wird über file_download_headers geprüft, 
               * ob ich Zugriff aufs zugehörige Video habe (also hier).
               * deswegen schau ich mir die URI in der Adresszeile des Browsers an, ob ich wirklich das Video 
               * oder eigtl den Screenshot möchte, damit der mir nicht die
               * Video-Daten rausschiebt.
               */
              $browser_uri_args = arg();
              $requested_file_name = array_pop($browser_uri_args); //letztes Argument der Adresszeile ("screenshot.jpg")
              $requested_file_ending = pathinfo($requested_file_name, PATHINFO_EXTENSION);
              $HAS_REQUESTED_SCREENSHOT = ($requested_file_ending == 'jpg');
                /* leider leider zicken sonst die browser, wenn man dann als student und autor abwechselnd testen möchte.
                 *  das erste geladene bleibt im cache.. 
                 */
                //watchdog('videosafe-file-stream', "requesting" . var_export($_SERVER, true), array(), WATCHDOG_DEBUG);
                if(!$HAS_REQUESTED_SCREENSHOT)
                {
                  header('Expires: Sun, 01 Jan 2014 00:00:00 GMT');
                  header('Cache-Control: no-store, no-cache, must-revalidate');
                  header('Cache-Control: post-check=0, pre-check=0', FALSE);
                  header('Pragma: no-cache');
                  header('Content-Type: ' . $mime);
                }
               
                //wir schauen nach, in welchem h5p-content das gelistet wird  
                $h5p_nodes = _videosafe_get_h5p_usage($uri);
                //watchdog('videosafe-file-stream', "URI $uri used in ".count($h5p_nodes)." h5p-objects" , array(), WATCHDOG_DEBUG);
                
                foreach ($h5p_nodes as $h5p_node) {
                    //watchdog('videosafe-file-stream', "found h5p_object is: nid: ".$h5p_node->nid.' title:  '.$h5p_node->title , array(), WATCHDOG_DEBUG);
                    //zugriff auf einen h5p, dann auf das video, egal wo
                    if (node_access('view', $h5p_node, $account)) {
                        $access_allowed = true;
                        break;
                    }
                }
                if($HAS_REQUESTED_SCREENSHOT)
                {
                    continue;
                }
                elseif (!$access_allowed) {
                    drupal_goto(drupal_get_path('module', 'onlinekurslabor_access') . '/assets/video/403.mp4', array(), 307);
                } //_videosafe_was_node_edited: wuerde nach node-bearbeiten aufs video leiten
                elseif (!_videosafe_was_node_edited($node) && $access_allowed) {

                    # return array('Content-Type' => $mime);
                    $real_file_path = drupal_realpath($uri);
                    _videosafe_downloadRange($real_file_path);
                }
            }
        }
    }


    //file in keinem node verwendet => zugriff
    if (!$node_usage_found) {
        $access_allowed = true;
    } 
    //verwendet in einer node und kein access darauf
    elseif(!$access_allowed) {
        //Jetzt kann irgendn Scherzkeks bspw ein Profilbild aber in einer Kursnews verwendet haben.
        //dann geben wir das Bild aufgrund der other_usage frei.
        //berücksichtigte other-usage ist derzeit profile2','taxonomy','default_image
        $additional_usage_query = clone $abstract_usage_query;
        //$additional_usage_query->condition('fu.type', array('node'), 'NOT IN');
        $additional_usage_query->condition('fu.type', array('profile2','taxonomy','default_image'), 'IN');
        $other_usage = $additional_usage_query->execute();
        $other_usage_found = 0;
        //count gibt falsches ergebnis, deswegen foreach
        foreach($other_usage as $other_usage_record) 
           $other_usage_found++;
        //wenn andere usage gefunden, access erlauben
        $access_allowed = (boolean) $other_usage_found;
    }
    
    
    //jetzt müssen wir für video-screenshots noch prüfen wie das mit field_file_belongs_to ist.
    $fileobject_candidates = file_load_multiple(array(), array('uri' => $uri));
    $fileobject = reset($fileobject_candidates);

    if($fileobject && !empty($fileobject->field_file_belongs_to))
    {
        $file_belongs_to_fid = $fileobject->field_file_belongs_to[LANGUAGE_NONE][0]['target_id'];
        $file_belongs_to_object = file_load($file_belongs_to_fid);    
        //prüft, ob headers ankommen. ja = access.
        $file_headers_download_check =  file_download_headers($file_belongs_to_object->uri);
        $access_allowed = !empty($file_headers_download_check);
    }

    if ($access_allowed) {

        return array('Content-Type' => $mime);
    }

    return -1;
}

/**
 * Prüft, ob der übergebene Content im Objekt $o_object verfügbar ist.
 *  
 * @param StdClass $o_domain_content ein Domain-Content wie Frage-Antwort oder H5P
 * @param StdClass $o_object ein Kurs oder ein Lehrtext
 * @return boolean true or false
 */
function _onlinekurslabor_access_domain_content_is_available_in($o_domain_content, $o_object) {
    $available_domains = array();
    $content_is_member = false;
    if ($o_object->type == NM_COURSE) {
        $available_domains[] = $o_object->field_domain_ref[LANGUAGE_NONE][0]["target_id"];
        $available_domains[] = $o_object->field_domain_demo_ref[LANGUAGE_NONE][0]["target_id"];
    } elseif ($o_object->type == NM_CONTENT_DOMAIN)
        $available_domains[] = $o_object->nid;

    /* prüfe: ist der content mitglied im lehrtext oder
     * in einem der lehrtexte, die diesem kurs zugeordnet sind.
     */
    foreach ($available_domains as $domain_nid) {
        if (og_is_member('node', $domain_nid, 'node', $o_domain_content)) {
            $content_is_member = true;
        }
    }
    switch ($o_domain_content->type) {
        case NM_INTERACTIVE_CONTENT:
            //h5p is  member des lehrtexts oder dozent darf den content   bearbeiten
            return ($content_is_member || node_access('update', $o_domain_content));
        /* aufgaben im lehrtext */
        case NM_CONTENT_MULTIPLE_CHOICE:
        case NM_CONTENT_QUESTION_AND_ANSWER:
            return $content_is_member;
    }
    trigger_error("Given content of type " . $o_domain_content->type . " or object of type " . $o_domain_content->type . " not applicable for this", E_USER_ERROR);
}



