<?php

function privatemsg_okl_privatemsg_thread_operations() {
  global $user;
  $operations = array();
  $roles[] = ($user->roles);
    if (in_array( NM_ROLE_ADMIN , $roles ) && privatemsg_user_access('delete privatemsg')) {
    $operations['delete'] = array(
      'label' => t('Delete'),
      'callback' => 'privatemsg_thread_change_delete',
      'callback arguments' => array('delete' => 1),
      'undo callback' => 'privatemsg_thread_change_delete',
      'undo callback arguments' => array('delete' => 0),
      'button' => TRUE,
    );
  }
  return $operations;
}


/**
 * Get a button linking to "write new message" to recipient arg(1)
 * @global type $user current user
 * @global type $base_url
 * @global arg(1) $uid of visited user
 * @return type
 */
function privatemsg_okl_get_profile_btn(){
  $user_id = arg(1);
  global $user;
  if ($user_id != $user->uid){
    global $base_url;
    $btn = '<button type="button" class="btn btn-default write-message"><i class="glyphicon glyphicon-envelope"></i> '.t('Write message').'</button>';
    return l($btn, $base_url . '/messages/new/'. $user_id, array('attributes' => array(), 'html' => TRUE,));
  }
}


/**
 * Implements hook_form_alter() to imitate the admin's tabs.
 * greift nicht fuer admins, da diese schon tabs haben
 */
function privatemsg_okl_form_alter(&$form, &$form_state, $form_id) {
    if (!user_access('administer users') && ((in_array($form_id, array('pm_block_user_list', 'privatemsg_list'))) || ($form_id == 'privatemsg_new' && empty($form['thread_id'])))) {
        _privatemsg_okl_add_fake_tabs_to_content($form);
    }
}

/*
 * das selbe fuer view message:
 * hook_entitiy_view_alter
 * auch nicht fuer admins
 */
function privatemsg_okl_privatemsg_view_alter(&$content) {
   if (!user_access('administer users'))
           _privatemsg_okl_add_fake_tabs_to_content($content);
}

 
/*
 * fügt einem content-array tabs zum wechseln zw. msg-bereichen hinzu
 */
function _privatemsg_okl_add_fake_tabs_to_content(&$content) {
    $content['navigtion_tabs'] = array(
        '#type' => 'markup',
        '#markup' => _privatemsg_okl_get_navigation_tabs(),
        '#weight' => -100,
    );
}

/**
 * liefert tabs fuer privatemsg
 */
function _privatemsg_okl_get_navigation_tabs() {
    $navigation = _privatemsg_okl_get_navigation_links();
    $tabs = '<span class="grepformenu_ioj70uzh8sfd"></span>'
            . '<ul class="nav nav-tabs">';
    foreach ($navigation as $nav) {
        $active = $nav['active'] ? 'active' : '';
        $tabs .= sprintf('<li class="%s"><a class="%s" href="%s">%s</a></li>', $active, $active, $nav['href'], $nav['title']);
    }
    $tabs.='</ul>';
    return $tabs;
}

/**
 * liefert die privatemsg-links aus der navigation
 * muss bei weiteren msg-plugins erweitert werden
 */
function _privatemsg_okl_get_navigation_links() {
    $current_path = current_path();
#dpm($current_path); 
    $pathes = array('messages', 'messages/sent', 'messages/list');
    if (strstr($current_path, 'messages/view'))
        $pathes[] = $current_path;
    if (module_exists('pm_block_user'))
        $pathes[] = 'messages/blocked';
    
    $links = array();
    foreach ($pathes as $path) {
        $menu_item = menu_get_item($path);
        if($path ==='messages')
            $menu_item['title']= 'Inbox';
        
        
        $links[] = array('href' => '/' . $menu_item['href'], 'title' => t($menu_item['title']), 'active' => ($current_path == $menu_item['href']));
    }
    return $links;
}

/**
 * hook_views_api()
 * Views können per default eintrgäe vom typ node anzeigen. man kann aber auch
 * custom tables ausgeben. diese muss man in einer separaten datei definieren.
 * hier wird auf die datei verwiesen
 * @return type
 */
function privatemsg_okl_views_api() {
    return array(
        'api' => '3',
        'path' => drupal_get_path('module','privatemsg_okl'). '/views',
    );
}



/**
 * Implements hook_query_privatemsg_autocomplete_alter().
 * changes privatemsg_realname_query_privatemsg_autocomplete_alter
 * Grund: Ich möchte im User-Eingabefeld auch Nutzer anhand ihres Nachnamens finden können
 */
function privatemsg_okl_query_privatemsg_autocomplete_alter(SelectQueryInterface $query) {
    $search = $query->getMetaData('arg_1');
    $names = $query->getMetaData('arg_2');


    // ersetze die privatemsg-realname-condition

    $conditions = &$query->conditions();
    foreach ($conditions as $key => $condition) {
        //das hier ist  die privatemsg_realname-condition
        if (isset($condition['field']) && is_object($condition['field']) && get_class($condition['field']) === 'DatabaseCondition' && $condition['field']->conditions()[0]['field'] == 'r.realname' && $condition['field']->conditions()[1]['field'] == 'u.name') {
            //überschreibe bestehende queries mit %SEARCH% statt SEARCH%
            $condition['field']
                    ->condition('r.realname', '%' . $search . '%', 'LIKE')
                    ->condition('u.name', '%' . $search . '%', 'LIKE');
        }
    }
}

/*
 * Implements hook_form_FORM_ID_alter().
 * adds Info-Tab in privatemsg-Tabs admin/config/messaging/privatemsg
 */

function privatemsg_okl_form_privatemsg_admin_settings_alter(&$form, &$form_state) {
    $form['realname']['info'] = array(
        '#markup' => '<b>Beware:</b> privatemsg_realname_query_privatemsg_autocomplete_alter is overriden in privatemsg_okl. No settings available!!'
    );
}


/**
 * undocumented hook
 *  implements hook_query_privatemsg_message_load_multiple_alter($query   )
 * 
 *  deleted messages werden ausgefiltert. 
 * 
 * @param type $query
 */
function privatemsg_okl_query_privatemsg_message_load_multiple_alter($query) {
    $load_all = $query->getMetaData('arg_3');

    if (!$load_all) {
        $query->condition('deleted', 0);
    }
}
